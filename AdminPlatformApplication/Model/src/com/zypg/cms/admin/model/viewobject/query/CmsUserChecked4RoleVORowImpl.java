package com.zypg.cms.admin.model.viewobject.query;

import java.math.BigDecimal;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Jan 10 12:13:53 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CmsUserChecked4RoleVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        UserId {
            public Object get(CmsUserChecked4RoleVORowImpl obj) {
                return obj.getUserId();
            }

            public void put(CmsUserChecked4RoleVORowImpl obj, Object value) {
                obj.setUserId((Number)value);
            }
        }
        ,
        DisplayName {
            public Object get(CmsUserChecked4RoleVORowImpl obj) {
                return obj.getDisplayName();
            }

            public void put(CmsUserChecked4RoleVORowImpl obj, Object value) {
                obj.setDisplayName((String)value);
            }
        }
        ,
        CompCode {
            public Object get(CmsUserChecked4RoleVORowImpl obj) {
                return obj.getCompCode();
            }

            public void put(CmsUserChecked4RoleVORowImpl obj, Object value) {
                obj.setCompCode((String)value);
            }
        }
        ,
        UserName {
            public Object get(CmsUserChecked4RoleVORowImpl obj) {
                return obj.getUserName();
            }

            public void put(CmsUserChecked4RoleVORowImpl obj, Object value) {
                obj.setUserName((String)value);
            }
        }
        ,
        RoleId {
            public Object get(CmsUserChecked4RoleVORowImpl obj) {
                return obj.getRoleId();
            }

            public void put(CmsUserChecked4RoleVORowImpl obj, Object value) {
                obj.setRoleId((BigDecimal)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CmsUserChecked4RoleVORowImpl object);

        public abstract void put(CmsUserChecked4RoleVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int USERID = AttributesEnum.UserId.index();
    public static final int DISPLAYNAME = AttributesEnum.DisplayName.index();
    public static final int COMPCODE = AttributesEnum.CompCode.index();
    public static final int USERNAME = AttributesEnum.UserName.index();
    public static final int ROLEID = AttributesEnum.RoleId.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CmsUserChecked4RoleVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute UserId.
     * @return the UserId
     */
    public Number getUserId() {
        return (Number) getAttributeInternal(USERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute UserId.
     * @param value value to set the  UserId
     */
    public void setUserId(Number value) {
        setAttributeInternal(USERID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DisplayName.
     * @return the DisplayName
     */
    public String getDisplayName() {
        return (String) getAttributeInternal(DISPLAYNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DisplayName.
     * @param value value to set the  DisplayName
     */
    public void setDisplayName(String value) {
        setAttributeInternal(DISPLAYNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CompCode.
     * @return the CompCode
     */
    public String getCompCode() {
        return (String) getAttributeInternal(COMPCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CompCode.
     * @param value value to set the  CompCode
     */
    public void setCompCode(String value) {
        setAttributeInternal(COMPCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute UserName.
     * @return the UserName
     */
    public String getUserName() {
        return (String) getAttributeInternal(USERNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute UserName.
     * @param value value to set the  UserName
     */
    public void setUserName(String value) {
        setAttributeInternal(USERNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RoleId.
     * @return the RoleId
     */
    public BigDecimal getRoleId() {
        return (BigDecimal) getAttributeInternal(ROLEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RoleId.
     * @param value value to set the  RoleId
     */
    public void setRoleId(BigDecimal value) {
        setAttributeInternal(ROLEID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
