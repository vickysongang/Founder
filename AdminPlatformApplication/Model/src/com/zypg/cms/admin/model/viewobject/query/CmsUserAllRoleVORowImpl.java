package com.zypg.cms.admin.model.viewobject.query;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Apr 10 13:31:01 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CmsUserAllRoleVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        RoleId {
            public Object get(CmsUserAllRoleVORowImpl obj) {
                return obj.getRoleId();
            }

            public void put(CmsUserAllRoleVORowImpl obj, Object value) {
                obj.setRoleId((Number)value);
            }
        }
        ,
        RoleName {
            public Object get(CmsUserAllRoleVORowImpl obj) {
                return obj.getRoleName();
            }

            public void put(CmsUserAllRoleVORowImpl obj, Object value) {
                obj.setRoleName((String)value);
            }
        }
        ,
        CompCode {
            public Object get(CmsUserAllRoleVORowImpl obj) {
                return obj.getCompCode();
            }

            public void put(CmsUserAllRoleVORowImpl obj, Object value) {
                obj.setCompCode((String)value);
            }
        }
        ,
        RoleType {
            public Object get(CmsUserAllRoleVORowImpl obj) {
                return obj.getRoleType();
            }

            public void put(CmsUserAllRoleVORowImpl obj, Object value) {
                obj.setRoleType((String)value);
            }
        }
        ,
        HasAuthority {
            public Object get(CmsUserAllRoleVORowImpl obj) {
                return obj.getHasAuthority();
            }

            public void put(CmsUserAllRoleVORowImpl obj, Object value) {
                obj.setHasAuthority((Boolean)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CmsUserAllRoleVORowImpl object);

        public abstract void put(CmsUserAllRoleVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ROLEID = AttributesEnum.RoleId.index();
    public static final int ROLENAME = AttributesEnum.RoleName.index();
    public static final int COMPCODE = AttributesEnum.CompCode.index();
    public static final int ROLETYPE = AttributesEnum.RoleType.index();
    public static final int HASAUTHORITY = AttributesEnum.HasAuthority.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CmsUserAllRoleVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute RoleId.
     * @return the RoleId
     */
    public Number getRoleId() {
        return (Number)getAttributeInternal(ROLEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RoleId.
     * @param value value to set the  RoleId
     */
    public void setRoleId(Number value) {
        setAttributeInternal(ROLEID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RoleName.
     * @return the RoleName
     */
    public String getRoleName() {
        return (String) getAttributeInternal(ROLENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RoleName.
     * @param value value to set the  RoleName
     */
    public void setRoleName(String value) {
        setAttributeInternal(ROLENAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CompCode.
     * @return the CompCode
     */
    public String getCompCode() {
        return (String) getAttributeInternal(COMPCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CompCode.
     * @param value value to set the  CompCode
     */
    public void setCompCode(String value) {
        setAttributeInternal(COMPCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RoleType.
     * @return the RoleType
     */
    public String getRoleType() {
        return (String) getAttributeInternal(ROLETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RoleType.
     * @param value value to set the  RoleType
     */
    public void setRoleType(String value) {
        setAttributeInternal(ROLETYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HasAuthority.
     * @return the HasAuthority
     */
    public Boolean getHasAuthority() {
        return (Boolean) getAttributeInternal(HASAUTHORITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HasAuthority.
     * @param value value to set the  HasAuthority
     */
    public void setHasAuthority(Boolean value) {
        setAttributeInternal(HASAUTHORITY, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
