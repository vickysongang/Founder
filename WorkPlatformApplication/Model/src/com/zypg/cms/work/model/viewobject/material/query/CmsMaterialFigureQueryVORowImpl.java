package com.zypg.cms.work.model.viewobject.material.query;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Aug 29 12:22:34 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CmsMaterialFigureQueryVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        FigureId {
            public Object get(CmsMaterialFigureQueryVORowImpl obj) {
                return obj.getFigureId();
            }

            public void put(CmsMaterialFigureQueryVORowImpl obj, Object value) {
                obj.setFigureId((Number)value);
            }
        }
        ,
        FigureName {
            public Object get(CmsMaterialFigureQueryVORowImpl obj) {
                return obj.getFigureName();
            }

            public void put(CmsMaterialFigureQueryVORowImpl obj, Object value) {
                obj.setFigureName((String)value);
            }
        }
        ,
        FigureDimension {
            public Object get(CmsMaterialFigureQueryVORowImpl obj) {
                return obj.getFigureDimension();
            }

            public void put(CmsMaterialFigureQueryVORowImpl obj, Object value) {
                obj.setFigureDimension((String)value);
            }
        }
        ,
        DocId {
            public Object get(CmsMaterialFigureQueryVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(CmsMaterialFigureQueryVORowImpl obj, Object value) {
                obj.setDocId((Number)value);
            }
        }
        ,
        FigureAuthor {
            public Object get(CmsMaterialFigureQueryVORowImpl obj) {
                return obj.getFigureAuthor();
            }

            public void put(CmsMaterialFigureQueryVORowImpl obj, Object value) {
                obj.setFigureAuthor((String)value);
            }
        }
        ,
        Keyword {
            public Object get(CmsMaterialFigureQueryVORowImpl obj) {
                return obj.getKeyword();
            }

            public void put(CmsMaterialFigureQueryVORowImpl obj, Object value) {
                obj.setKeyword((String)value);
            }
        }
        ,
        LastUpdateDate {
            public Object get(CmsMaterialFigureQueryVORowImpl obj) {
                return obj.getLastUpdateDate();
            }

            public void put(CmsMaterialFigureQueryVORowImpl obj, Object value) {
                obj.setLastUpdateDate((Date)value);
            }
        }
        ,
        Status {
            public Object get(CmsMaterialFigureQueryVORowImpl obj) {
                return obj.getStatus();
            }

            public void put(CmsMaterialFigureQueryVORowImpl obj, Object value) {
                obj.setStatus((String)value);
            }
        }
        ,
        LibCode {
            public Object get(CmsMaterialFigureQueryVORowImpl obj) {
                return obj.getLibCode();
            }

            public void put(CmsMaterialFigureQueryVORowImpl obj, Object value) {
                obj.setLibCode((String)value);
            }
        }
        ,
        CompCode {
            public Object get(CmsMaterialFigureQueryVORowImpl obj) {
                return obj.getCompCode();
            }

            public void put(CmsMaterialFigureQueryVORowImpl obj, Object value) {
                obj.setCompCode((String)value);
            }
        }
        ,
        DeleteFlag {
            public Object get(CmsMaterialFigureQueryVORowImpl obj) {
                return obj.getDeleteFlag();
            }

            public void put(CmsMaterialFigureQueryVORowImpl obj, Object value) {
                obj.setDeleteFlag((String)value);
            }
        }
        ,
        ThumbnailUrl {
            public Object get(CmsMaterialFigureQueryVORowImpl obj) {
                return obj.getThumbnailUrl();
            }

            public void put(CmsMaterialFigureQueryVORowImpl obj, Object value) {
                obj.setThumbnailUrl((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CmsMaterialFigureQueryVORowImpl object);

        public abstract void put(CmsMaterialFigureQueryVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int FIGUREID = AttributesEnum.FigureId.index();
    public static final int FIGURENAME = AttributesEnum.FigureName.index();
    public static final int FIGUREDIMENSION = AttributesEnum.FigureDimension.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int FIGUREAUTHOR = AttributesEnum.FigureAuthor.index();
    public static final int KEYWORD = AttributesEnum.Keyword.index();
    public static final int LASTUPDATEDATE = AttributesEnum.LastUpdateDate.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int LIBCODE = AttributesEnum.LibCode.index();
    public static final int COMPCODE = AttributesEnum.CompCode.index();
    public static final int DELETEFLAG = AttributesEnum.DeleteFlag.index();
    public static final int THUMBNAILURL = AttributesEnum.ThumbnailUrl.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CmsMaterialFigureQueryVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute FigureId.
     * @return the FigureId
     */
    public Number getFigureId() {
        return (Number) getAttributeInternal(FIGUREID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FigureId.
     * @param value value to set the  FigureId
     */
    public void setFigureId(Number value) {
        setAttributeInternal(FIGUREID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FigureName.
     * @return the FigureName
     */
    public String getFigureName() {
        return (String) getAttributeInternal(FIGURENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FigureName.
     * @param value value to set the  FigureName
     */
    public void setFigureName(String value) {
        setAttributeInternal(FIGURENAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FigureDimension.
     * @return the FigureDimension
     */
    public String getFigureDimension() {
        return (String) getAttributeInternal(FIGUREDIMENSION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FigureDimension.
     * @param value value to set the  FigureDimension
     */
    public void setFigureDimension(String value) {
        setAttributeInternal(FIGUREDIMENSION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public Number getDocId() {
        return (Number) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DocId.
     * @param value value to set the  DocId
     */
    public void setDocId(Number value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FigureAuthor.
     * @return the FigureAuthor
     */
    public String getFigureAuthor() {
        return (String) getAttributeInternal(FIGUREAUTHOR);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FigureAuthor.
     * @param value value to set the  FigureAuthor
     */
    public void setFigureAuthor(String value) {
        setAttributeInternal(FIGUREAUTHOR, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Keyword.
     * @return the Keyword
     */
    public String getKeyword() {
        return (String) getAttributeInternal(KEYWORD);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Keyword.
     * @param value value to set the  Keyword
     */
    public void setKeyword(String value) {
        setAttributeInternal(KEYWORD, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LastUpdateDate.
     * @return the LastUpdateDate
     */
    public Date getLastUpdateDate() {
        return (Date) getAttributeInternal(LASTUPDATEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LastUpdateDate.
     * @param value value to set the  LastUpdateDate
     */
    public void setLastUpdateDate(Date value) {
        setAttributeInternal(LASTUPDATEDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Status.
     * @return the Status
     */
    public String getStatus() {
        return (String) getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Status.
     * @param value value to set the  Status
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LibCode.
     * @return the LibCode
     */
    public String getLibCode() {
        return (String) getAttributeInternal(LIBCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LibCode.
     * @param value value to set the  LibCode
     */
    public void setLibCode(String value) {
        setAttributeInternal(LIBCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CompCode.
     * @return the CompCode
     */
    public String getCompCode() {
        return (String) getAttributeInternal(COMPCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CompCode.
     * @param value value to set the  CompCode
     */
    public void setCompCode(String value) {
        setAttributeInternal(COMPCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DeleteFlag.
     * @return the DeleteFlag
     */
    public String getDeleteFlag() {
        return (String) getAttributeInternal(DELETEFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DeleteFlag.
     * @param value value to set the  DeleteFlag
     */
    public void setDeleteFlag(String value) {
        setAttributeInternal(DELETEFLAG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ThumbnailUrl.
     * @return the ThumbnailUrl
     */
    public String getThumbnailUrl() {
        return (String) getAttributeInternal(THUMBNAILURL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ThumbnailUrl.
     * @param value value to set the  ThumbnailUrl
     */
    public void setThumbnailUrl(String value) {
        setAttributeInternal(THUMBNAILURL, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
