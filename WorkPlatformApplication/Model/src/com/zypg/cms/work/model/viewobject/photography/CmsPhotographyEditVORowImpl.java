package com.zypg.cms.work.model.viewobject.photography;

import oracle.jbo.domain.Date;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon May 19 19:04:31 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CmsPhotographyEditVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        SeriesName {
            public Object get(CmsPhotographyEditVORowImpl obj) {
                return obj.getSeriesName();
            }

            public void put(CmsPhotographyEditVORowImpl obj, Object value) {
                obj.setSeriesName((String)value);
            }
        }
        ,
        Photographer {
            public Object get(CmsPhotographyEditVORowImpl obj) {
                return obj.getPhotographer();
            }

            public void put(CmsPhotographyEditVORowImpl obj, Object value) {
                obj.setPhotographer((String)value);
            }
        }
        ,
        PhotographyType {
            public Object get(CmsPhotographyEditVORowImpl obj) {
                return obj.getPhotographyType();
            }

            public void put(CmsPhotographyEditVORowImpl obj, Object value) {
                obj.setPhotographyType((String)value);
            }
        }
        ,
        PhotographyTime {
            public Object get(CmsPhotographyEditVORowImpl obj) {
                return obj.getPhotographyTime();
            }

            public void put(CmsPhotographyEditVORowImpl obj, Object value) {
                obj.setPhotographyTime((Date)value);
            }
        }
        ,
        PhotographyLocation {
            public Object get(CmsPhotographyEditVORowImpl obj) {
                return obj.getPhotographyLocation();
            }

            public void put(CmsPhotographyEditVORowImpl obj, Object value) {
                obj.setPhotographyLocation((String)value);
            }
        }
        ,
        CompCode {
            public Object get(CmsPhotographyEditVORowImpl obj) {
                return obj.getCompCode();
            }

            public void put(CmsPhotographyEditVORowImpl obj, Object value) {
                obj.setCompCode((String)value);
            }
        }
        ,
        Keyword {
            public Object get(CmsPhotographyEditVORowImpl obj) {
                return obj.getKeyword();
            }

            public void put(CmsPhotographyEditVORowImpl obj, Object value) {
                obj.setKeyword((String)value);
            }
        }
        ,
        FigureDesc {
            public Object get(CmsPhotographyEditVORowImpl obj) {
                return obj.getFigureDesc();
            }

            public void put(CmsPhotographyEditVORowImpl obj, Object value) {
                obj.setFigureDesc((String)value);
            }
        }
        ,
        Remarks {
            public Object get(CmsPhotographyEditVORowImpl obj) {
                return obj.getRemarks();
            }

            public void put(CmsPhotographyEditVORowImpl obj, Object value) {
                obj.setRemarks((String)value);
            }
        }
        ,
        CategoryId {
            public Object get(CmsPhotographyEditVORowImpl obj) {
                return obj.getCategoryId();
            }

            public void put(CmsPhotographyEditVORowImpl obj, Object value) {
                obj.setCategoryId((Number)value);
            }
        }
        ,
        CategoryName {
            public Object get(CmsPhotographyEditVORowImpl obj) {
                return obj.getCategoryName();
            }

            public void put(CmsPhotographyEditVORowImpl obj, Object value) {
                obj.setCategoryName((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CmsPhotographyEditVORowImpl object);

        public abstract void put(CmsPhotographyEditVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SERIESNAME = AttributesEnum.SeriesName.index();
    public static final int PHOTOGRAPHER = AttributesEnum.Photographer.index();
    public static final int PHOTOGRAPHYTYPE = AttributesEnum.PhotographyType.index();
    public static final int PHOTOGRAPHYTIME = AttributesEnum.PhotographyTime.index();
    public static final int PHOTOGRAPHYLOCATION = AttributesEnum.PhotographyLocation.index();
    public static final int COMPCODE = AttributesEnum.CompCode.index();
    public static final int KEYWORD = AttributesEnum.Keyword.index();
    public static final int FIGUREDESC = AttributesEnum.FigureDesc.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();
    public static final int CATEGORYID = AttributesEnum.CategoryId.index();
    public static final int CATEGORYNAME = AttributesEnum.CategoryName.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CmsPhotographyEditVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute SeriesName.
     * @return the SeriesName
     */
    public String getSeriesName() {
        return (String) getAttributeInternal(SERIESNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SeriesName.
     * @param value value to set the  SeriesName
     */
    public void setSeriesName(String value) {
        setAttributeInternal(SERIESNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Photographer.
     * @return the Photographer
     */
    public String getPhotographer() {
        return (String) getAttributeInternal(PHOTOGRAPHER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Photographer.
     * @param value value to set the  Photographer
     */
    public void setPhotographer(String value) {
        setAttributeInternal(PHOTOGRAPHER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PhotographyType.
     * @return the PhotographyType
     */
    public String getPhotographyType() {
        return (String) getAttributeInternal(PHOTOGRAPHYTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PhotographyType.
     * @param value value to set the  PhotographyType
     */
    public void setPhotographyType(String value) {
        setAttributeInternal(PHOTOGRAPHYTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PhotographyTime.
     * @return the PhotographyTime
     */
    public Date getPhotographyTime() {
        return (Date) getAttributeInternal(PHOTOGRAPHYTIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PhotographyTime.
     * @param value value to set the  PhotographyTime
     */
    public void setPhotographyTime(Date value) {
        setAttributeInternal(PHOTOGRAPHYTIME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PhotographyLocation.
     * @return the PhotographyLocation
     */
    public String getPhotographyLocation() {
        return (String) getAttributeInternal(PHOTOGRAPHYLOCATION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PhotographyLocation.
     * @param value value to set the  PhotographyLocation
     */
    public void setPhotographyLocation(String value) {
        setAttributeInternal(PHOTOGRAPHYLOCATION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CompCode.
     * @return the CompCode
     */
    public String getCompCode() {
        return (String) getAttributeInternal(COMPCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CompCode.
     * @param value value to set the  CompCode
     */
    public void setCompCode(String value) {
        setAttributeInternal(COMPCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Keyword.
     * @return the Keyword
     */
    public String getKeyword() {
        return (String) getAttributeInternal(KEYWORD);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Keyword.
     * @param value value to set the  Keyword
     */
    public void setKeyword(String value) {
        setAttributeInternal(KEYWORD, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FigureDesc.
     * @return the FigureDesc
     */
    public String getFigureDesc() {
        return (String) getAttributeInternal(FIGUREDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FigureDesc.
     * @param value value to set the  FigureDesc
     */
    public void setFigureDesc(String value) {
        setAttributeInternal(FIGUREDESC, value);
    }


    /**
     * Gets the attribute value for the calculated attribute Remarks.
     * @return the Remarks
     */
    public String getRemarks() {
        return (String) getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Remarks.
     * @param value value to set the  Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CategoryId.
     * @return the CategoryId
     */
    public Number getCategoryId() {
        return (Number) getAttributeInternal(CATEGORYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CategoryId.
     * @param value value to set the  CategoryId
     */
    public void setCategoryId(Number value) {
        setAttributeInternal(CATEGORYID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CategoryName.
     * @return the CategoryName
     */
    public String getCategoryName() {
        return (String) getAttributeInternal(CATEGORYNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CategoryName.
     * @param value value to set the  CategoryName
     */
    public void setCategoryName(String value) {
        setAttributeInternal(CATEGORYNAME, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
