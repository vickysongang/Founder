package com.zypg.cms.work.model.am;


import com.honythink.applicationframework.hadf.CustomApplicationModuleImpl;

import com.zypg.cms.work.model.am.common.DocBookAM;
import com.zypg.cms.work.model.viewobject.docbook.CmsDocBookJobTVOImpl;
import com.zypg.cms.work.model.viewobject.docbook.query.CmsDocBookJobVOImpl;
import com.zypg.cms.work.model.viewobject.docbook.query.CmsDocBookMonitorVOImpl;

import java.util.HashMap;
import java.util.Map;

import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.server.RowQualifier;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon May 12 17:53:27 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DocBookAMImpl extends CustomApplicationModuleImpl implements DocBookAM {
    /**
     * This is the default constructor (do not remove).
     */
    public DocBookAMImpl() {
    }

    public void findMonitorByJobId(Number jobId) {
        CmsDocBookMonitorVOImpl docBookMonitorVO = this.getCmsDocBookMonitorVO();
        docBookMonitorVO.setbvJobId(jobId);
        docBookMonitorVO.executeQuery();
    }

    public Map<String, String> getJobMsgByIds(String jobIds) {
        Map<String, String> jobMsg = new HashMap<String, String>();
        StringBuffer jobNames = new StringBuffer();
        if (jobIds.length() == 0) {
            return jobMsg;
        }
        CmsDocBookJobTVOImpl docBookJobTVO = this.getCmsDocBookJobTVO();
        docBookJobTVO.executeQuery();
        Row[] rows =
            docBookJobTVO.getFilteredRows(new RowQualifier("JobId in (" + jobIds.replaceAll("/", ",").substring(0,
                                                                                                                jobIds.length() -
                                                                                                                1) +
                                                           ")"));
        for (Row row : rows) {
            row.setAttribute("Status", "IMPORTING_DOCBOOK");
            jobNames.append(row.getAttribute("JobName") + "/");
            jobMsg.put("compName", (String)row.getAttribute("CompName"));
            jobMsg.put("compCode", (String)row.getAttribute("CompCode"));
        }
        this.getDBTransaction().commit();
        if (jobNames.length() > 0) {
            jobMsg.put("jobNames", jobNames.substring(0, jobNames.length() - 1));
        }
        return jobMsg;
    }

    public void deleteJob(String jobIds) {
        if (jobIds.length() == 0) {
            return;
        }
        Row[] rows =
            this.getCmsDocBookJobTVO().getFilteredRows(new RowQualifier("JobId in (" + jobIds.substring(0, jobIds.length() -
                                                                                                        1) + ")"));
        for (Row row : rows) {
            row.remove();
        }
        this.getDBTransaction().commit();
    }


    /**
     * Container's getter for CmsDocBookMonitorVO1.
     * @return CmsDocBookMonitorVO1
     */
    public CmsDocBookMonitorVOImpl getCmsDocBookMonitorVO() {
        return (CmsDocBookMonitorVOImpl)findViewObject("CmsDocBookMonitorVO");
    }

    /**
     * Container's getter for CmsDocBookJobTVO1.
     * @return CmsDocBookJobTVO1
     */
    public CmsDocBookJobTVOImpl getCmsDocBookJobTVO() {
        return (CmsDocBookJobTVOImpl)findViewObject("CmsDocBookJobTVO");
    }

    /**
     * Container's getter for CmsDocBookJobVO1.
     * @return CmsDocBookJobVO1
     */
    public CmsDocBookJobVOImpl getCmsDocBookJobVO() {
        return (CmsDocBookJobVOImpl)findViewObject("CmsDocBookJobVO");
    }
}
