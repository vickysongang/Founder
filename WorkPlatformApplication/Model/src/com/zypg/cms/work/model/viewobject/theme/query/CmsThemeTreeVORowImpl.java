package com.zypg.cms.work.model.viewobject.theme.query;

import java.math.BigDecimal;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jul 30 15:53:42 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CmsThemeTreeVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        NodeId {
            public Object get(CmsThemeTreeVORowImpl obj) {
                return obj.getNodeId();
            }

            public void put(CmsThemeTreeVORowImpl obj, Object value) {
                obj.setNodeId((Number)value);
            }
        }
        ,
        NodeName {
            public Object get(CmsThemeTreeVORowImpl obj) {
                return obj.getNodeName();
            }

            public void put(CmsThemeTreeVORowImpl obj, Object value) {
                obj.setNodeName((String)value);
            }
        }
        ,
        NodeType {
            public Object get(CmsThemeTreeVORowImpl obj) {
                return obj.getNodeType();
            }

            public void put(CmsThemeTreeVORowImpl obj, Object value) {
                obj.setNodeType((String)value);
            }
        }
        ,
        ParentNodeId {
            public Object get(CmsThemeTreeVORowImpl obj) {
                return obj.getParentNodeId();
            }

            public void put(CmsThemeTreeVORowImpl obj, Object value) {
                obj.setParentNodeId((Number)value);
            }
        }
        ,
        CompCode {
            public Object get(CmsThemeTreeVORowImpl obj) {
                return obj.getCompCode();
            }

            public void put(CmsThemeTreeVORowImpl obj, Object value) {
                obj.setCompCode((String)value);
            }
        }
        ,
        EnableFlag {
            public Object get(CmsThemeTreeVORowImpl obj) {
                return obj.getEnableFlag();
            }

            public void put(CmsThemeTreeVORowImpl obj, Object value) {
                obj.setEnableFlag((String)value);
            }
        }
        ,
        Remarks {
            public Object get(CmsThemeTreeVORowImpl obj) {
                return obj.getRemarks();
            }

            public void put(CmsThemeTreeVORowImpl obj, Object value) {
                obj.setRemarks((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CmsThemeTreeVORowImpl object);

        public abstract void put(CmsThemeTreeVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int NODEID = AttributesEnum.NodeId.index();
    public static final int NODENAME = AttributesEnum.NodeName.index();
    public static final int NODETYPE = AttributesEnum.NodeType.index();
    public static final int PARENTNODEID = AttributesEnum.ParentNodeId.index();
    public static final int COMPCODE = AttributesEnum.CompCode.index();
    public static final int ENABLEFLAG = AttributesEnum.EnableFlag.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CmsThemeTreeVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute NodeId.
     * @return the NodeId
     */
    public Number getNodeId() {
        return (Number) getAttributeInternal(NODEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute NodeId.
     * @param value value to set the  NodeId
     */
    public void setNodeId(Number value) {
        setAttributeInternal(NODEID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute NodeName.
     * @return the NodeName
     */
    public String getNodeName() {
        return (String) getAttributeInternal(NODENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute NodeName.
     * @param value value to set the  NodeName
     */
    public void setNodeName(String value) {
        setAttributeInternal(NODENAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute NodeType.
     * @return the NodeType
     */
    public String getNodeType() {
        return (String) getAttributeInternal(NODETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute NodeType.
     * @param value value to set the  NodeType
     */
    public void setNodeType(String value) {
        setAttributeInternal(NODETYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ParentNodeId.
     * @return the ParentNodeId
     */
    public Number getParentNodeId() {
        return (Number) getAttributeInternal(PARENTNODEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ParentNodeId.
     * @param value value to set the  ParentNodeId
     */
    public void setParentNodeId(Number value) {
        setAttributeInternal(PARENTNODEID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CompCode.
     * @return the CompCode
     */
    public String getCompCode() {
        return (String) getAttributeInternal(COMPCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CompCode.
     * @param value value to set the  CompCode
     */
    public void setCompCode(String value) {
        setAttributeInternal(COMPCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EnableFlag.
     * @return the EnableFlag
     */
    public String getEnableFlag() {
        return (String) getAttributeInternal(ENABLEFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EnableFlag.
     * @param value value to set the  EnableFlag
     */
    public void setEnableFlag(String value) {
        setAttributeInternal(ENABLEFLAG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Remarks.
     * @return the Remarks
     */
    public String getRemarks() {
        return (String) getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Remarks.
     * @param value value to set the  Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
