
package com.zypg.cms.work.model.am;


import com.honythink.applicationframework.hadf.CustomApplicationModuleImpl;

import com.zypg.cms.work.model.am.common.PeriodicalAM;
import com.zypg.cms.work.model.viewobject.book.query.CmsBookQVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocCategoryRelTVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocCategoryRelTVORowImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocTVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocTVORowImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocUcmRelTVOImpl;
import com.zypg.cms.work.model.viewobject.periodical.CmsPeriodicalEditVOImpl;
import com.zypg.cms.work.model.viewobject.periodical.CmsPeriodicalEditVORowImpl;
import com.zypg.cms.work.model.viewobject.periodical.CmsPeriodicalTVOImpl;
import com.zypg.cms.work.model.viewobject.periodical.CmsPeriodicalTVORowImpl;
import com.zypg.cms.work.model.viewobject.periodical.lov.CmsPeriodNumVOImpl;
import com.zypg.cms.work.model.viewobject.periodical.lov.CmsPeriodYearVOImpl;
import com.zypg.cms.work.model.viewobject.periodical.lov.CmsPeriodicalCategoryVOImpl;
import com.zypg.cms.work.model.viewobject.periodical.lov.CmsPeriodicalCategoryVORowImpl;
import com.zypg.cms.work.model.viewobject.periodical.query.CmsPeriodicalQVOImpl;
import com.zypg.cms.work.model.viewobject.periodical.query.CmsPeriodicalQueryVOImpl;
import com.zypg.cms.work.model.viewobject.periodical.query.CmsPeriodicalVOImpl;
import com.zypg.cms.work.model.viewobject.relation.CmsDocRelTVOImpl;

import java.sql.SQLException;

import oracle.jbo.Row;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu May 08 15:25:35 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PeriodicalAMImpl extends CustomApplicationModuleImpl implements PeriodicalAM {
    /**
     * This is the default constructor (do not remove).
     */
    public PeriodicalAMImpl() {
    }

    public Number preEditPeriodical(String mode, Number docId, String compCode) {
        this.getDBTransaction().getSession().getUserData().put("compCode", compCode);
        Number result = null;
        CmsPeriodicalTVOImpl periodicalTVO = this.getCmsPeriodicalTVO();
        if ("CREATE".equals(mode)) {
            CmsDocTVOImpl docVO = this.getCmsDocTVO();
            CmsDocTVORowImpl docNewRow = (CmsDocTVORowImpl)docVO.createRow();
            docNewRow.setStatus("TO_GATHER_PERIODICAL");
            docNewRow.setLibCode("PERIODICAL");
            docNewRow.setLibTypeCode("END_PROD_LIB");
            docNewRow.setCompCode(compCode);
            docVO.insertRow(docNewRow);

            CmsPeriodicalTVORowImpl newRow = (CmsPeriodicalTVORowImpl)periodicalTVO.createRow();

            //初始化
            CmsPeriodicalCategoryVOImpl periodicalCategoryVO = this.getCmsPeriodicalCategoryVO();
            CmsPeriodicalCategoryVORowImpl row = (CmsPeriodicalCategoryVORowImpl)periodicalCategoryVO.first();
            if (row != null) {
                newRow.setPeriodicalCategoryId(row.getPeriodicalCategoryId());
                newRow.setDocId(docNewRow.getDocId());
                newRow.setPrice(row.getPrice());
                newRow.setPeriodicalType(row.getPeriodicalType());
                newRow.setPeriodicalTypeMeaning(row.getPeriodicalTypeMeaning());
                newRow.setIssn(row.getIssn());
                newRow.setCn(row.getCn());
                newRow.setLang(row.getLang());
                newRow.setLangMeaning(row.getLangMeaning());
                newRow.setChiefEditor(row.getChiefEditor());
                newRow.setBookSize(row.getBookSize());
                newRow.setBookSizeMeaning(row.getBookSizeMeaning());
                newRow.setProdSize(row.getProdSize());
                newRow.setProdSizeMeaning(row.getProdSizeMeaning());
                newRow.setReaderGroup(row.getReaderGroup());
                newRow.setReaderGroupMeaning(row.getReaderGroupMeaning());
                newRow.setPublishing(row.getPublishing());

                periodicalTVO.insertRow(newRow);

                preDocCategroupRel(mode, docNewRow.getDocId(), row.getPeriodicalCategoryId());
            }
            result = newRow.getDocId();
        } else {
            result = docId;
            periodicalTVO.setbvDocId(docId);
            periodicalTVO.executeQuery();
            Row row = periodicalTVO.first();
            if (row != null) {
                row.setAttribute("LastUpdateDate", new Date());
                periodicalTVO.setCurrentRow(row);
            }
            preDocCategroupRel(mode, docId, null);
        }
        return result;
    }

    public void initInfo4View(Number docId) {
        CmsDocTVOImpl docVO = this.getCmsDocTVO4View();
        docVO.setbvDocId(docId);
        docVO.executeQuery();
        CmsDocUcmRelTVOImpl durTVO = this.getCmsDocUcmRelTVO4FileList();
        durTVO.setbvDocId(docId);
        durTVO.executeQuery();
        Row row = docVO.first();
        if (row != null) {
            docVO.setCurrentRow(row);
        }
    }

    private void preDocCategroupRel(String mode, Number docId, Number categoryId) {
        CmsDocCategoryRelTVOImpl docCategoryRelVO = this.getCmsDocCategoryRelTVO();
        if ("CREATE".equals(mode)) {
            CmsDocCategoryRelTVORowImpl docCategoryRelNewRow =
                (CmsDocCategoryRelTVORowImpl)docCategoryRelVO.createRow();
            docCategoryRelNewRow.setDocId(docId);
            docCategoryRelNewRow.setCategoryGroupType("BY_CATEGORY");
            docCategoryRelNewRow.setCategoryId(categoryId);
            docCategoryRelVO.insertRow(docCategoryRelNewRow);
            docCategoryRelVO.setCurrentRow(docCategoryRelNewRow);
        } else {
            docCategoryRelVO.setbvDocId(docId);
            docCategoryRelVO.executeQuery();
            Row row = docCategoryRelVO.first();
            if (row != null) {
                docCategoryRelVO.setCurrentRow(row);
            }
        }
    }

    public void updateDocCategroupRel(Number categoryId) {
        CmsDocCategoryRelTVOImpl docCategoryRelVO = this.getCmsDocCategoryRelTVO();
        Row row = docCategoryRelVO.getCurrentRow();
        if (row != null) {
            CmsDocCategoryRelTVORowImpl docCategoryRelNewRow = (CmsDocCategoryRelTVORowImpl)row;
            docCategoryRelNewRow.setCategoryId(categoryId);
        }
    }

    public void updateCategoryRel(Number categoryId, Number docId) {
        CmsDocCategoryRelTVOImpl docCategoryRelVO = this.getCmsDocCategoryRelTVO();
        docCategoryRelVO.setbvDocId(docId);
        docCategoryRelVO.executeQuery();
        Row row = docCategoryRelVO.first();
        if (row != null) {
            CmsDocCategoryRelTVORowImpl docCategoryRelNewRow = (CmsDocCategoryRelTVORowImpl)row;
            docCategoryRelNewRow.setCategoryId(categoryId);
        }
    }

    public void initPeriodicalEditVO() {
        CmsPeriodicalEditVOImpl vo = this.getCmsPeriodicalEditVO();
        vo.executeQuery();
        Row row = vo.first();
        if (row != null) {
            vo.setCurrentRow(row);
        }
    }

    public void initPeriodNum(Number categoryId, String year) {
        CmsPeriodNumVOImpl vo = this.getCmsPeriodNumVO();
        vo.setbvPeriodicalCategoryId(categoryId);
        vo.setbvYear(year);
        vo.executeQuery();
    }

    public void initYear(Number categoryId) {
        CmsPeriodicalTVOImpl periodicalTVO = this.getCmsPeriodicalTVO();
        CmsPeriodicalTVORowImpl currentRow = (CmsPeriodicalTVORowImpl)periodicalTVO.getCurrentRow();
        //初始化
        CmsPeriodicalCategoryVOImpl periodicalCategoryVO = this.getCmsPeriodicalCategoryVO();
        Row[] categoryRows = periodicalCategoryVO.getFilteredRows("PeriodicalCategoryId", categoryId);
        if (categoryRows.length > 0) {
            CmsPeriodicalCategoryVORowImpl row = (CmsPeriodicalCategoryVORowImpl)categoryRows[0];
            currentRow.setPeriodicalCategoryId(row.getPeriodicalCategoryId());
            currentRow.setPrice(row.getPrice());
            currentRow.setPeriodicalType(row.getPeriodicalTypeMeaning());
            currentRow.setIssn(row.getIssn());
            currentRow.setCn(row.getCn());
            currentRow.setLang(row.getLangMeaning());
            currentRow.setChiefEditor(row.getChiefEditor());
            currentRow.setBookSize(row.getBookSizeMeaning());
            periodicalTVO.setCurrentRow(currentRow);
        }
    }

    public void batchEditPeriodical(String docIds) {
        String[] docId = docIds.split(",");
        CmsPeriodicalTVOImpl periodicalVO = this.getCmsPeriodicalTVO();
        CmsPeriodicalEditVOImpl editVO = this.getCmsPeriodicalEditVO();
        CmsPeriodicalEditVORowImpl editRow = (CmsPeriodicalEditVORowImpl)editVO.getCurrentRow();
        for (String id : docId) {
            try {
                periodicalVO.setbvDocId(new Number(id));
            } catch (SQLException e) {
                e.printStackTrace();
            }
            periodicalVO.executeQuery();
            Row row = periodicalVO.first();
            if (row != null) {
                CmsPeriodicalTVORowImpl periodicalRow = (CmsPeriodicalTVORowImpl)row;
                for (String attr : editRow.getAttributeNames()) {
                    if (editRow.getAttribute(attr) != null) {
                        if ("Keyword".equals(attr)) {
                            String oldKeyword = periodicalRow.getKeyword();
                            String newKeyword = null;
                            if (oldKeyword == null) {
                                newKeyword = editRow.getAttribute(attr) + "";
                            } else {
                                newKeyword = oldKeyword + "," + editRow.getAttribute(attr);
                            }
                            periodicalRow.setAttribute(attr, newKeyword);
                        } else if (attr.indexOf("Lookup") >= 0) {

                        } else {
                            periodicalRow.setAttribute(attr, editRow.getAttribute(attr));
                        }
                    }
                }
                periodicalRow.setLastUpdatedBy(this.getCustomDBTransaction().getUserId());
                periodicalRow.setLastUpdateDate(new Date());
            }
        }
    }

    public long initOnlineReadInfo(Number docId) {
        CmsDocUcmRelTVOImpl onlineReadVO = this.getCmsDocUcmRelTVO4OnlineRead();
        onlineReadVO.setbvDocId(docId);
        onlineReadVO.executeQuery();
        onlineReadVO.setRangeSize(-1);
        return onlineReadVO.getEstimatedRowCount();
    }

    /**
     * 初始化高级查询面板
     */
    public void initComplexSearch4Periodical() {
        CmsPeriodicalQVOImpl vo = this.getCmsPeriodicalQVO();
        vo.executeQuery();
        vo.setCurrentRow(vo.first());
    }


    /**
     * Container's getter for CmsDocTVO.
     * @return CmsDocTVO
     */
    public CmsDocTVOImpl getCmsDocTVO() {
        return (CmsDocTVOImpl)findViewObject("CmsDocTVO");
    }

    /**
     * Container's getter for CmsDocCategoryRelTVO.
     * @return CmsDocCategoryRelTVO
     */
    public CmsDocCategoryRelTVOImpl getCmsDocCategoryRelTVO() {
        return (CmsDocCategoryRelTVOImpl)findViewObject("CmsDocCategoryRelTVO");
    }

    /**
     * Container's getter for CmsPeriodicalVO.
     * @return CmsPeriodicalVO
     */
    public CmsPeriodicalVOImpl getCmsPeriodicalVO() {
        return (CmsPeriodicalVOImpl)findViewObject("CmsPeriodicalVO");
    }

    /**
     * Container's getter for CmsPeriodicalTVO.
     * @return CmsPeriodicalTVO
     */
    public CmsPeriodicalTVOImpl getCmsPeriodicalTVO() {
        return (CmsPeriodicalTVOImpl)findViewObject("CmsPeriodicalTVO");
    }

    /**
     * Container's getter for CmsPeriodicalEditVO.
     * @return CmsPeriodicalEditVO
     */
    public CmsPeriodicalEditVOImpl getCmsPeriodicalEditVO() {
        return (CmsPeriodicalEditVOImpl)findViewObject("CmsPeriodicalEditVO");
    }

    /**
     * Container's getter for CmsPeriodicalCategoryVO.
     * @return CmsPeriodicalCategoryVO
     */
    public CmsPeriodicalCategoryVOImpl getCmsPeriodicalCategoryVO() {
        return (CmsPeriodicalCategoryVOImpl)findViewObject("CmsPeriodicalCategoryVO");
    }

    /**
     * Container's getter for CmsPeriodNumVO.
     * @return CmsPeriodNumVO
     */
    public CmsPeriodNumVOImpl getCmsPeriodNumVO() {
        return (CmsPeriodNumVOImpl)findViewObject("CmsPeriodNumVO");
    }

    /**
     * Container's getter for CmsPeriodYearVO.
     * @return CmsPeriodYearVO
     */
    public CmsPeriodYearVOImpl getCmsPeriodYearVO() {
        return (CmsPeriodYearVOImpl)findViewObject("CmsPeriodYearVO");
    }

    /**
     * Container's getter for CmsDocTVO4View.
     * @return CmsDocTVO4View
     */
    public CmsDocTVOImpl getCmsDocTVO4View() {
        return (CmsDocTVOImpl)findViewObject("CmsDocTVO4View");
    }

    /**
     * Container's getter for CmsPeriodicalTVO4View.
     * @return CmsPeriodicalTVO4View
     */
    public CmsPeriodicalTVOImpl getCmsPeriodicalTVO4View() {
        return (CmsPeriodicalTVOImpl)findViewObject("CmsPeriodicalTVO4View");
    }

    /**
     * Container's getter for CmsDoc2PeriodicalVL.
     * @return CmsDoc2PeriodicalVL
     */
    public ViewLinkImpl getCmsDoc2PeriodicalVL() {
        return (ViewLinkImpl)findViewLink("CmsDoc2PeriodicalVL");
    }

    /**
     * Container's getter for CmsDocRelTVO4View.
     * @return CmsDocRelTVO4View
     */
    public CmsDocRelTVOImpl getCmsDocRelTVO4View() {
        return (CmsDocRelTVOImpl)findViewObject("CmsDocRelTVO4View");
    }

    /**
     * Container's getter for CmsDoc2DocRelVL.
     * @return CmsDoc2DocRelVL
     */
    public ViewLinkImpl getCmsDoc2DocRelVL() {
        return (ViewLinkImpl)findViewLink("CmsDoc2DocRelVL");
    }

    /**
     * Container's getter for CmsDocUcmRelTVO4FileList.
     * @return CmsDocUcmRelTVO4FileList
     */
    public CmsDocUcmRelTVOImpl getCmsDocUcmRelTVO4FileList() {
        return (CmsDocUcmRelTVOImpl)findViewObject("CmsDocUcmRelTVO4FileList");
    }

    /**
     * Container's getter for CmsDocUcmRelTVO4OnlineRead.
     * @return CmsDocUcmRelTVO4OnlineRead
     */
    public CmsDocUcmRelTVOImpl getCmsDocUcmRelTVO4OnlineRead() {
        return (CmsDocUcmRelTVOImpl)findViewObject("CmsDocUcmRelTVO4OnlineRead");
    }

    /**
     * Container's getter for CmsPeriodicalQueryVO.
     * @return CmsPeriodicalQueryVO
     */
    public CmsPeriodicalQueryVOImpl getCmsPeriodicalQueryVO() {
        return (CmsPeriodicalQueryVOImpl)findViewObject("CmsPeriodicalQueryVO");
    }

    /**
     * Container's getter for CmsPeriodicalQVO.
     * @return CmsPeriodicalQVO
     */
    public CmsPeriodicalQVOImpl getCmsPeriodicalQVO() {
        return (CmsPeriodicalQVOImpl)findViewObject("CmsPeriodicalQVO");
    }
}
