package com.zypg.cms.work.model.am;


import com.honythink.applicationframework.hadf.CustomApplicationModuleImpl;

import com.zypg.cms.work.model.am.common.PhotographyFigureAM;
import com.zypg.cms.work.model.viewobject.book.query.CmsBookQVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocCategoryRelTVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocCategoryRelTVORowImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocTVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocTVORowImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocUcmRelTVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocUcmRelTVORowImpl;
import com.zypg.cms.work.model.viewobject.exif.CmsFigureExifInfoTVOImpl;
import com.zypg.cms.work.model.viewobject.exif.CmsFigureExifInfoTVORowImpl;
import com.zypg.cms.work.model.viewobject.figuregroup.CmsDocGroupRelTVOImpl;
import com.zypg.cms.work.model.viewobject.figuregroup.CmsDocGroupRelTVORowImpl;
import com.zypg.cms.work.model.viewobject.material.CmsMaterialFigureTVOImpl;
import com.zypg.cms.work.model.viewobject.material.CmsMaterialFigureTVORowImpl;
import com.zypg.cms.work.model.viewobject.photography.CmsPhotographyEditVOImpl;
import com.zypg.cms.work.model.viewobject.photography.CmsPhotographyEditVORowImpl;
import com.zypg.cms.work.model.viewobject.photography.CmsPhotographyFigureTVOImpl;
import com.zypg.cms.work.model.viewobject.photography.CmsPhotographyFigureTVORowImpl;
import com.zypg.cms.work.model.viewobject.photography.query.CmsPhotographyFigureVOImpl;
import com.zypg.cms.work.model.viewobject.photography.query.CmsPhotographyQVOImpl;
import com.zypg.cms.work.model.viewobject.photography.query.CmsPhotographyQueryVOImpl;
import com.zypg.cms.work.model.viewobject.relation.CmsDocRelTVOImpl;

import java.sql.SQLException;

import java.util.Iterator;
import java.util.Map;

import oracle.jbo.Row;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;

import org.apache.commons.lang.ArrayUtils;
import org.apache.sanselan.ImageInfo;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Apr 23 11:54:55 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PhotographyFigureAMImpl extends CustomApplicationModuleImpl implements PhotographyFigureAM {
    /**
     * This is the default constructor (do not remove).
     */
    public PhotographyFigureAMImpl() {
    }

    /****************************************摄影图库相关**************************************************************/
    public Number preEditPhotography(String mode, Number docId, String compCode) {
        if (this.getDBTransaction().isDirty()) {
            this.getDBTransaction().rollback();
        }
        Number result = null;
        CmsPhotographyFigureTVOImpl cmsPhotographyFigureTVO = this.getCmsPhotographyFigureTVO();
        if ("CREATE".equals(mode)) {
            CmsDocTVOImpl docVO = this.getCmsDocTVO();
            CmsDocTVORowImpl docNewRow = (CmsDocTVORowImpl)docVO.createRow();
            docNewRow.setStatus("TO_INDEX_PHOTOGRAPHY_FIGURE");
            docNewRow.setLibCode("PHOTOGRAPHY_FIGURE");
            docNewRow.setLibTypeCode("MATERIAL_LIB");
            docNewRow.setCompCode(compCode);
            docVO.insertRow(docNewRow);
            CmsPhotographyFigureTVORowImpl newRow =
                (CmsPhotographyFigureTVORowImpl)cmsPhotographyFigureTVO.createRow();
            newRow.setDocId(docNewRow.getDocId());
            cmsPhotographyFigureTVO.insertRow(newRow);
            cmsPhotographyFigureTVO.setCurrentRow(newRow);
            preDocCategroupRel(mode, docNewRow.getDocId());
            result = docNewRow.getDocId();
        } else {
            result = docId;
            cmsPhotographyFigureTVO.setbvDocId(docId);
            cmsPhotographyFigureTVO.executeQuery();
            Row row = cmsPhotographyFigureTVO.first();
            //            Row[] rows = cmsPhotographyFigureTVO.getFilteredRows("DocId", docId);
            if (row != null) {
                row.setAttribute("LastUpdateDate", new Date());
                cmsPhotographyFigureTVO.setCurrentRow(row);
            }
            preDocCategroupRel(mode, docId);
        }
        return result;
    }

    public void updatePhotographyFigureInfo(ImageInfo info, String size) {
        CmsPhotographyFigureTVOImpl cmsPhotographyFigureTVO = this.getCmsPhotographyFigureTVO();
        CmsPhotographyFigureTVORowImpl cmsPhotographyFigureRow =
            (CmsPhotographyFigureTVORowImpl)cmsPhotographyFigureTVO.getCurrentRow();
        cmsPhotographyFigureRow.setFigureFormat(info.getFormat().name);
        cmsPhotographyFigureRow.setFigureResolution(info.getPhysicalWidthDpi() + " DPI");
        cmsPhotographyFigureRow.setFigureXResolution(info.getPhysicalWidthDpi() + " DPI");
        cmsPhotographyFigureRow.setFigureYResolution(info.getPhysicalHeightDpi() + " DPI");
        cmsPhotographyFigureRow.setFigureSize(size);
        cmsPhotographyFigureRow.setFigureWidth(info.getWidth() + "px");
        cmsPhotographyFigureRow.setFigureHeight(info.getHeight() + "px");
        cmsPhotographyFigureRow.setFigureDimension(info.getWidth() + "x" + info.getHeight());
    }

    public void updatePhotographyFigureInfo(String format, String size, int width, int height) {
        CmsPhotographyFigureTVOImpl cmsPhotographyFigureTVO = this.getCmsPhotographyFigureTVO();
        CmsPhotographyFigureTVORowImpl cmsPhotographyFigureRow =
            (CmsPhotographyFigureTVORowImpl)cmsPhotographyFigureTVO.getCurrentRow();
        cmsPhotographyFigureRow.setFigureFormat(format);
        cmsPhotographyFigureRow.setFigureSize(size);
        if (width != 0) {
            cmsPhotographyFigureRow.setFigureWidth(width + "px");
        }
        if (height != 0) {
            cmsPhotographyFigureRow.setFigureHeight(height + "px");
        }
        if (width != 0 && height != 0) {
            cmsPhotographyFigureRow.setFigureDimension(width + "x" + height);
        }
    }

    public void initInfo4View(Number docId) {
        CmsDocTVOImpl docVO = this.getCmsDocTVO4View();
        docVO.setbvDocId(docId);
        docVO.executeQuery();
        //        CmsDocUcmRelTVOImpl durTVO = this.getCmsDocUcmRelTVO4FileList();
        //        durTVO.setbvDocId(docId);
        //        durTVO.executeQuery();
        Row row = docVO.first();
        if (row != null) {
            docVO.setCurrentRow(row);
        }
    }

    public void preDocCategroupRel(String mode, Number docId) {
        CmsDocCategoryRelTVOImpl docCategoryRelVO = this.getCmsDocCategoryRelTVO();
        if ("CREATE".equals(mode)) {
            CmsDocCategoryRelTVORowImpl docCategoryRelNewRow =
                (CmsDocCategoryRelTVORowImpl)docCategoryRelVO.createRow();
            docCategoryRelNewRow.setDocId(docId);
            docCategoryRelNewRow.setCategoryGroupType("BY_CATEGORY");
            docCategoryRelNewRow.setCategoryId(new Number(-1));
            docCategoryRelVO.insertRow(docCategoryRelNewRow);
        } else {
            docCategoryRelVO.setbvDocId(docId);
            docCategoryRelVO.executeQuery();
            Row row = docCategoryRelVO.first();
            if (row != null) {
                docCategoryRelVO.setCurrentRow(row);
            }
        }
    }

    public void insertDocUcmRel(Number dID, String dDocTitle) {
        CmsDocUcmRelTVOImpl relVO = this.getCmsDocUcmRelTVO();
        CmsPhotographyFigureTVOImpl cmsPhotographyFigureTVO = this.getCmsPhotographyFigureTVO();
        CmsPhotographyFigureTVORowImpl figureRow =
            (CmsPhotographyFigureTVORowImpl)cmsPhotographyFigureTVO.getCurrentRow();
        CmsDocUcmRelTVORowImpl relRow = (CmsDocUcmRelTVORowImpl)relVO.createRow();
        relRow.setDocId(figureRow.getDocId());
        relRow.setUcmDid(dID);
        relRow.setUcmDocname(dDocTitle);
        relVO.insertRow(relRow);
    }

    public void updateDocInfo(Number docId, String thumbnailUrl) {
        CmsDocTVOImpl docVO = this.getCmsDocTVO();
        docVO.setbvDocId(docId);
        docVO.executeQuery();
        Row r = docVO.first();
        if (r != null) {
            CmsDocTVORowImpl row = (CmsDocTVORowImpl)r;
            row.setThumbnailUrl(thumbnailUrl);
        }
    }


    public void initPhotographyEditVO() {
        CmsPhotographyEditVOImpl vo = this.getCmsPhotographyEditVO();
        vo.executeQuery();
        Row row = vo.first();
        if (row != null) {
            vo.setCurrentRow(row);
        }
    }

    public void batchEditPhotography(String docIds) {
        //分解id
        //循环 查询id的组 然后找到该组下所有文件
        //批量修改
        CmsPhotographyFigureTVOImpl photographyVO = this.getCmsPhotographyFigureTVO();
        CmsPhotographyEditVOImpl editVO = this.getCmsPhotographyEditVO();
        CmsPhotographyEditVORowImpl editRow = (CmsPhotographyEditVORowImpl)editVO.getCurrentRow();
        String[] strArray = docIds.split(",");
        for (String id : strArray) {
            try {
                Number docId = new Number(id);
                CmsDocGroupRelTVOImpl relVO = this.getCmsDocGroupRelTVO();
                //通过id 找到组
                Row[] relRows = relVO.getFilteredRows("DocId", docId);
                if (relRows.length > 0) {
                    Number groupId = (Number)relRows[0].getAttribute("GroupId");
                    Row[] docGroupRelRows = relVO.getFilteredRows("GroupId", groupId);
                    //循环该组所有图片
                    for (Row r : docGroupRelRows) {
                        CmsDocGroupRelTVORowImpl docGroupRelRow = (CmsDocGroupRelTVORowImpl)r;
                        //                        Row[] rows = photographyVO.getFilteredRows("DocId", docGroupRelRow.getDocId());
                        photographyVO.setbvDocId(docGroupRelRow.getDocId());
                        photographyVO.executeQuery();
                        Row firstRow = photographyVO.first();
                        if (firstRow != null) {
                            CmsPhotographyFigureTVORowImpl photographyRow = (CmsPhotographyFigureTVORowImpl)firstRow;
                            for (String attr : editRow.getAttributeNames()) {
                                if (editRow.getAttribute(attr) != null) {
                                    if ("Keyword".equals(attr)) {
                                        String oldKeyword = photographyRow.getKeyword();
                                        String newKeyword = null;
                                        if (oldKeyword == null) {
                                            newKeyword = editRow.getAttribute(attr) + "";
                                        } else {
                                            newKeyword = oldKeyword + "," + editRow.getAttribute(attr);
                                        }
                                        photographyRow.setAttribute(attr, newKeyword);
                                    } else {
                                        photographyRow.setAttribute(attr, editRow.getAttribute(attr));
                                    }
                                }
                            }
                            photographyRow.setLastUpdatedBy(this.getCustomDBTransaction().getUserId());
                            photographyRow.setLastUpdateDate(new Date());
                            try {
                                if (editRow.getCategoryId() != null) {
                                    updateCategoryRel(editRow.getCategoryId(), new Number(id));
                                }
                            } catch (SQLException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                } else {
                    //单个的图片 不是组
                    //                    Row[] rows = photographyVO.getFilteredRows("DocId", docId);
                    photographyVO.setbvDocId(docId);
                    photographyVO.executeQuery();
                    Row firstRow = photographyVO.first();
                    if (firstRow != null) {
                        CmsPhotographyFigureTVORowImpl photographyRow = (CmsPhotographyFigureTVORowImpl)firstRow;
                        for (String attr : editRow.getAttributeNames()) {
                            if (editRow.getAttribute(attr) != null) {
                                if ("Keyword".equals(attr)) {
                                    String oldKeyword = photographyRow.getKeyword();
                                    String newKeyword = null;
                                    if (oldKeyword == null) {
                                        newKeyword = editRow.getAttribute(attr) + "";
                                    } else {
                                        newKeyword = oldKeyword + "," + editRow.getAttribute(attr);
                                    }
                                    photographyRow.setAttribute(attr, newKeyword);
                                } else {
                                    photographyRow.setAttribute(attr, editRow.getAttribute(attr));
                                }
                            }
                        }
                        photographyRow.setLastUpdatedBy(this.getCustomDBTransaction().getUserId());
                        photographyRow.setLastUpdateDate(new Date());
                        try {
                            if (editRow.getCategoryId() != null) {
                                updateCategoryRel(editRow.getCategoryId(), new Number(id));
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public void updateCategoryRel(Number categoryId, Number docId) {
        CmsDocCategoryRelTVOImpl docCategoryRelVO = this.getCmsDocCategoryRelTVO();
        docCategoryRelVO.setbvDocId(docId);
        docCategoryRelVO.executeQuery();
        Row row = docCategoryRelVO.first();
        if (row != null) {
            CmsDocCategoryRelTVORowImpl docCategoryRelNewRow = (CmsDocCategoryRelTVORowImpl)row;
            docCategoryRelNewRow.setCategoryId(categoryId);
        }
    }

    public void processExifInfo4PhotographyFigure(Number docId, Map<String, String> exifMap, String mode) {
        CmsFigureExifInfoTVOImpl exifInfoVO = this.getCmsFigureExifInfoTVO();
        if ("CREATE".equals(mode)) {
            CmsFigureExifInfoTVORowImpl exifInfoRow = (CmsFigureExifInfoTVORowImpl)exifInfoVO.createRow();
            exifInfoRow.setDocId(docId);
            for (String attrName : exifInfoRow.getAttributeNames()) {
                String[] whoAttribute =
                    new String[] { "InfoId", "DocId", "ObjectVersionNumber", "CreatedBy", "CreationDate",
                                   "LastUpdatedBy", "LastUpdateDate" };
                if (!attrName.contains("Attribute") && !ArrayUtils.contains(whoAttribute, attrName)) {
                    for (Iterator it = exifMap.keySet().iterator(); it.hasNext(); ) {
                        String key = (String)it.next();
                        String newKey = key.replace(" ", "").replace("-", "").replace("/", "");
                        if (newKey.equalsIgnoreCase(attrName)) {
                            exifInfoRow.setAttribute(attrName, exifMap.get(key));
                            break;
                        }
                    }
                }
            }
            exifInfoVO.insertRow(exifInfoRow);
        } else {
            Row[] rows = exifInfoVO.getFilteredRows("DocId", docId);
            if (rows.length > 0) {
                CmsFigureExifInfoTVORowImpl exifInfoRow = (CmsFigureExifInfoTVORowImpl)rows[0];
                for (String attrName : exifInfoRow.getAttributeNames()) {
                    String[] whoAttribute =
                        new String[] { "InfoId", "DocId", "ObjectVersionNumber", "CreatedBy", "CreationDate",
                                       "LastUpdatedBy", "LastUpdateDate" };
                    if (!attrName.contains("Attribute") && !ArrayUtils.contains(whoAttribute, attrName)) {
                        for (Iterator it = exifMap.keySet().iterator(); it.hasNext(); ) {
                            String key = (String)it.next();
                            String newKey = key.replace(" ", "").replace("-", "").replace("/", "");
                            if (newKey.equalsIgnoreCase(attrName)) {
                                exifInfoRow.setAttribute(attrName, exifMap.get(key));
                                break;
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * 初始化高级查询面板
     */
    public void initComplexSearch4Photography() {
        CmsPhotographyQVOImpl vo = this.getCmsPhotographyQVO();
        vo.executeQuery();
        vo.setCurrentRow(vo.first());
    }


    /**
     * Container's getter for CmsDocCategoryRelTVO.
     * @return CmsDocCategoryRelTVO
     */
    public CmsDocCategoryRelTVOImpl getCmsDocCategoryRelTVO() {
        return (CmsDocCategoryRelTVOImpl)findViewObject("CmsDocCategoryRelTVO");
    }

    /**
     * Container's getter for CmsDocTVO.
     * @return CmsDocTVO
     */
    public CmsDocTVOImpl getCmsDocTVO() {
        return (CmsDocTVOImpl)findViewObject("CmsDocTVO");
    }

    /**
     * Container's getter for CmsPhotographyFigureTVO.
     * @return CmsPhotographyFigureTVO
     */
    public CmsPhotographyFigureTVOImpl getCmsPhotographyFigureTVO() {
        return (CmsPhotographyFigureTVOImpl)findViewObject("CmsPhotographyFigureTVO");
    }

    /**
     * Container's getter for CmsPhotographyFigureVO.
     * @return CmsPhotographyFigureVO
     */
    public CmsPhotographyFigureVOImpl getCmsPhotographyFigureVO() {
        return (CmsPhotographyFigureVOImpl)findViewObject("CmsPhotographyFigureVO");
    }

    /**
     * Container's getter for CmsDocUcmRelTVO.
     * @return CmsDocUcmRelTVO
     */
    public CmsDocUcmRelTVOImpl getCmsDocUcmRelTVO() {
        return (CmsDocUcmRelTVOImpl)findViewObject("CmsDocUcmRelTVO");
    }

    /**
     * Container's getter for CmsDocGroupRelTVO.
     * @return CmsDocGroupRelTVO
     */
    public CmsDocGroupRelTVOImpl getCmsDocGroupRelTVO() {
        return (CmsDocGroupRelTVOImpl)findViewObject("CmsDocGroupRelTVO");
    }

    /**
     * Container's getter for CmsPhotographyEditVO.
     * @return CmsPhotographyEditVO
     */
    public CmsPhotographyEditVOImpl getCmsPhotographyEditVO() {
        return (CmsPhotographyEditVOImpl)findViewObject("CmsPhotographyEditVO");
    }

    /**
     * Container's getter for CmsDocTVO4View.
     * @return CmsDocTVO4View
     */
    public CmsDocTVOImpl getCmsDocTVO4View() {
        return (CmsDocTVOImpl)findViewObject("CmsDocTVO4View");
    }

    /**
     * Container's getter for CmsPhotographyFigureTVO4View.
     * @return CmsPhotographyFigureTVO4View
     */
    public CmsPhotographyFigureTVOImpl getCmsPhotographyFigureTVO4View() {
        return (CmsPhotographyFigureTVOImpl)findViewObject("CmsPhotographyFigureTVO4View");
    }

    /**
     * Container's getter for CmsDoc2PhotographyVL.
     * @return CmsDoc2PhotographyVL
     */
    public ViewLinkImpl getCmsDoc2PhotographyVL() {
        return (ViewLinkImpl)findViewLink("CmsDoc2PhotographyVL");
    }

    /**
     * Container's getter for CmsDocRelTVO4View.
     * @return CmsDocRelTVO4View
     */
    public CmsDocRelTVOImpl getCmsDocRelTVO4View() {
        return (CmsDocRelTVOImpl)findViewObject("CmsDocRelTVO4View");
    }

    /**
     * Container's getter for CmsDoc2DocRelVL.
     * @return CmsDoc2DocRelVL
     */
    public ViewLinkImpl getCmsDoc2DocRelVL() {
        return (ViewLinkImpl)findViewLink("CmsDoc2DocRelVL");
    }

    /**
     * Container's getter for CmsFigureExifInfoTVO.
     * @return CmsFigureExifInfoTVO
     */
    public CmsFigureExifInfoTVOImpl getCmsFigureExifInfoTVO() {
        return (CmsFigureExifInfoTVOImpl)findViewObject("CmsFigureExifInfoTVO");
    }

    /**
     * Container's getter for CmsFigureExifInfoTVO4View.
     * @return CmsFigureExifInfoTVO4View
     */
    public CmsFigureExifInfoTVOImpl getCmsFigureExifInfoTVO4View() {
        return (CmsFigureExifInfoTVOImpl)findViewObject("CmsFigureExifInfoTVO4View");
    }

    /**
     * Container's getter for CmsDoc2ExifVL.
     * @return CmsDoc2ExifVL
     */
    public ViewLinkImpl getCmsDoc2ExifVL() {
        return (ViewLinkImpl)findViewLink("CmsDoc2ExifVL");
    }

    /**
     * Container's getter for CmsDocUcmRelTVO4FileList.
     * @return CmsDocUcmRelTVO4FileList
     */
    public CmsDocUcmRelTVOImpl getCmsDocUcmRelTVO4FileList() {
        return (CmsDocUcmRelTVOImpl)findViewObject("CmsDocUcmRelTVO4FileList");
    }

    /**
     * Container's getter for CmsPhotographyQueryVO1.
     * @return CmsPhotographyQueryVO1
     */
    public CmsPhotographyQueryVOImpl getCmsPhotographyQueryVO() {
        return (CmsPhotographyQueryVOImpl)findViewObject("CmsPhotographyQueryVO");
    }

    /**
     * Container's getter for CmsPhotographyQVO.
     * @return CmsPhotographyQVO
     */
    public CmsPhotographyQVOImpl getCmsPhotographyQVO() {
        return (CmsPhotographyQVOImpl)findViewObject("CmsPhotographyQVO");
    }
}
