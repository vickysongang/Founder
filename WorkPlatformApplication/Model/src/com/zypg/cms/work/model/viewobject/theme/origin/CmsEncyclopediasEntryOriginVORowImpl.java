package com.zypg.cms.work.model.viewobject.theme.origin;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.Hashtable;
import java.util.List;

import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Aug 09 22:33:13 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CmsEncyclopediasEntryOriginVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        EntryId {
            public Object get(CmsEncyclopediasEntryOriginVORowImpl obj) {
                return obj.getEntryId();
            }

            public void put(CmsEncyclopediasEntryOriginVORowImpl obj, Object value) {
                obj.setEntryId((Number)value);
            }
        }
        ,
        DocId {
            public Object get(CmsEncyclopediasEntryOriginVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(CmsEncyclopediasEntryOriginVORowImpl obj, Object value) {
                obj.setDocId((Number)value);
            }
        }
        ,
        EntryHeader {
            public Object get(CmsEncyclopediasEntryOriginVORowImpl obj) {
                return obj.getEntryHeader();
            }

            public void put(CmsEncyclopediasEntryOriginVORowImpl obj, Object value) {
                obj.setEntryHeader((String)value);
            }
        }
        ,
        Source {
            public Object get(CmsEncyclopediasEntryOriginVORowImpl obj) {
                return obj.getSource();
            }

            public void put(CmsEncyclopediasEntryOriginVORowImpl obj, Object value) {
                obj.setSource((String)value);
            }
        }
        ,
        KnowledgePoint {
            public Object get(CmsEncyclopediasEntryOriginVORowImpl obj) {
                return obj.getKnowledgePoint();
            }

            public void put(CmsEncyclopediasEntryOriginVORowImpl obj, Object value) {
                obj.setKnowledgePoint((String)value);
            }
        }
        ,
        Keyword {
            public Object get(CmsEncyclopediasEntryOriginVORowImpl obj) {
                return obj.getKeyword();
            }

            public void put(CmsEncyclopediasEntryOriginVORowImpl obj, Object value) {
                obj.setKeyword((String)value);
            }
        }
        ,
        StoreTime {
            public Object get(CmsEncyclopediasEntryOriginVORowImpl obj) {
                return obj.getStoreTime();
            }

            public void put(CmsEncyclopediasEntryOriginVORowImpl obj, Object value) {
                obj.setStoreTime((Date)value);
            }
        }
        ,
        Checked {
            public Object get(CmsEncyclopediasEntryOriginVORowImpl obj) {
                return obj.getChecked();
            }

            public void put(CmsEncyclopediasEntryOriginVORowImpl obj, Object value) {
                obj.setChecked((Boolean)value);
            }
        }
        ,
        CategoryId {
            public Object get(CmsEncyclopediasEntryOriginVORowImpl obj) {
                return obj.getCategoryId();
            }

            public void put(CmsEncyclopediasEntryOriginVORowImpl obj, Object value) {
                obj.setCategoryId((Number)value);
            }
        }
        ,
        CategoryName {
            public Object get(CmsEncyclopediasEntryOriginVORowImpl obj) {
                return obj.getCategoryName();
            }

            public void put(CmsEncyclopediasEntryOriginVORowImpl obj, Object value) {
                obj.setCategoryName((String)value);
            }
        }
        ,
        Status {
            public Object get(CmsEncyclopediasEntryOriginVORowImpl obj) {
                return obj.getStatus();
            }

            public void put(CmsEncyclopediasEntryOriginVORowImpl obj, Object value) {
                obj.setStatus((String)value);
            }
        }
        ,
        CompCode {
            public Object get(CmsEncyclopediasEntryOriginVORowImpl obj) {
                return obj.getCompCode();
            }

            public void put(CmsEncyclopediasEntryOriginVORowImpl obj, Object value) {
                obj.setCompCode((String)value);
            }
        }
        ,
        CompName {
            public Object get(CmsEncyclopediasEntryOriginVORowImpl obj) {
                return obj.getCompName();
            }

            public void put(CmsEncyclopediasEntryOriginVORowImpl obj, Object value) {
                obj.setCompName((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CmsEncyclopediasEntryOriginVORowImpl object);

        public abstract void put(CmsEncyclopediasEntryOriginVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ENTRYID = AttributesEnum.EntryId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int ENTRYHEADER = AttributesEnum.EntryHeader.index();
    public static final int SOURCE = AttributesEnum.Source.index();
    public static final int KNOWLEDGEPOINT = AttributesEnum.KnowledgePoint.index();
    public static final int KEYWORD = AttributesEnum.Keyword.index();
    public static final int STORETIME = AttributesEnum.StoreTime.index();
    public static final int CHECKED = AttributesEnum.Checked.index();
    public static final int CATEGORYID = AttributesEnum.CategoryId.index();
    public static final int CATEGORYNAME = AttributesEnum.CategoryName.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int COMPCODE = AttributesEnum.CompCode.index();
    public static final int COMPNAME = AttributesEnum.CompName.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CmsEncyclopediasEntryOriginVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute EntryId.
     * @return the EntryId
     */
    public Number getEntryId() {
        return (Number)getAttributeInternal(ENTRYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EntryId.
     * @param value value to set the  EntryId
     */
    public void setEntryId(Number value) {
        setAttributeInternal(ENTRYID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public Number getDocId() {
        return (Number)getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DocId.
     * @param value value to set the  DocId
     */
    public void setDocId(Number value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EntryHeader.
     * @return the EntryHeader
     */
    public String getEntryHeader() {
        return (String)getAttributeInternal(ENTRYHEADER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EntryHeader.
     * @param value value to set the  EntryHeader
     */
    public void setEntryHeader(String value) {
        setAttributeInternal(ENTRYHEADER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Source.
     * @return the Source
     */
    public String getSource() {
        return (String)getAttributeInternal(SOURCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Source.
     * @param value value to set the  Source
     */
    public void setSource(String value) {
        setAttributeInternal(SOURCE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute KnowledgePoint.
     * @return the KnowledgePoint
     */
    public String getKnowledgePoint() {
        return (String)getAttributeInternal(KNOWLEDGEPOINT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute KnowledgePoint.
     * @param value value to set the  KnowledgePoint
     */
    public void setKnowledgePoint(String value) {
        setAttributeInternal(KNOWLEDGEPOINT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Keyword.
     * @return the Keyword
     */
    public String getKeyword() {
        return (String)getAttributeInternal(KEYWORD);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Keyword.
     * @param value value to set the  Keyword
     */
    public void setKeyword(String value) {
        setAttributeInternal(KEYWORD, value);
    }

    /**
     * Gets the attribute value for the calculated attribute StoreTime.
     * @return the StoreTime
     */
    public Date getStoreTime() {
        return (Date)getAttributeInternal(STORETIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute StoreTime.
     * @param value value to set the  StoreTime
     */
    public void setStoreTime(Date value) {
        setAttributeInternal(STORETIME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Checked.
     * @return the Checked
     */
    public Boolean getChecked() {
        Boolean result = null;
        Hashtable map = this.getDBTransaction().getSession().getUserData();
        String prefix = "ORIGIN";
        String selectAllFlag = (String)map.get(prefix + "_selectAllFlag");
        String key = prefix + "_" + this.getDocId();
        List<String> currSelectedList = (List<String>)map.get(prefix + "_currSelected");
        if ("O".equals(selectAllFlag)) {
            if (currSelectedList.contains(key)) {
                result = true;
            } else {
                result = false;
            }
        } else {
            if ("Y".equals(selectAllFlag)) {
                result = true;
            } else if ("N".equals(selectAllFlag)) {
                result = false;
            }
        }
        try {
            this.setChecked(result);
        } catch (Exception e) {
            //            e.printStackTrace();
        }
        return (Boolean)getAttributeInternal(CHECKED);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Checked.
     * @param value value to set the  Checked
     */
    public void setChecked(Boolean value) {
        setAttributeInternal(CHECKED, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CategoryId.
     * @return the CategoryId
     */
    public Number getCategoryId() {
        return (Number)getAttributeInternal(CATEGORYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CategoryId.
     * @param value value to set the  CategoryId
     */
    public void setCategoryId(Number value) {
        setAttributeInternal(CATEGORYID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CategoryName.
     * @return the CategoryName
     */
    public String getCategoryName() {
        return (String)getAttributeInternal(CATEGORYNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CategoryName.
     * @param value value to set the  CategoryName
     */
    public void setCategoryName(String value) {
        setAttributeInternal(CATEGORYNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Status.
     * @return the Status
     */
    public String getStatus() {
        return (String)getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Status.
     * @param value value to set the  Status
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CompCode.
     * @return the CompCode
     */
    public String getCompCode() {
        return (String) getAttributeInternal(COMPCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CompCode.
     * @param value value to set the  CompCode
     */
    public void setCompCode(String value) {
        setAttributeInternal(COMPCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CompName.
     * @return the CompName
     */
    public String getCompName() {
        return (String) getAttributeInternal(COMPNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CompName.
     * @param value value to set the  CompName
     */
    public void setCompName(String value) {
        setAttributeInternal(COMPNAME, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
