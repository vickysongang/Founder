package com.zypg.cms.work.model.am;


import com.honythink.applicationframework.hadf.CustomApplicationModuleImpl;

import com.zypg.cms.work.model.viewobject.attach.query.CmsAttachVOImpl;
import com.zypg.cms.work.model.viewobject.book.CmsBookTVOImpl;
import com.zypg.cms.work.model.viewobject.book.CmsBookTVORowImpl;
import com.zypg.cms.work.model.viewobject.book.query.CmsBookValidateVOImpl;
import com.zypg.cms.work.model.viewobject.book.query.CmsBookValidateVORowImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocCategoryRelTVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocCategoryRelTVORowImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocTVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocTVORowImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocUcmRelTVOImpl;
import com.zypg.cms.work.model.viewobject.common.lov.CmsLookupValueVOImpl;
import com.zypg.cms.work.model.viewobject.common.lov.CmsLookupValueVORowImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsCategory4AuthorCopyrightVOImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsCategory4DetailVOImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsCategoryQueryVOImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsCategoryQueryVORowImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsDocStatus4AuthorCopyrightVOImpl;
import com.zypg.cms.work.model.viewobject.copyright.Cms3rdAuthorizationItemTVOImpl;
import com.zypg.cms.work.model.viewobject.copyright.Cms3rdAuthorizationItemTVORowImpl;
import com.zypg.cms.work.model.viewobject.copyright.Cms3rdAuthorizationItemsTVOImpl;
import com.zypg.cms.work.model.viewobject.copyright.Cms3rdAuthorizationItemsTVORowImpl;
import com.zypg.cms.work.model.viewobject.copyright.Cms3rdAuthorizationOrderTVOImpl;
import com.zypg.cms.work.model.viewobject.copyright.Cms3rdAuthorizationOrderTVORowImpl;
import com.zypg.cms.work.model.viewobject.copyright.CmsAuthorCopyrightTVOImpl;
import com.zypg.cms.work.model.viewobject.copyright.CmsAuthorCopyrightTVORowImpl;
import com.zypg.cms.work.model.viewobject.copyright.CmsBookEdit4CopyrightVOImpl;
import com.zypg.cms.work.model.viewobject.copyright.CmsBookEdit4CopyrightVORowImpl;
import com.zypg.cms.work.model.viewobject.copyright.CmsCompanyCopyrightTVOImpl;
import com.zypg.cms.work.model.viewobject.copyright.CmsCompanyCopyrightTVORowImpl;
import com.zypg.cms.work.model.viewobject.copyright.lov.CmsCompanyVOImpl;
import com.zypg.cms.work.model.viewobject.copyright.query.Cms3rdAuthorizationItemVOImpl;
import com.zypg.cms.work.model.viewobject.copyright.query.Cms3rdAuthorizationItemVORowImpl;
import com.zypg.cms.work.model.viewobject.copyright.query.Cms3rdAuthorizationItemsVOImpl;
import com.zypg.cms.work.model.viewobject.copyright.query.Cms3rdAuthorizationOrderVOImpl;
import com.zypg.cms.work.model.viewobject.copyright.query.Cms3rdAuthorizationOrderVORowImpl;
import com.zypg.cms.work.model.viewobject.copyright.query.CmsAuthorCopyrightVOImpl;
import com.zypg.cms.work.model.viewobject.copyright.query.CmsCompanyCopyrightVOImpl;
import com.zypg.cms.work.model.viewobject.copyright.query.CmsCompanyCopyrightVORowImpl;

import java.sql.SQLException;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.commons.lang.ArrayUtils;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 27 14:00:07 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CopyrightAMImpl extends CustomApplicationModuleImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public CopyrightAMImpl() {
    }

    public void findCategory4AuthorCopyright(String compCode, String libCode) {
        CmsCategory4AuthorCopyrightVOImpl categoryVO = this.getCmsCategory4AuthorCopyrightVO();
        categoryVO.setbvCompCode(compCode);
        categoryVO.setbvLibCode(libCode);
        categoryVO.setbvLibTypeCode("COPYRIGHT_LIB");
        categoryVO.executeQuery();
        categoryVO.setRangeSize(-1);
        for (Row row : categoryVO.getAllRowsInRange()) {
            System.out.println(row.getAttribute("CategoryDisplayName"));
        }
    }

    public void findCategory4Detail(String compCode, String libCode) {
        System.out.println("libCode:" + libCode);
        CmsCategory4DetailVOImpl categoryVO = this.getCmsCategory4DetailVO();
        categoryVO.setbvCompCode(compCode);
        categoryVO.setbvLibCode(libCode);
        categoryVO.setbvLibTypeCode("COPYRIGHT_LIB");
        categoryVO.executeQuery();
    }

    public void preEditCompany(String mode, Number companyId, String compCode) {
        CmsCompanyCopyrightTVOImpl companyVO = this.getCmsCompanyCopyrightTVO();
        if ("CREATE".equals(mode)) {
            CmsCompanyCopyrightTVORowImpl row = (CmsCompanyCopyrightTVORowImpl)companyVO.createRow();
            row.setCompCode(compCode);
            companyVO.insertRow(row);
        } else {
            Row[] rows = companyVO.getFilteredRows("CompanyId", companyId);
            if (rows.length > 0) {
                rows[0].setAttribute("LastUpdateDate", new Date());
                companyVO.setCurrentRow(rows[0]);
            }
        }
    }

    public void initItem4View(Number itemId) {
        Cms3rdAuthorizationItemVOImpl itemVo = this.getCms3rdAuthorizationItemVO4View();
        itemVo.setbvItemId(itemId);
        itemVo.executeQuery();
        Row row = itemVo.first();
        if (row != null) {
            itemVo.setCurrentRow(row);
        }
    }

    public void initOrder4View(Number docId) {
        Cms3rdAuthorizationOrderVOImpl orderVO = this.getCms3rdAuthorizationOrderVO4View();
        orderVO.setbvDocId(docId);
        orderVO.executeQuery();
        Row row = orderVO.first();
        if (row != null) {
            orderVO.setCurrentRow(row);
        }
    }

    public void initAuthor4View(Number docId) {
        CmsAuthorCopyrightVOImpl authorVO = this.getCmsAuthorCopyrightVO4View();
        authorVO.setbvDocId(docId);
        authorVO.executeQuery();
        Row row = authorVO.first();
        if (row != null) {
            authorVO.setCurrentRow(row);
        }
    }

    public void initBookEdit4Copyright() {
        CmsBookEdit4CopyrightVOImpl bookEidtVO = this.getCmsBookEdit4CopyrightVO();
        bookEidtVO.executeQuery();
        Row row = bookEidtVO.first();
        if (row != null) {
            bookEidtVO.setCurrentRow(row);
        }
    }

    public CmsAuthorCopyrightTVORowImpl preEditAuthor(String mode, Number docId, String compCode) {
        this.getDBTransaction().getSession().getUserData().put("compCode", compCode);
        CmsAuthorCopyrightTVOImpl tvo = this.getCmsAuthorCopyrightTVO();
        this.initBookEdit4Copyright();
        if ("CREATE".equals(mode)) {
            CmsDocTVOImpl docVO = this.getCmsDocTVO();
            CmsDocTVORowImpl docNewRow = (CmsDocTVORowImpl)docVO.createRow();
            docNewRow.setStatus("TO_INDEX_AUTHOR");
            docNewRow.setLibCode("AUTHOR");
            docNewRow.setLibTypeCode("COPYRIGHT_LIB");
            docNewRow.setCompCode(compCode);
            docVO.insertRow(docNewRow);
            CmsAuthorCopyrightTVORowImpl newRow = (CmsAuthorCopyrightTVORowImpl)tvo.createRow();
            newRow.setDocId(docNewRow.getDocId());
            newRow.setCopyrightForm("AUTHOR");
            newRow.setPartProbationFlag("WU");
            newRow.setExclusiveCopyrightFlag("WU");
            newRow.setPublicCopyrightFlag("WU");
            newRow.setPaperMediumCopyrightFlag("WU");
            newRow.setElectronicCopyrightFlag("WU");
            newRow.setAudioVideoCopyrightFlag("WU");
            newRow.setOverseasCopyrightFlag("WU");
            newRow.setNetworkCopyrightFlag("WU");
            newRow.setBroadcastCopyrightFlag("WU");
            newRow.setAttribute1("WU");
            newRow.setAttribute2("WU");
            tvo.insertRow(newRow);
            tvo.setCurrentRow(newRow);
            preDocCategroupRel(docNewRow.getDocId(), new Number(-1));
            return newRow;
        } else {
            tvo.setbvDocId(docId);
            tvo.executeQuery();
            Row firstRow = tvo.first();
            if (firstRow != null) {
                firstRow.setAttribute("LastUpdateDate", new Date());
                tvo.setCurrentRow(firstRow);
                CmsAuthorCopyrightTVORowImpl row = (CmsAuthorCopyrightTVORowImpl)firstRow;
                Number bookDocId = row.getBookDocId();
                CmsBookTVOImpl bookVO = this.getCmsBookTVO();
                bookVO.setbvDocId(bookDocId);
                bookVO.executeQuery();
                Row bookFirstRow = bookVO.first();
                if (bookFirstRow != null) {
                    CmsBookEdit4CopyrightVOImpl bookEditVO = this.getCmsBookEdit4CopyrightVO();
                    CmsBookEdit4CopyrightVORowImpl bookEditRow =
                        (CmsBookEdit4CopyrightVORowImpl)bookEditVO.getCurrentRow();
                    CmsBookTVORowImpl bookRow = (CmsBookTVORowImpl)bookFirstRow;
                    String[] bookAttrNames = bookRow.getAttributeNames();
                    for (String attrName : bookEditRow.getAttributeNames()) {
                        if (ArrayUtils.contains(bookAttrNames, attrName)) {
                            Object attrValue = bookRow.getAttribute(attrName);
                            bookEditRow.setAttribute(attrName, attrValue);
                        }
                    }
                    bookEditRow.setCompCode(compCode);
                }
                return row;
            }
        }
        return null;
    }

    public void createBookWhenCreateAuthorCopyright(String compCode) {
        CmsDocTVOImpl docVO = this.getCmsDocTVO();
        CmsBookTVOImpl bookVO = this.getCmsBookTVO();
        CmsDocTVORowImpl docNewRow = (CmsDocTVORowImpl)docVO.createRow();
        docNewRow.setStatus("TO_GATHER_BOOK");
        docNewRow.setLibCode("BOOK");
        docNewRow.setLibTypeCode("END_PROD_LIB");
        docNewRow.setCompCode(compCode);
        docVO.insertRow(docNewRow);
        CmsBookTVORowImpl bookNewRow = (CmsBookTVORowImpl)bookVO.createRow();

        CmsBookEdit4CopyrightVOImpl bookEditVO = this.getCmsBookEdit4CopyrightVO();
        CmsBookEdit4CopyrightVORowImpl bookEditRow = (CmsBookEdit4CopyrightVORowImpl)bookEditVO.getCurrentRow();
        String[] bookAttrNames = bookNewRow.getAttributeNames();
        for (String attrName : bookEditRow.getAttributeNames()) {
            Object attrValue = bookEditRow.getAttribute(attrName);
            if (ArrayUtils.contains(bookAttrNames, attrName)) {
                bookNewRow.setAttribute(attrName, attrValue);
            }
        }
        bookNewRow.setDocId(docNewRow.getDocId());
        bookVO.insertRow(bookNewRow);
        preDocCategroupRel("CREATE", docNewRow.getDocId(),
                           bookEditRow.getCategoryId() == null ? new Number(-1) : bookEditRow.getCategoryId());

        CmsAuthorCopyrightTVOImpl authorCopyrightVO = this.getCmsAuthorCopyrightTVO();
        CmsAuthorCopyrightTVORowImpl authorCopyrightRow =
            (CmsAuthorCopyrightTVORowImpl)authorCopyrightVO.getCurrentRow();
        if (authorCopyrightRow != null) {
            authorCopyrightRow.setBookDocId(bookNewRow.getDocId());
        }
    }

    public void updateBookWhenCreateAuthorCopyright() {
        CmsAuthorCopyrightTVORowImpl authorCopyrightRow =
            (CmsAuthorCopyrightTVORowImpl)this.getCmsAuthorCopyrightTVO().getCurrentRow();
        CmsBookEdit4CopyrightVOImpl bookEditVO = this.getCmsBookEdit4CopyrightVO();
        CmsBookEdit4CopyrightVORowImpl bookEditRow = (CmsBookEdit4CopyrightVORowImpl)bookEditVO.getCurrentRow();
        authorCopyrightRow.setBookDocId(bookEditRow.getDocId());

        CmsBookTVOImpl bookVO = this.getCmsBookTVO();
        bookVO.setbvDocId(bookEditRow.getDocId());
        bookVO.executeQuery();
        Row row = bookVO.first();
        if (row != null) {
            CmsBookTVORowImpl bookRow = (CmsBookTVORowImpl)row;
            String[] bookAttrNames = bookRow.getAttributeNames();
            for (String attrName : bookEditRow.getAttributeNames()) {
                Object attrValue = bookEditRow.getAttribute(attrName);
                if (ArrayUtils.contains(bookAttrNames, attrName)) {
                    Object bookAttrValue = bookRow.getAttribute(attrName);
                    if (attrValue != null && !attrValue.equals(bookAttrValue)) {
                        bookRow.setAttribute(attrName, attrValue);
                    }
                }
            }
            preDocCategroupRel("EDIT", bookRow.getDocId(),
                               bookEditRow.getCategoryId() == null ? new Number(-1) : bookEditRow.getCategoryId());
        }
    }


    public Cms3rdAuthorizationOrderTVORowImpl preEditOrder(String mode, Number docId, String compCode) {
        Cms3rdAuthorizationOrderTVOImpl tvo = this.getCms3rdAuthorizationOrderTVO();
        if ("CREATE".equals(mode)) {
            CmsDocTVOImpl docVO = this.getCmsDocTVO();
            CmsDocTVORowImpl docNewRow = (CmsDocTVORowImpl)docVO.createRow();
            docNewRow.setStatus("TO_INDEX_THIRD");
            docNewRow.setLibCode("THIRD");
            docNewRow.setLibTypeCode("COPYRIGHT_LIB");
            docNewRow.setCompCode(compCode);
            docVO.insertRow(docNewRow);
            Cms3rdAuthorizationOrderTVORowImpl newRow = (Cms3rdAuthorizationOrderTVORowImpl)tvo.createRow();
            CmsCompanyVOImpl companyVO = (CmsCompanyVOImpl)newRow.findOrCreateVO("Lookup4Company");
            companyVO.setbvCompCode(compCode);
            companyVO.executeQuery();
            newRow.setDocId(docNewRow.getDocId());
            tvo.insertRow(newRow);
            preDocCategroupRel(docNewRow.getDocId(), new Number(-1));
        } else {
            tvo.setbvDocId(docId);
            tvo.executeQuery();
            Row r = tvo.first();
            if (r != null) {
                r.setAttribute("LastUpdateDate", new Date());
                tvo.setCurrentRow(r);
                Cms3rdAuthorizationOrderTVORowImpl row = (Cms3rdAuthorizationOrderTVORowImpl)r;
                CmsCompanyVOImpl companyVO = (CmsCompanyVOImpl)row.findOrCreateVO("Lookup4Company");
                companyVO.setbvCompCode(compCode);
                companyVO.executeQuery();
                return row;
            }
        }
        return null;
    }

    public void preDocCategroupRel(Number docId, Number categoryId) {
        CmsDocCategoryRelTVOImpl docCategoryRelVO = this.getCmsDocCategoryRelTVO();
        docCategoryRelVO.setApplyViewCriteriaName("findByDocAndCategoryIdVC");
        docCategoryRelVO.setbvDocId(docId);
        docCategoryRelVO.setbvCategoryId(categoryId);
        docCategoryRelVO.executeQuery();
        docCategoryRelVO.setRangeSize(-1);
        //        Row[] rows =
        //            docCategoryRelVO.getFilteredRows(new RowQualifier("DocId=" + docId + " and CategoryId = " + categoryId));
        if (docCategoryRelVO.getEstimatedRowCount() == 0) {
            CmsDocCategoryRelTVORowImpl docCategoryRelNewRow =
                (CmsDocCategoryRelTVORowImpl)docCategoryRelVO.createRow();
            docCategoryRelNewRow.setDocId(docId);
            docCategoryRelNewRow.setCategoryGroupType("BY_CATEGORY");
            docCategoryRelNewRow.setCategoryId(categoryId);
            docCategoryRelVO.insertRow(docCategoryRelNewRow);
        }
    }

    public void updateCategroupRel(Number docId, Number categoryId) {
        CmsDocCategoryRelTVOImpl docCategoryRelVO = this.getCmsDocCategoryRelTVO();
        //存在未分类则将未分类修改为具体分类
        docCategoryRelVO.setApplyViewCriteriaName("findByDocAndCategoryIdVC");
        docCategoryRelVO.setbvDocId(docId);
        docCategoryRelVO.setbvCategoryId(categoryId);
        docCategoryRelVO.executeQuery();
        docCategoryRelVO.setRangeSize(-1);

        //        Row[] rows =
        //            docCategoryRelVO.getFilteredRows(new RowQualifier("DocId=" + docId + " and CategoryId = " + new Number(-1)));
        if (docCategoryRelVO.getEstimatedRowCount() > 0) {
            CmsDocCategoryRelTVORowImpl docCategoryRelNewRow = (CmsDocCategoryRelTVORowImpl)docCategoryRelVO.first();
            docCategoryRelNewRow.setCategoryId(categoryId);
        } else {
            preDocCategroupRel(docId, categoryId);
        }
    }

    public Number getCategoryIdByAttribute1(String attribute1) {
        Number categoryId = null;
        CmsCategoryQueryVOImpl categoryVO = this.getCmsCategoryQueryVO();
        Row[] rows = categoryVO.getFilteredRows("Attribute1", attribute1);
        if (rows.length > 0) {
            CmsCategoryQueryVORowImpl categoryRow = (CmsCategoryQueryVORowImpl)rows[0];
            return categoryRow.getCategoryId();
        }
        return categoryId;
    }

    public void deleteDocCategroupRel(Number docId, Number categoryId) {
        CmsDocCategoryRelTVOImpl docCategoryRelVO = this.getCmsDocCategoryRelTVO();
        docCategoryRelVO.setApplyViewCriteriaName("findByDocAndCategoryIdVC");
        docCategoryRelVO.setbvDocId(docId);
        docCategoryRelVO.setbvCategoryId(categoryId);
        docCategoryRelVO.executeQuery();
        docCategoryRelVO.setRangeSize(-1);
        //        Row[] rows =
        //            docCategoryRelVO.getFilteredRows(new RowQualifier("DocId=" + docId + " and CategoryId = " + categoryId));
        if (docCategoryRelVO.getEstimatedRowCount() > 0) {
            docCategoryRelVO.first().remove();
        }
        docCategoryRelVO.setApplyViewCriteriaName("findByDocIdVC");
        //        Row[] rows1 = docCategoryRelVO.getFilteredRows(new RowQualifier("DocId=" + docId));
        if (docCategoryRelVO.getEstimatedRowCount() == 0) {
            preDocCategroupRel(docId, new Number(-1));
        }
    }


    public Cms3rdAuthorizationOrderVORowImpl init4CopyrightAuthor(Number orderDocId, Date date) {
        Cms3rdAuthorizationOrderVOImpl orderVo = this.getCms3rdAuthorizationOrderVO();
        Row[] rows = orderVo.getFilteredRows("DocId", orderDocId);
        if (rows.length > 0) {
            Cms3rdAuthorizationOrderVORowImpl row = (Cms3rdAuthorizationOrderVORowImpl)rows[0];
            CmsAuthorCopyrightVOImpl queryVO = this.getCmsAuthorCopyrightVO4Query();
            queryVO.setWhereClause(null);
            StringBuffer areaSb = new StringBuffer();
            StringBuffer langSb = new StringBuffer();
            String clause2 = "";
            if (null != row.getAuthorizedLang() && null != row.getAuthorizedArea()) {
                String[] langs = row.getAuthorizedLang().split(",");
                for (String lang : langs) {
                    langSb.append("," + "'" + lang + "'");
                }
                String[] areas = row.getAuthorizedArea().split(",");
                for (String area : areas) {
                    areaSb.append("," + "'" + area + "'");
                }
                clause2 =
                        " AND Authorized_Area in (" + areaSb.substring(1) + ")" + " AND Authorized_Lang in (" + langSb.substring(1) +
                        ")";
            } else {
                clause2 = "";
            }

            String sql = null;
            String clause1 =
                "Doc_Id not in(select author_doc_id from cms_3rd_authorization_item_t where order_doc_id =" +
                orderDocId + ")";

            String cluase3 = "public_copyright_flag = 'YOU' or copyright_form = 'INDEPENDENT'";
            String dateStr = "to_date('" + date + "','yyyy-MM-dd')";
            if ("MEDIA".equals(row.getAuthorizedType())) {
                sql =
clause1 + " AND ((AUDIO_VIDEO_COPYRIGHT_FLAG = 'YOU' AND AUDIO_VIDEO_END_TIME >" + dateStr + clause2 + ") or " +
  cluase3 + ")";
            }
            if ("NETWORK".equals(row.getAuthorizedType())) {
                sql =
clause1 + " AND ((NETWORK_COPYRIGHT_FLAG = 'YOU' AND NETWORK_END_TIME >" + dateStr + clause2 + ") or " + cluase3 + ")";
            }
            if ("ELEC".equals(row.getAuthorizedType())) {
                sql =
clause1 + " AND ((ELECTRONIC_COPYRIGHT_FLAG = 'YOU' AND ELECTRONIC_END_TIME >" + dateStr + clause2 + ") or " +
  cluase3 + ")";
            }
            if ("PAPER".equals(row.getAuthorizedType())) {
                sql =
clause1 + " AND ((PAPER_MEDIUM_COPYRIGHT_FLAG = 'YOU' AND PAPER_MEDIUM_END_TIME >" + dateStr + clause2 + ") or " +
  cluase3 + ")";
            }
            if ("BROADCAST".equals(row.getAuthorizedType())) {
                sql =
clause1 + " AND ((BROADCAST_COPYRIGHT_FLAG = 'YOU' AND BROADCAST_END_TIME >" + dateStr + clause2 + ") or " + cluase3 +
  ")";
            }
            queryVO.addWhereClause(sql);
            queryVO.executeQuery();
            queryVO.setWhereClause(null);
            return row;
        }
        return null;
    }

    public void deleteOrderItems(Number itemId) {
        Cms3rdAuthorizationItemTVOImpl relVO = this.getCms3rdAuthorizationItemTVO();
        Row[] rows = relVO.getFilteredRows(new RowQualifier("ItemId=" + itemId));
        if (rows.length > 0) {
            rows[0].remove();
        }
    }

    public void exclusiveSet(Number itemId) {
        Cms3rdAuthorizationItemTVOImpl relVO = this.getCms3rdAuthorizationItemTVO();
        Row[] rows = relVO.getFilteredRows(new RowQualifier("ItemId=" + itemId));
        if (rows.length > 0) {
            Cms3rdAuthorizationItemTVORowImpl row = (Cms3rdAuthorizationItemTVORowImpl)rows[0];
            row.setExclusiveCopyrightFlag("YES");
            getTransaction().commit();
        }
    }

    public void exclusiveCancel(Number itemId) {
        Cms3rdAuthorizationItemTVOImpl relVO = this.getCms3rdAuthorizationItemTVO();
        Row[] rows = relVO.getFilteredRows(new RowQualifier("ItemId=" + itemId));
        if (rows.length > 0) {
            Cms3rdAuthorizationItemTVORowImpl row = (Cms3rdAuthorizationItemTVORowImpl)rows[0];
            row.setExclusiveCopyrightFlag("NO");
        }
    }

    public void setOrderItems(Number orderDocId, Number authorDocId, String compCode) {
        Cms3rdAuthorizationItemTVOImpl vO = this.getCms3rdAuthorizationItemTVO();
        Cms3rdAuthorizationItemTVORowImpl row = (Cms3rdAuthorizationItemTVORowImpl)vO.createRow();
        row.setOrderDocId(orderDocId);
        row.setAuthorDocId(authorDocId);
        row.setCompCode(compCode);
        row.setExclusiveCopyrightFlag("NO");
        vO.insertRow(row);
    }

    public Row getBookRowByAltKey(String bookName, String isbn, Number edition, Number impression, String compCode) {
        CmsBookValidateVOImpl validateVO = this.getCmsBookValidateVO();
        validateVO.setbvBookName(bookName);
        validateVO.setbvIsbn(isbn);
        validateVO.setbvEdition(edition);
        validateVO.setbvImpression(impression);
        validateVO.setbvCompCode(compCode);
        validateVO.executeQuery();
        validateVO.setRangeSize(-1);
        if (validateVO.getEstimatedRowCount() > 0) {
            return validateVO.first();
        }
        return null;
    }

    public String importData(List<Map<String, Object>> importData, String coverType, String compCode,
                             Number currentCategoryId) {
        String ret = "S";
        try {
            CmsBookTVOImpl bookSaveVo = this.getCmsBook4ImportSaveTVO();
            bookSaveVo.setRangeSize(-1);
            CmsAuthorCopyrightTVOImpl authorTVO = this.getCmsAuthorCopyrightTVO();
            authorTVO.setRangeSize(-1);
            if (importData != null && importData.size() > 0) {
                for (Map<String, Object> row : importData) {
                    CmsBookTVORowImpl bookRow = null;
                    //书名
                    Object bookName = row.get("书名");
                    //作者
                    Object author = row.get("作者");
                    //ISBN
                    Object isbn = row.get("ISBN");
                    //出版社
                    Object publisherHouse = row.get("出版社");
                    //版次
                    Object edition = row.get("版次");
                    //印次
                    Object impression = row.get("印次");
                    //定价
                    //出版时间PUB_TIME
                    Object pubTime = row.get("出版时间");

                    CmsBookValidateVORowImpl validateRow =
                        (CmsBookValidateVORowImpl)this.getBookRowByAltKey((String)bookName, (String)isbn,
                                                                          new Number(edition), new Number(impression),
                                                                          compCode);

                    boolean isCover = false;
                    if (validateRow != null) {
                        //有按照要求插入
                        System.out.println("coverType() > 0" + coverType);
                        if ("cover".equalsIgnoreCase(coverType)) {
                            Number bookId = validateRow.getBookId();
                            bookRow = (CmsBookTVORowImpl)bookSaveVo.getRow(new Key(new Object[] { bookId }));
                            isCover = true;
                        } else {
                            //ignore
                            continue;
                        }
                    } else {
                        //没有直接插入
                        bookRow = (CmsBookTVORowImpl)bookSaveVo.createRow();
                    }

                    bookRow.setBookName((String)bookName);
                    bookRow.setAuthor((String)author);
                    bookRow.setIsbn((String)isbn);
                    bookRow.setEdition(new Number(edition));
                    bookRow.setImpression(new Number(impression));
                    bookRow.setPublishingHouse((String)publisherHouse); //出版社名
                    bookRow.setPubTime(new Date(pubTime));
                    //设置关联信息
                    System.out.println("isCover=" + isCover);
                    if (!isCover) {
                        System.out.println("!isCover");
                        //图书doc
                        CmsDocTVOImpl docVO = this.getCmsDocTVO();
                        CmsDocTVORowImpl docNewRow = (CmsDocTVORowImpl)docVO.createRow();
                        docNewRow.setStatus("TO_GATHER_BOOK");
                        docNewRow.setLibCode("BOOK");
                        docNewRow.setLibTypeCode("END_PROD_LIB");
                        docNewRow.setCompCode(compCode);
                        docVO.insertRow(docNewRow);
                        bookRow.setDocId(docNewRow.getDocId());

                        preDocCategroupRel("CREATE", docNewRow.getDocId());
                        //作者版权doc
                        CmsDocTVOImpl docVOAuthor = this.getCmsDocTVO();
                        CmsDocTVORowImpl docNewRowAuthor = (CmsDocTVORowImpl)docVO.createRow();
                        docNewRowAuthor.setStatus("TO_INDEX_AUTHOR");
                        docNewRowAuthor.setLibCode("AUTHOR");
                        docNewRowAuthor.setLibTypeCode("COPYRIGHT_LIB");
                        docNewRowAuthor.setCompCode(compCode);
                        docNewRowAuthor.setDocId(docNewRowAuthor.getDocId());
                        docVOAuthor.insertRow(docNewRowAuthor);
                        preDocCategroupRel("CREATE", docNewRowAuthor.getDocId(), new Number(-1));

                        CmsAuthorCopyrightTVORowImpl authorRow = null;
                        //版权形式COPYRIGHT_FORM
                        Object copyrightForm = row.get("版权形式");
                        //独有版权
                        Object exclusiveCopyrightFlag = row.get("独有版权");
                        //部分试读PART_PROBATION_FLAG
                        Object partProbationFlag = row.get("部分试读");
                        //公众版PUBLIC_COPYRIGHT_FLAG
                        Object publicCopyrightFlag = row.get("公众版");
                        //著作权人COPYRIGHT_OWNER
                        Object copyrightOwner = row.get("著作权人");
                        //版权代理人COPYRIGHT_AGENT
                        Object copyrightAgent = row.get("版权代理人");
                        //电子书定价E_BOOK_PRICE
                        Object eBookPrice = row.get("电子书定价");
                        //电子书最低定价E_BOOK_MIN_PRICE
                        Object eBookMinPrice = row.get("电子书最低定价");
                        //授权地区AUTHORIZED_AREA
                        Object authorizedArea = row.get("授权地区");
                        //授权语种AUTHORIZED_LANG
                        Object authorizedLang = row.get("授权语种");
                        //纸介质版权PAPER_MEDIUM_COPYRIGHT_FLAG
                        Object paperMediumCopyrightFlag = row.get("纸介质版权");
                        //PAPER_MEDIUM_START_TIME纸介质版权开始时间
                        Object paperMediumStartTime = row.get("纸介质版权开始日期");
                        //PAPER_MEDIUM_END_TIME纸介质版权结束时间
                        Object paperMediumEndTime = row.get("纸介质版权结束日期");
                        //电子出版权标识ELECTRONIC_COPYRIGHT_FLAG
                        Object electronicCopyrightFlag = row.get("电子出版权");
                        //电子出版权开始时间ELECTRONIC_START_TIME
                        Object electronicStartTime = row.get("电子出版权开始日期");
                        //电子出版权结束时间ELECTRONIC_END_TIME
                        Object electronicEndTime = row.get("电子出版权结束日期");
                        //音像出版权标识AUDIO_VIDEO_COPYRIGHT_FLAG
                        Object audioVideoCopyrightFlag = row.get("音像出版权");
                        //音像出版权开始时间AUDIO_VIDEO_START_TIME
                        Object audioVideoStartTime = row.get("音像出版权开始日期");
                        //音像出版权结束时间AUDIO_VIDEO_END_TIME
                        Object audioVideoEndTime = row.get("音像出版权结束日期");
                        //网络出版权标识NETWORK_COPYRIGHT_FLAG
                        Object networkCopyrightFlag = row.get("网络出版权");
                        //网络出版权开始时间NETWORK_START_TIME
                        Object networkStartTime = row.get("网络出版权开日期");
                        //网络出版权结束时间NETWORK_END_TIME
                        Object networkEndTime = row.get("网络出版权结束日期");
                        //广播出版权标识BROADCAST_COPYRIGHT_FLAG
                        Object broadcastCopyrightFlag = row.get("广播版权");
                        //广播出版权开始时间BROADCAST_START_TIME
                        Object broadcastStartTime = row.get("广播出版权开始日期");
                        //广播出版权结束时间BROADCAST_END_TIME
                        Object broadcastEndTime = row.get("广播出版权结束日期");
                        //版权登记号COPYRIGHT_REGISTRATION_NUMBER
                        Object copyrightRegistrationNumber = row.get("版权登记号");
                        //海外版权OVERSEAS_COPYRIGHT_FLAG
                        Object overseasCopyrightFlag = row.get("海外版权");
                        //海外版税OVERSEAS_ROYALTY
                        Object overseasRoyalty = row.get("海外版税");
                        //数字版税DIGITAL_ROYALTY
                        Object digitalRoyalty = row.get("数字版税");
                        //版权CIPCOPYRIGHT_CIP
                        Object copyrightCip = row.get("版权CIP");
                        //备注REMARKS
                        Object remarks = row.get("备注");

                        System.out.println("createRow");
                        authorRow = (CmsAuthorCopyrightTVORowImpl)authorTVO.createRow();
                        authorRow.setDocId(docNewRowAuthor.getDocId());
                        authorRow.setBookDocId(docNewRow.getDocId());
                        authorRow.setCopyrightForm(findLovTypeCodeByMeaning("COPYRIGHT_FORM", copyrightForm));
                        authorRow.setExclusiveCopyrightFlag(findLovTypeCodeByMeaning("YOUORWU",
                                                                                     exclusiveCopyrightFlag));
                        authorRow.setPartProbationFlag(findLovTypeCodeByMeaning("YOUORWU", partProbationFlag));
                        authorRow.setPublicCopyrightFlag(findLovTypeCodeByMeaning("YOUORWU", publicCopyrightFlag));
                        authorRow.setCopyrightOwner(findLovTypeCodeByMeaning("YOUORWU", copyrightOwner));
                        authorRow.setCopyrightAgent(copyrightAgent.toString());
                        authorRow.setEBookPrice(new oracle.jbo.domain.Number(eBookPrice));
                        authorRow.setEBookMinPrice(new oracle.jbo.domain.Number(eBookMinPrice));
                        authorRow.setAuthorizedArea(authorizedArea.toString());
                        authorRow.setAuthorizedLang(authorizedLang.toString());
                        if (null != paperMediumCopyrightFlag)
                            authorRow.setPaperMediumCopyrightFlag(findLovTypeCodeByMeaning("YOUORWU",
                                                                                           paperMediumCopyrightFlag));
                        if (null != paperMediumStartTime)
                            authorRow.setPaperMediumStartTime(new Date(paperMediumStartTime));
                        if (null != paperMediumEndTime)
                            authorRow.setPaperMediumEndTime(new Date(paperMediumEndTime));
                        if (null != electronicCopyrightFlag)
                            authorRow.setElectronicCopyrightFlag(findLovTypeCodeByMeaning("YOUORWU",
                                                                                          electronicCopyrightFlag));
                        if (null != electronicStartTime)
                            authorRow.setElectronicStartTime(new Date(electronicStartTime));
                        if (null != electronicEndTime)
                            authorRow.setElectronicEndTime(new Date(electronicEndTime));
                        if (null != audioVideoCopyrightFlag)
                            authorRow.setAudioVideoCopyrightFlag(findLovTypeCodeByMeaning("YOUORWU",
                                                                                          audioVideoCopyrightFlag));
                        if (null != audioVideoStartTime)
                            authorRow.setAudioVideoStartTime(new Date(audioVideoStartTime));
                        if (null != audioVideoEndTime)
                            authorRow.setAudioVideoEndTime(new Date(audioVideoEndTime));
                        if (null != networkCopyrightFlag)
                            authorRow.setNetworkCopyrightFlag(findLovTypeCodeByMeaning("YOUORWU",
                                                                                       networkCopyrightFlag));
                        if (null != networkStartTime)
                            authorRow.setNetworkStartTime(new Date(networkStartTime));
                        if (null != networkEndTime)
                            authorRow.setNetworkEndTime(new Date(networkEndTime));
                        if (null != broadcastCopyrightFlag)
                            authorRow.setBroadcastCopyrightFlag(findLovTypeCodeByMeaning("YOUORWU",
                                                                                         broadcastCopyrightFlag));
                        if (null != broadcastStartTime)
                            authorRow.setBroadcastStartTime(new Date(broadcastStartTime));
                        if (null != broadcastEndTime)
                            authorRow.setBroadcastEndTime(new Date(broadcastEndTime));
                        authorRow.setCopyrightRegistrationNumber(copyrightRegistrationNumber.toString());
                        authorRow.setOverseasCopyrightFlag(findLovTypeCodeByMeaning("YOUORWU", overseasCopyrightFlag));
                        if (null != overseasRoyalty)
                            authorRow.setOverseasRoyalty(overseasRoyalty.toString());
                        if (null != digitalRoyalty)
                            authorRow.setDigitalRoyalty(digitalRoyalty.toString());
                        authorRow.setCopyrightCip(copyrightCip.toString());
                        authorRow.setRemarks(remarks.toString());
                    }
                }
                this.getDBTransaction().commit();
            }
        } catch (Exception e) {
            e.printStackTrace();
            ret = e.getMessage();
        }
        return ret;
    }

    public void preDocCategroupRel(String mode, Number docId) {
        CmsDocCategoryRelTVOImpl docCategoryRelVO = this.getCmsDocCategoryRelTVO();
        if ("CREATE".equals(mode)) {
            CmsDocCategoryRelTVORowImpl docCategoryRelNewRow =
                (CmsDocCategoryRelTVORowImpl)docCategoryRelVO.createRow();
            docCategoryRelNewRow.setDocId(docId);
            docCategoryRelNewRow.setCategoryGroupType("BY_CATEGORY");
            docCategoryRelNewRow.setCategoryId(new Number(-1));
            docCategoryRelVO.insertRow(docCategoryRelNewRow);
            docCategoryRelVO.setCurrentRow(docCategoryRelNewRow);
        } else {
            docCategoryRelVO.setApplyViewCriteriaName("findByDocIdVC");
            docCategoryRelVO.setbvDocId(docId);
            docCategoryRelVO.executeQuery();
            Row row = docCategoryRelVO.first();
            if (row != null) {
                docCategoryRelVO.setCurrentRow(row);
            }
        }
    }

    public String importItemData(List<Map<String, Object>> importData) {
        String ret = "S";
        try {
            Cms3rdAuthorizationItemsTVOImpl itemsTVO = this.getCms3rdAuthorizationItemsTVO();
            Cms3rdAuthorizationItemTVOImpl itemTVO = this.getCms3rdAuthorizationItemTVO();
            itemsTVO.setRangeSize(-1);
            //根据itemId 查询是否有记录
            if (importData != null && importData.size() > 0) {
                for (Map<String, Object> row : importData) {
                    System.out.println("~~~~~");
                    Cms3rdAuthorizationItemsTVORowImpl itemsRow = null;
                    //授权明细ID
                    Object itemIdStr = row.get("授权明细ID");
                    oracle.jbo.domain.Number itemId = new Number(itemIdStr);
                    System.out.println("itemId!!!!!!=" + itemId);
                    //销售费用
                    Object salesCost = row.get("本次销售费用");
                    System.out.println("salesCost=" + salesCost);
                    //销售数量
                    Object salesNum = row.get("本次销售数量");
                    System.out.println("salesNum=" + salesNum);
                    //备注
                    Object remarks = row.get("备注");
                    itemsRow = (Cms3rdAuthorizationItemsTVORowImpl)itemsTVO.createRow();
                    itemsRow.setItemId(itemId);
                    if (null != salesCost) {
                        itemsRow.setSalesCost(new oracle.jbo.domain.Number(salesCost.toString()));
                    }
                    if (null != salesNum) {
                        itemsRow.setSalesNum(new oracle.jbo.domain.Number(salesNum.toString()));
                    }
                    itemsRow.setImportDate(new Date());
                    if (null != remarks) {
                        itemsRow.setRemarks(remarks.toString());
                    }
                    Row[] rows = itemTVO.getFilteredRows("ItemId", itemId);
                    if (rows.length > 0) {
                        System.out.println("length>0");
                        //更改总费用 总数量
                        Cms3rdAuthorizationItemTVORowImpl itemRow = (Cms3rdAuthorizationItemTVORowImpl)rows[0];
                        System.out.println("itemRow.getSalesTotalCost=" + itemRow.getSalesTotalCost());
                        if (null == itemRow.getSalesTotalCost()) {
                            itemRow.setSalesTotalCost(itemsRow.getSalesCost());
                        } else {
                            itemRow.setSalesTotalCost(itemRow.getSalesTotalCost().add(itemsRow.getSalesCost()));
                        }
                        if (null == itemRow.getSalesTotalNum()) {
                            itemRow.setSalesTotalNum(itemsRow.getSalesNum());
                        } else {
                            itemRow.setSalesTotalNum(itemRow.getSalesTotalNum().add(itemsRow.getSalesNum()));
                        }
                    }
                }
                this.getDBTransaction().commit();
            }
        } catch (Exception e) {
            ret = "导入excel的格式或数据不正确!";
        }
        return ret;
    }

    public String findLovTypeCodeByMeaning(String lookupTypeCode, Object meaning) {
        CmsLookupValueVOImpl vo = this.getCmsLookupValueVO();
        Row[] rows =
            vo.getFilteredRows(new RowQualifier("LookupTypeCode ='" + lookupTypeCode + "' AND Meaning ='" + meaning.toString() +
                                                "'"));
        if (rows.length > 0) {
            CmsLookupValueVORowImpl row = (CmsLookupValueVORowImpl)rows[0];
            return row.getLookupValueCode();
        }
        return null;
    }


    public void preDocCategroupRel(String mode, Number docId, Number categoryId) {
        CmsDocCategoryRelTVOImpl docCategoryRelVO = this.getCmsDocCategoryRelTVO();
        if ("CREATE".equals(mode)) {
            CmsDocCategoryRelTVORowImpl docCategoryRelNewRow =
                (CmsDocCategoryRelTVORowImpl)docCategoryRelVO.createRow();
            docCategoryRelNewRow.setDocId(docId);
            docCategoryRelNewRow.setCategoryGroupType("BY_CATEGORY");
            docCategoryRelNewRow.setCategoryId(categoryId);
            docCategoryRelVO.insertRow(docCategoryRelNewRow);
            docCategoryRelVO.setCurrentRow(docCategoryRelNewRow);
        } else {
            docCategoryRelVO.setbvDocId(docId);
            docCategoryRelVO.executeQuery();
            Row r = docCategoryRelVO.first();
            if (r != null) {
                CmsDocCategoryRelTVORowImpl row = (CmsDocCategoryRelTVORowImpl)r;
                row.setCategoryId(categoryId);
                docCategoryRelVO.setCurrentRow(row);
            }
        }
    }

    /**
     * 根据公司Id数组 返回List datas;
     * @param companyIds
     * @return
     */
    public List<Cms3rdAuthorizationItemVORowImpl> getDatas(Object[] companyIds) {
        Cms3rdAuthorizationItemVOImpl itemVO = (Cms3rdAuthorizationItemVOImpl)this.getCms3rdAuthorizationItemVO();
        List<Cms3rdAuthorizationItemVORowImpl> list = new ArrayList<Cms3rdAuthorizationItemVORowImpl>();
        for (Object companyId : companyIds) {
            System.out.println("companyId=" + companyId);
            Row[] rows;
            try {
                rows = itemVO.getFilteredRows("AuthorizedCompany", new Number(companyId.toString()));
                if (rows.length > 0) {
                    for (Row row : rows) {
                        list.add((Cms3rdAuthorizationItemVORowImpl)row);
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

        }
        return list;
    }

    public String getCompanyNameById(Number companyId) {
        CmsCompanyCopyrightVOImpl itemVO = (CmsCompanyCopyrightVOImpl)this.getCmsCompanyCopyrightVO();
        Row[] rows;
        rows = itemVO.getFilteredRows("CompanyId", companyId);
        if (rows.length > 0) {
            return ((CmsCompanyCopyrightVORowImpl)rows[0]).getCompanyName();
        }
        return null;
    }

    public void deleteCompanyById(Number id) {
        System.out.println("id=" + id);
        CmsCompanyCopyrightTVOImpl tvo = (CmsCompanyCopyrightTVOImpl)this.getCmsCompanyCopyrightTVO4Query();
        tvo.setbvCompanyId(id);
        tvo.executeQuery();
        Row row = tvo.first();
        if (null != row) {
            row.remove();
            this.getTransaction().commit();
        }
    }

    /**
     * Container's getter for CmsCompanyCopyrightTVO.
     * @return CmsCompanyCopyrightTVO
     */
    public CmsCompanyCopyrightTVOImpl getCmsCompanyCopyrightTVO() {
        return (CmsCompanyCopyrightTVOImpl)findViewObject("CmsCompanyCopyrightTVO");
    }

    /**
     * Container's getter for CmsCompanyCopyrightVO.
     * @return CmsCompanyCopyrightVO
     */
    public ViewObjectImpl getCmsCompanyCopyrightVO() {
        return (ViewObjectImpl)findViewObject("CmsCompanyCopyrightVO");
    }

    /**
     * Container's getter for CmsAuthorCopyrightVO.
     * @return CmsAuthorCopyrightVO
     */
    public CmsAuthorCopyrightVOImpl getCmsAuthorCopyrightVO() {
        return (CmsAuthorCopyrightVOImpl)findViewObject("CmsAuthorCopyrightVO");
    }

    /**
     * Container's getter for CmsAuthorCopyrightTVO.
     * @return CmsAuthorCopyrightTVO
     */
    public CmsAuthorCopyrightTVOImpl getCmsAuthorCopyrightTVO() {
        return (CmsAuthorCopyrightTVOImpl)findViewObject("CmsAuthorCopyrightTVO");
    }

    /**
     * Container's getter for CmsDocTVO.
     * @return CmsDocTVO
     */
    public CmsDocTVOImpl getCmsDocTVO() {
        return (CmsDocTVOImpl)findViewObject("CmsDocTVO");
    }

    /**
     * Container's getter for CmsDocCategoryRelTVO.
     * @return CmsDocCategoryRelTVO
     */
    public CmsDocCategoryRelTVOImpl getCmsDocCategoryRelTVO() {
        return (CmsDocCategoryRelTVOImpl)findViewObject("CmsDocCategoryRelTVO");
    }

    /**
     * Container's getter for Cms3rdAuthorizationOrderTVO.
     * @return Cms3rdAuthorizationOrderTVO
     */
    public Cms3rdAuthorizationOrderTVOImpl getCms3rdAuthorizationOrderTVO() {
        return (Cms3rdAuthorizationOrderTVOImpl)findViewObject("Cms3rdAuthorizationOrderTVO");
    }

    /**
     * Container's getter for Cms3rdAuthorizationOrderVO.
     * @return Cms3rdAuthorizationOrderVO
     */
    public Cms3rdAuthorizationOrderVOImpl getCms3rdAuthorizationOrderVO() {
        return (Cms3rdAuthorizationOrderVOImpl)findViewObject("Cms3rdAuthorizationOrderVO");
    }

    /**
     * Container's getter for Cms3rdAuthorizationItemTVO.
     * @return Cms3rdAuthorizationItemTVO
     */
    public Cms3rdAuthorizationItemTVOImpl getCms3rdAuthorizationItemTVO() {
        return (Cms3rdAuthorizationItemTVOImpl)findViewObject("Cms3rdAuthorizationItemTVO");
    }

    /**
     * Container's getter for Cms3rdAuthorizationItemVO.
     * @return Cms3rdAuthorizationItemVO
     */
    public ViewObjectImpl getCms3rdAuthorizationItemVO() {
        return (ViewObjectImpl)findViewObject("Cms3rdAuthorizationItemVO");
    }

    /**
     * Container's getter for Lookup4Area.
     * @return Lookup4Area
     */
    public ViewObjectImpl getLookup4Area() {
        return (ViewObjectImpl)findViewObject("Lookup4Area");
    }

    /**
     * Container's getter for Lookup4Lang.
     * @return Lookup4Lang
     */
    public ViewObjectImpl getLookup4Lang() {
        return (ViewObjectImpl)findViewObject("Lookup4Lang");
    }

    /**
     * Container's getter for CmsAuthorCopyright4ImportTVO.
     * @return CmsAuthorCopyright4ImportTVO
     */
    public CmsAuthorCopyrightTVOImpl getCmsAuthorCopyright4ImportTVO() {
        return (CmsAuthorCopyrightTVOImpl)findViewObject("CmsAuthorCopyright4ImportTVO");
    }

    /**
     * Container's getter for CmsLookupValueVO.
     * @return CmsLookupValueVO
     */
    public CmsLookupValueVOImpl getCmsLookupValueVO() {
        return (CmsLookupValueVOImpl)findViewObject("CmsLookupValueVO");
    }

    /**
     * Container's getter for Cms3rdAuthorizationItemsTVO.
     * @return Cms3rdAuthorizationItemsTVO
     */
    public Cms3rdAuthorizationItemsTVOImpl getCms3rdAuthorizationItemsTVO() {
        return (Cms3rdAuthorizationItemsTVOImpl)findViewObject("Cms3rdAuthorizationItemsTVO");
    }

    /**
     * Container's getter for Cms3rdAuthorizationItemsVO.
     * @return Cms3rdAuthorizationItemsVO
     */
    public Cms3rdAuthorizationItemsVOImpl getCms3rdAuthorizationItemsVO() {
        return (Cms3rdAuthorizationItemsVOImpl)findViewObject("Cms3rdAuthorizationItemsVO");
    }

    /**
     * Container's getter for CmsBookEdit4CopyrightVO.
     * @return CmsBookEdit4CopyrightVO
     */
    public CmsBookEdit4CopyrightVOImpl getCmsBookEdit4CopyrightVO() {
        return (CmsBookEdit4CopyrightVOImpl)findViewObject("CmsBookEdit4CopyrightVO");
    }

    /**
     * Container's getter for CmsBookTVO.
     * @return CmsBookTVO
     */
    public CmsBookTVOImpl getCmsBookTVO() {
        return (CmsBookTVOImpl)findViewObject("CmsBookTVO");
    }

    /**
     * Container's getter for CmsAuthorCopyrightVO4Query.
     * @return CmsAuthorCopyrightVO4Query
     */
    public CmsAuthorCopyrightVOImpl getCmsAuthorCopyrightVO4Query() {
        return (CmsAuthorCopyrightVOImpl)findViewObject("CmsAuthorCopyrightVO4Query");
    }

    /**
     * Container's getter for getCmsBook4ImportSaveTVO.
     * @return getCmsBook4ImportSaveTVO
     */
    public CmsBookTVOImpl getCmsBook4ImportSaveTVO() {
        return (CmsBookTVOImpl)findViewObject("CmsBook4ImportSaveTVO");
    }

    /**
     * Container's getter for CmsDocUcmRelTVO.
     * @return CmsDocUcmRelTVO
     */
    public CmsDocUcmRelTVOImpl getCmsDocUcmRelTVO() {
        return (CmsDocUcmRelTVOImpl)findViewObject("CmsDocUcmRelTVO");
    }

    /**
     * Container's getter for CmsBook4ImportTVO.
     * @return CmsBook4ImportTVO
     */
    public CmsBookTVOImpl getCmsBook4ImportTVO() {
        return (CmsBookTVOImpl)findViewObject("CmsBook4ImportTVO");
    }


    /**
     * Container's getter for Cms3rdAuthorizationItemVO4View.
     * @return Cms3rdAuthorizationItemVO4View
     */
    public Cms3rdAuthorizationItemVOImpl getCms3rdAuthorizationItemVO4View() {
        return (Cms3rdAuthorizationItemVOImpl)findViewObject("Cms3rdAuthorizationItemVO4View");
    }

    /**
     * Container's getter for Cms3rdAuthorizationItemsVO4View.
     * @return Cms3rdAuthorizationItemsVO4View
     */
    public Cms3rdAuthorizationItemsVOImpl getCms3rdAuthorizationItemsVO4View() {
        return (Cms3rdAuthorizationItemsVOImpl)findViewObject("Cms3rdAuthorizationItemsVO4View");
    }

    /**
     * Container's getter for CmsCopyrightItem2ItemsVL.
     * @return CmsCopyrightItem2ItemsVL
     */
    public ViewLinkImpl getCmsCopyrightItem2ItemsVL() {
        return (ViewLinkImpl)findViewLink("CmsCopyrightItem2ItemsVL");
    }


    /**
     * Container's getter for Cms3rdAuthorizationOrderVO4View.
     * @return Cms3rdAuthorizationOrderVO4View
     */
    public Cms3rdAuthorizationOrderVOImpl getCms3rdAuthorizationOrderVO4View() {
        return (Cms3rdAuthorizationOrderVOImpl)findViewObject("Cms3rdAuthorizationOrderVO4View");
    }

    /**
     * Container's getter for CmsAttachVO4View.
     * @return CmsAttachVO4View
     */
    public CmsAttachVOImpl getCmsAttachVO4View() {
        return (CmsAttachVOImpl)findViewObject("CmsAttachVO4View");
    }

    /**
     * Container's getter for CmsCopyrightOrder2AttachVL.
     * @return CmsCopyrightOrder2AttachVL
     */
    public ViewLinkImpl getCmsCopyrightOrder2AttachVL() {
        return (ViewLinkImpl)findViewLink("CmsCopyrightOrder2AttachVL");
    }

    /**
     * Container's getter for CmsAuthorCopyrightVO4View.
     * @return CmsAuthorCopyrightVO4View
     */
    public CmsAuthorCopyrightVOImpl getCmsAuthorCopyrightVO4View() {
        return (CmsAuthorCopyrightVOImpl)findViewObject("CmsAuthorCopyrightVO4View");
    }

    /**
     * Container's getter for CmsAttachVOviaVL4View.
     * @return CmsAttachVOviaVL4View
     */
    public CmsAttachVOImpl getCmsAttachVOviaVL4View() {
        return (CmsAttachVOImpl)findViewObject("CmsAttachVOviaVL4View");
    }

    /**
     * Container's getter for CmsCopyrightAuthor2AttachVL1.
     * @return CmsCopyrightAuthor2AttachVL1
     */
    public ViewLinkImpl getCmsCopyrightAuthor2AttachVL1() {
        return (ViewLinkImpl)findViewLink("CmsCopyrightAuthor2AttachVL1");
    }

    /**
     * Container's getter for CmsCategory4AuthorCopyrightVO.
     * @return CmsCategory4AuthorCopyrightVO
     */
    public CmsCategory4AuthorCopyrightVOImpl getCmsCategory4AuthorCopyrightVO() {
        return (CmsCategory4AuthorCopyrightVOImpl)findViewObject("CmsCategory4AuthorCopyrightVO");
    }

    /**
     * Container's getter for CmsChildCategory4AuthorCopyrightVO.
     * @return CmsChildCategory4AuthorCopyrightVO
     */
    public CmsCategory4AuthorCopyrightVOImpl getCmsChildCategory4AuthorCopyrightVO() {
        return (CmsCategory4AuthorCopyrightVOImpl)findViewObject("CmsChildCategory4AuthorCopyrightVO");
    }

    /**
     * Container's getter for CmsCategory4AuthorCopyrightVL1.
     * @return CmsCategory4AuthorCopyrightVL1
     */
    public ViewLinkImpl getCmsCategory4AuthorCopyrightVL1() {
        return (ViewLinkImpl)findViewLink("CmsCategory4AuthorCopyrightVL1");
    }

    /**
     * Container's getter for CmsCategoryQueryVO.
     * @return CmsCategoryQueryVO
     */
    public CmsCategoryQueryVOImpl getCmsCategoryQueryVO() {
        return (CmsCategoryQueryVOImpl)findViewObject("CmsCategoryQueryVO");
    }

    /**
     * Container's getter for CmsDocStatus4AuthorCopyrightVO.
     * @return CmsDocStatus4AuthorCopyrightVO
     */
    public CmsDocStatus4AuthorCopyrightVOImpl getCmsDocStatus4AuthorCopyrightVO() {
        return (CmsDocStatus4AuthorCopyrightVOImpl)findViewObject("CmsDocStatus4AuthorCopyrightVO");
    }

    /**
     * Container's getter for CmsCompanyCopyrightVO4View.
     * @return CmsCompanyCopyrightVO4View
     */
    public CmsCompanyCopyrightVOImpl getCmsCompanyCopyrightVO4View() {
        return (CmsCompanyCopyrightVOImpl)findViewObject("CmsCompanyCopyrightVO4View");
    }

    /**
     * Container's getter for CmsCompanyCopyrightTVO4Query.
     * @return CmsCompanyCopyrightTVO4Query
     */
    public CmsCompanyCopyrightTVOImpl getCmsCompanyCopyrightTVO4Query() {
        return (CmsCompanyCopyrightTVOImpl)findViewObject("CmsCompanyCopyrightTVO4Query");
    }

    /**
     * Container's getter for CmsCategory4DetailVO.
     * @return CmsCategory4DetailVO
     */
    public CmsCategory4DetailVOImpl getCmsCategory4DetailVO() {
        return (CmsCategory4DetailVOImpl)findViewObject("CmsCategory4DetailVO");
    }

    /**
     * Container's getter for CmsBookValidateVO.
     * @return CmsBookValidateVO
     */
    public CmsBookValidateVOImpl getCmsBookValidateVO() {
        return (CmsBookValidateVOImpl)findViewObject("CmsBookValidateVO");
    }
}
