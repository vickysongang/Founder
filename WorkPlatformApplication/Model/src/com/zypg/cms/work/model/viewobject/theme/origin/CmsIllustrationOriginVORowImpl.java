package com.zypg.cms.work.model.viewobject.theme.origin;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.Hashtable;

import java.util.List;

import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Aug 10 19:23:57 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CmsIllustrationOriginVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        IllustrationId {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getIllustrationId();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setIllustrationId((Number)value);
            }
        }
        ,
        ThumbnailUrl {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getThumbnailUrl();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setThumbnailUrl((String)value);
            }
        }
        ,
        DocId {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setDocId((Number)value);
            }
        }
        ,
        IllustrationName {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getIllustrationName();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setIllustrationName((String)value);
            }
        }
        ,
        IllustrationSource {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getIllustrationSource();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setIllustrationSource((String)value);
            }
        }
        ,
        IllustrationType {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getIllustrationType();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setIllustrationType((String)value);
            }
        }
        ,
        IllustrationAuthor {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getIllustrationAuthor();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setIllustrationAuthor((String)value);
            }
        }
        ,
        MapApproveNum {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getMapApproveNum();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setMapApproveNum((String)value);
            }
        }
        ,
        PageNumber {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getPageNumber();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setPageNumber((String)value);
            }
        }
        ,
        Keyword {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getKeyword();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setKeyword((String)value);
            }
        }
        ,
        IllustrationDesc {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getIllustrationDesc();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setIllustrationDesc((String)value);
            }
        }
        ,
        Remarks {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getRemarks();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setRemarks((String)value);
            }
        }
        ,
        FigureFormat {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getFigureFormat();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setFigureFormat((String)value);
            }
        }
        ,
        FigureDimension {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getFigureDimension();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setFigureDimension((String)value);
            }
        }
        ,
        FigureSize {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getFigureSize();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setFigureSize((String)value);
            }
        }
        ,
        CoverDesign {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getCoverDesign();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setCoverDesign((String)value);
            }
        }
        ,
        FigureResolution {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getFigureResolution();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setFigureResolution((String)value);
            }
        }
        ,
        FigureXResolution {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getFigureXResolution();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setFigureXResolution((String)value);
            }
        }
        ,
        FigureYResolution {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getFigureYResolution();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setFigureYResolution((String)value);
            }
        }
        ,
        FigureWidth {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getFigureWidth();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setFigureWidth((String)value);
            }
        }
        ,
        FigureHeight {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getFigureHeight();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setFigureHeight((String)value);
            }
        }
        ,
        FigureStoreTime {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getFigureStoreTime();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setFigureStoreTime((Date)value);
            }
        }
        ,
        CopyrightFlag {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getCopyrightFlag();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setCopyrightFlag((String)value);
            }
        }
        ,
        Checked {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getChecked();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setChecked((Boolean)value);
            }
        }
        ,
        CategoryId {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getCategoryId();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setCategoryId((Number)value);
            }
        }
        ,
        CategoryName {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getCategoryName();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setCategoryName((String)value);
            }
        }
        ,
        Status {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getStatus();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setStatus((String)value);
            }
        }
        ,
        CompCode {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getCompCode();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setCompCode((String)value);
            }
        }
        ,
        CompName {
            public Object get(CmsIllustrationOriginVORowImpl obj) {
                return obj.getCompName();
            }

            public void put(CmsIllustrationOriginVORowImpl obj, Object value) {
                obj.setCompName((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CmsIllustrationOriginVORowImpl object);

        public abstract void put(CmsIllustrationOriginVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ILLUSTRATIONID = AttributesEnum.IllustrationId.index();
    public static final int THUMBNAILURL = AttributesEnum.ThumbnailUrl.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int ILLUSTRATIONNAME = AttributesEnum.IllustrationName.index();
    public static final int ILLUSTRATIONSOURCE = AttributesEnum.IllustrationSource.index();
    public static final int ILLUSTRATIONTYPE = AttributesEnum.IllustrationType.index();
    public static final int ILLUSTRATIONAUTHOR = AttributesEnum.IllustrationAuthor.index();
    public static final int MAPAPPROVENUM = AttributesEnum.MapApproveNum.index();
    public static final int PAGENUMBER = AttributesEnum.PageNumber.index();
    public static final int KEYWORD = AttributesEnum.Keyword.index();
    public static final int ILLUSTRATIONDESC = AttributesEnum.IllustrationDesc.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();
    public static final int FIGUREFORMAT = AttributesEnum.FigureFormat.index();
    public static final int FIGUREDIMENSION = AttributesEnum.FigureDimension.index();
    public static final int FIGURESIZE = AttributesEnum.FigureSize.index();
    public static final int COVERDESIGN = AttributesEnum.CoverDesign.index();
    public static final int FIGURERESOLUTION = AttributesEnum.FigureResolution.index();
    public static final int FIGUREXRESOLUTION = AttributesEnum.FigureXResolution.index();
    public static final int FIGUREYRESOLUTION = AttributesEnum.FigureYResolution.index();
    public static final int FIGUREWIDTH = AttributesEnum.FigureWidth.index();
    public static final int FIGUREHEIGHT = AttributesEnum.FigureHeight.index();
    public static final int FIGURESTORETIME = AttributesEnum.FigureStoreTime.index();
    public static final int COPYRIGHTFLAG = AttributesEnum.CopyrightFlag.index();
    public static final int CHECKED = AttributesEnum.Checked.index();
    public static final int CATEGORYID = AttributesEnum.CategoryId.index();
    public static final int CATEGORYNAME = AttributesEnum.CategoryName.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int COMPCODE = AttributesEnum.CompCode.index();
    public static final int COMPNAME = AttributesEnum.CompName.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CmsIllustrationOriginVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute IllustrationId.
     * @return the IllustrationId
     */
    public Number getIllustrationId() {
        return (Number)getAttributeInternal(ILLUSTRATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute IllustrationId.
     * @param value value to set the  IllustrationId
     */
    public void setIllustrationId(Number value) {
        setAttributeInternal(ILLUSTRATIONID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public Number getDocId() {
        return (Number)getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DocId.
     * @param value value to set the  DocId
     */
    public void setDocId(Number value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute IllustrationName.
     * @return the IllustrationName
     */
    public String getIllustrationName() {
        return (String)getAttributeInternal(ILLUSTRATIONNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute IllustrationName.
     * @param value value to set the  IllustrationName
     */
    public void setIllustrationName(String value) {
        setAttributeInternal(ILLUSTRATIONNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute IllustrationSource.
     * @return the IllustrationSource
     */
    public String getIllustrationSource() {
        return (String)getAttributeInternal(ILLUSTRATIONSOURCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute IllustrationSource.
     * @param value value to set the  IllustrationSource
     */
    public void setIllustrationSource(String value) {
        setAttributeInternal(ILLUSTRATIONSOURCE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute IllustrationType.
     * @return the IllustrationType
     */
    public String getIllustrationType() {
        return (String)getAttributeInternal(ILLUSTRATIONTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute IllustrationType.
     * @param value value to set the  IllustrationType
     */
    public void setIllustrationType(String value) {
        setAttributeInternal(ILLUSTRATIONTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute IllustrationAuthor.
     * @return the IllustrationAuthor
     */
    public String getIllustrationAuthor() {
        return (String)getAttributeInternal(ILLUSTRATIONAUTHOR);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute IllustrationAuthor.
     * @param value value to set the  IllustrationAuthor
     */
    public void setIllustrationAuthor(String value) {
        setAttributeInternal(ILLUSTRATIONAUTHOR, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MapApproveNum.
     * @return the MapApproveNum
     */
    public String getMapApproveNum() {
        return (String)getAttributeInternal(MAPAPPROVENUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MapApproveNum.
     * @param value value to set the  MapApproveNum
     */
    public void setMapApproveNum(String value) {
        setAttributeInternal(MAPAPPROVENUM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PageNumber.
     * @return the PageNumber
     */
    public String getPageNumber() {
        return (String)getAttributeInternal(PAGENUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PageNumber.
     * @param value value to set the  PageNumber
     */
    public void setPageNumber(String value) {
        setAttributeInternal(PAGENUMBER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Keyword.
     * @return the Keyword
     */
    public String getKeyword() {
        return (String)getAttributeInternal(KEYWORD);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Keyword.
     * @param value value to set the  Keyword
     */
    public void setKeyword(String value) {
        setAttributeInternal(KEYWORD, value);
    }

    /**
     * Gets the attribute value for the calculated attribute IllustrationDesc.
     * @return the IllustrationDesc
     */
    public String getIllustrationDesc() {
        return (String)getAttributeInternal(ILLUSTRATIONDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute IllustrationDesc.
     * @param value value to set the  IllustrationDesc
     */
    public void setIllustrationDesc(String value) {
        setAttributeInternal(ILLUSTRATIONDESC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Remarks.
     * @return the Remarks
     */
    public String getRemarks() {
        return (String)getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Remarks.
     * @param value value to set the  Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FigureFormat.
     * @return the FigureFormat
     */
    public String getFigureFormat() {
        return (String)getAttributeInternal(FIGUREFORMAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FigureFormat.
     * @param value value to set the  FigureFormat
     */
    public void setFigureFormat(String value) {
        setAttributeInternal(FIGUREFORMAT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FigureDimension.
     * @return the FigureDimension
     */
    public String getFigureDimension() {
        return (String)getAttributeInternal(FIGUREDIMENSION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FigureDimension.
     * @param value value to set the  FigureDimension
     */
    public void setFigureDimension(String value) {
        setAttributeInternal(FIGUREDIMENSION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FigureSize.
     * @return the FigureSize
     */
    public String getFigureSize() {
        return (String)getAttributeInternal(FIGURESIZE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FigureSize.
     * @param value value to set the  FigureSize
     */
    public void setFigureSize(String value) {
        setAttributeInternal(FIGURESIZE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CoverDesign.
     * @return the CoverDesign
     */
    public String getCoverDesign() {
        return (String)getAttributeInternal(COVERDESIGN);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CoverDesign.
     * @param value value to set the  CoverDesign
     */
    public void setCoverDesign(String value) {
        setAttributeInternal(COVERDESIGN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FigureResolution.
     * @return the FigureResolution
     */
    public String getFigureResolution() {
        return (String)getAttributeInternal(FIGURERESOLUTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FigureResolution.
     * @param value value to set the  FigureResolution
     */
    public void setFigureResolution(String value) {
        setAttributeInternal(FIGURERESOLUTION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FigureXResolution.
     * @return the FigureXResolution
     */
    public String getFigureXResolution() {
        return (String)getAttributeInternal(FIGUREXRESOLUTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FigureXResolution.
     * @param value value to set the  FigureXResolution
     */
    public void setFigureXResolution(String value) {
        setAttributeInternal(FIGUREXRESOLUTION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FigureYResolution.
     * @return the FigureYResolution
     */
    public String getFigureYResolution() {
        return (String)getAttributeInternal(FIGUREYRESOLUTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FigureYResolution.
     * @param value value to set the  FigureYResolution
     */
    public void setFigureYResolution(String value) {
        setAttributeInternal(FIGUREYRESOLUTION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FigureWidth.
     * @return the FigureWidth
     */
    public String getFigureWidth() {
        return (String)getAttributeInternal(FIGUREWIDTH);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FigureWidth.
     * @param value value to set the  FigureWidth
     */
    public void setFigureWidth(String value) {
        setAttributeInternal(FIGUREWIDTH, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FigureHeight.
     * @return the FigureHeight
     */
    public String getFigureHeight() {
        return (String)getAttributeInternal(FIGUREHEIGHT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FigureHeight.
     * @param value value to set the  FigureHeight
     */
    public void setFigureHeight(String value) {
        setAttributeInternal(FIGUREHEIGHT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FigureStoreTime.
     * @return the FigureStoreTime
     */
    public Date getFigureStoreTime() {
        return (Date)getAttributeInternal(FIGURESTORETIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FigureStoreTime.
     * @param value value to set the  FigureStoreTime
     */
    public void setFigureStoreTime(Date value) {
        setAttributeInternal(FIGURESTORETIME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CopyrightFlag.
     * @return the CopyrightFlag
     */
    public String getCopyrightFlag() {
        return (String)getAttributeInternal(COPYRIGHTFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CopyrightFlag.
     * @param value value to set the  CopyrightFlag
     */
    public void setCopyrightFlag(String value) {
        setAttributeInternal(COPYRIGHTFLAG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Checked.
     * @return the Checked
     */
    public Boolean getChecked() {
        Boolean result = null;
        Hashtable map = this.getDBTransaction().getSession().getUserData();
        String prefix = "ORIGIN";
        String selectAllFlag = (String)map.get(prefix + "_selectAllFlag");
        String key = prefix + "_" + this.getDocId();
        List<String> currSelectedList = (List<String>)map.get(prefix + "_currSelected");
        if ("O".equals(selectAllFlag)) {
            if (currSelectedList.contains(key)) {
                result = true;
            } else {
                result = false;
            }
        } else {
            if ("Y".equals(selectAllFlag)) {
                result = true;
            } else if ("N".equals(selectAllFlag)) {
                result = false;
            }
        }
        try {
            this.setChecked(result);
        } catch (Exception e) {
            //            e.printStackTrace();
        }
        return (Boolean)getAttributeInternal(CHECKED);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Checked.
     * @param value value to set the  Checked
     */
    public void setChecked(Boolean value) {
        setAttributeInternal(CHECKED, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CategoryId.
     * @return the CategoryId
     */
    public Number getCategoryId() {
        return (Number)getAttributeInternal(CATEGORYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CategoryId.
     * @param value value to set the  CategoryId
     */
    public void setCategoryId(Number value) {
        setAttributeInternal(CATEGORYID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CategoryName.
     * @return the CategoryName
     */
    public String getCategoryName() {
        return (String)getAttributeInternal(CATEGORYNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CategoryName.
     * @param value value to set the  CategoryName
     */
    public void setCategoryName(String value) {
        setAttributeInternal(CATEGORYNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Status.
     * @return the Status
     */
    public String getStatus() {
        return (String)getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Status.
     * @param value value to set the  Status
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ThumbnailUrl.
     * @return the ThumbnailUrl
     */
    public String getThumbnailUrl() {
        return (String)getAttributeInternal(THUMBNAILURL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ThumbnailUrl.
     * @param value value to set the  ThumbnailUrl
     */
    public void setThumbnailUrl(String value) {
        setAttributeInternal(THUMBNAILURL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CompCode.
     * @return the CompCode
     */
    public String getCompCode() {
        return (String) getAttributeInternal(COMPCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CompCode.
     * @param value value to set the  CompCode
     */
    public void setCompCode(String value) {
        setAttributeInternal(COMPCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CompName.
     * @return the CompName
     */
    public String getCompName() {
        return (String) getAttributeInternal(COMPNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CompName.
     * @param value value to set the  CompName
     */
    public void setCompName(String value) {
        setAttributeInternal(COMPNAME, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
