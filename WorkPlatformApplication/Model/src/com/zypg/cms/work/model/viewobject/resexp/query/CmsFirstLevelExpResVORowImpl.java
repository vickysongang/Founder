package com.zypg.cms.work.model.viewobject.resexp.query;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 20 18:00:51 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CmsFirstLevelExpResVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        ResTypeCode {
            public Object get(CmsFirstLevelExpResVORowImpl obj) {
                return obj.getResTypeCode();
            }

            public void put(CmsFirstLevelExpResVORowImpl obj, Object value) {
                obj.setResTypeCode((String)value);
            }
        }
        ,
        CategoryCode {
            public Object get(CmsFirstLevelExpResVORowImpl obj) {
                return obj.getCategoryCode();
            }

            public void put(CmsFirstLevelExpResVORowImpl obj, Object value) {
                obj.setCategoryCode((String)value);
            }
        }
        ,
        ResTypeName {
            public Object get(CmsFirstLevelExpResVORowImpl obj) {
                return obj.getResTypeName();
            }

            public void put(CmsFirstLevelExpResVORowImpl obj, Object value) {
                obj.setResTypeName((String)value);
            }
        }
        ,
        Seq2 {
            public Object get(CmsFirstLevelExpResVORowImpl obj) {
                return obj.getSeq2();
            }

            public void put(CmsFirstLevelExpResVORowImpl obj, Object value) {
                obj.setSeq2((Number)value);
            }
        }
        ,
        Checked {
            public Object get(CmsFirstLevelExpResVORowImpl obj) {
                return obj.getChecked();
            }

            public void put(CmsFirstLevelExpResVORowImpl obj, Object value) {
                obj.setChecked((Boolean)value);
            }
        }
        ,
        CmsSecondLevelExpResVO {
            public Object get(CmsFirstLevelExpResVORowImpl obj) {
                return obj.getCmsSecondLevelExpResVO();
            }

            public void put(CmsFirstLevelExpResVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CmsFirstLevelExpResVORowImpl object);

        public abstract void put(CmsFirstLevelExpResVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int RESTYPECODE = AttributesEnum.ResTypeCode.index();
    public static final int CATEGORYCODE = AttributesEnum.CategoryCode.index();
    public static final int RESTYPENAME = AttributesEnum.ResTypeName.index();
    public static final int SEQ2 = AttributesEnum.Seq2.index();
    public static final int CHECKED = AttributesEnum.Checked.index();
    public static final int CMSSECONDLEVELEXPRESVO = AttributesEnum.CmsSecondLevelExpResVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CmsFirstLevelExpResVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute ResTypeCode.
     * @return the ResTypeCode
     */
    public String getResTypeCode() {
        return (String) getAttributeInternal(RESTYPECODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ResTypeCode.
     * @param value value to set the  ResTypeCode
     */
    public void setResTypeCode(String value) {
        setAttributeInternal(RESTYPECODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CategoryCode.
     * @return the CategoryCode
     */
    public String getCategoryCode() {
        return (String) getAttributeInternal(CATEGORYCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CategoryCode.
     * @param value value to set the  CategoryCode
     */
    public void setCategoryCode(String value) {
        setAttributeInternal(CATEGORYCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ResTypeName.
     * @return the ResTypeName
     */
    public String getResTypeName() {
        return (String) getAttributeInternal(RESTYPENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ResTypeName.
     * @param value value to set the  ResTypeName
     */
    public void setResTypeName(String value) {
        setAttributeInternal(RESTYPENAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Seq2.
     * @return the Seq2
     */
    public Number getSeq2() {
        return (Number)getAttributeInternal(SEQ2);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Seq2.
     * @param value value to set the  Seq2
     */
    public void setSeq2(Number value) {
        setAttributeInternal(SEQ2, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Checked.
     * @return the Checked
     */
    public Boolean getChecked() {
        return (Boolean) getAttributeInternal(CHECKED) == null ? false : (Boolean) getAttributeInternal(CHECKED);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Checked.
     * @param value value to set the  Checked
     */
    public void setChecked(Boolean value) {
        RowIterator secondLevel =  this.getCmsSecondLevelExpResVO();
        if(value!=null && value){
                while(secondLevel.hasNext()){
                      Row rw = secondLevel.next();
                      rw.setAttribute("Checked", true);
                    }
        }else{
                 while(secondLevel.hasNext()){
                       Row rw = secondLevel.next();
                       rw.setAttribute("Checked", false);
                     }
             }
        setAttributeInternal(CHECKED, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link CmsSecondLevelExpResVO.
     */
    public RowIterator getCmsSecondLevelExpResVO() {
      RowIterator ri =  (RowIterator)getAttributeInternal(CMSSECONDLEVELEXPRESVO);
        ri.setRangeStart(0);
        return ri;
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
