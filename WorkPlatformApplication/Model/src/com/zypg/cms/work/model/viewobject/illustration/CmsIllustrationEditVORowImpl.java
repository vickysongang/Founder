package com.zypg.cms.work.model.viewobject.illustration;

import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 20 15:29:02 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CmsIllustrationEditVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        IllustrationType {
            public Object get(CmsIllustrationEditVORowImpl obj) {
                return obj.getIllustrationType();
            }

            public void put(CmsIllustrationEditVORowImpl obj, Object value) {
                obj.setIllustrationType((String)value);
            }
        }
        ,
        IllustrationAuthor {
            public Object get(CmsIllustrationEditVORowImpl obj) {
                return obj.getIllustrationAuthor();
            }

            public void put(CmsIllustrationEditVORowImpl obj, Object value) {
                obj.setIllustrationAuthor((String)value);
            }
        }
        ,
        IllustrationSource {
            public Object get(CmsIllustrationEditVORowImpl obj) {
                return obj.getIllustrationSource();
            }

            public void put(CmsIllustrationEditVORowImpl obj, Object value) {
                obj.setIllustrationSource((String)value);
            }
        }
        ,
        Keyword {
            public Object get(CmsIllustrationEditVORowImpl obj) {
                return obj.getKeyword();
            }

            public void put(CmsIllustrationEditVORowImpl obj, Object value) {
                obj.setKeyword((String)value);
            }
        }
        ,
        Remarks {
            public Object get(CmsIllustrationEditVORowImpl obj) {
                return obj.getRemarks();
            }

            public void put(CmsIllustrationEditVORowImpl obj, Object value) {
                obj.setRemarks((String)value);
            }
        }
        ,
        CategoryId {
            public Object get(CmsIllustrationEditVORowImpl obj) {
                return obj.getCategoryId();
            }

            public void put(CmsIllustrationEditVORowImpl obj, Object value) {
                obj.setCategoryId((Number)value);
            }
        }
        ,
        CategoryName {
            public Object get(CmsIllustrationEditVORowImpl obj) {
                return obj.getCategoryName();
            }

            public void put(CmsIllustrationEditVORowImpl obj, Object value) {
                obj.setCategoryName((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CmsIllustrationEditVORowImpl object);

        public abstract void put(CmsIllustrationEditVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ILLUSTRATIONTYPE = AttributesEnum.IllustrationType.index();
    public static final int ILLUSTRATIONAUTHOR = AttributesEnum.IllustrationAuthor.index();
    public static final int ILLUSTRATIONSOURCE = AttributesEnum.IllustrationSource.index();
    public static final int KEYWORD = AttributesEnum.Keyword.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();
    public static final int CATEGORYID = AttributesEnum.CategoryId.index();
    public static final int CATEGORYNAME = AttributesEnum.CategoryName.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CmsIllustrationEditVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute IllustrationType.
     * @return the IllustrationType
     */
    public String getIllustrationType() {
        return (String) getAttributeInternal(ILLUSTRATIONTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute IllustrationType.
     * @param value value to set the  IllustrationType
     */
    public void setIllustrationType(String value) {
        setAttributeInternal(ILLUSTRATIONTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute IllustrationAuthor.
     * @return the IllustrationAuthor
     */
    public String getIllustrationAuthor() {
        return (String) getAttributeInternal(ILLUSTRATIONAUTHOR);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute IllustrationAuthor.
     * @param value value to set the  IllustrationAuthor
     */
    public void setIllustrationAuthor(String value) {
        setAttributeInternal(ILLUSTRATIONAUTHOR, value);
    }

    /**
     * Gets the attribute value for the calculated attribute IllustrationSource.
     * @return the IllustrationSource
     */
    public String getIllustrationSource() {
        return (String) getAttributeInternal(ILLUSTRATIONSOURCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute IllustrationSource.
     * @param value value to set the  IllustrationSource
     */
    public void setIllustrationSource(String value) {
        setAttributeInternal(ILLUSTRATIONSOURCE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Keyword.
     * @return the Keyword
     */
    public String getKeyword() {
        return (String) getAttributeInternal(KEYWORD);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Keyword.
     * @param value value to set the  Keyword
     */
    public void setKeyword(String value) {
        setAttributeInternal(KEYWORD, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Remarks.
     * @return the Remarks
     */
    public String getRemarks() {
        return (String) getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Remarks.
     * @param value value to set the  Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CategoryId.
     * @return the CategoryId
     */
    public Number getCategoryId() {
        return (Number) getAttributeInternal(CATEGORYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CategoryId.
     * @param value value to set the  CategoryId
     */
    public void setCategoryId(Number value) {
        setAttributeInternal(CATEGORYID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CategoryName.
     * @return the CategoryName
     */
    public String getCategoryName() {
        return (String) getAttributeInternal(CATEGORYNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CategoryName.
     * @param value value to set the  CategoryName
     */
    public void setCategoryName(String value) {
        setAttributeInternal(CATEGORYNAME, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
