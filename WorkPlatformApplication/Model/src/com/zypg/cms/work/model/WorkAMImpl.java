package com.zypg.cms.work.model;


import com.honythink.applicationframework.hadf.CustomApplicationModuleImpl;

import com.zypg.cms.work.model.common.WorkAM;
import com.zypg.cms.work.model.viewobject.activity.query.CmsActivityVOImpl;
import com.zypg.cms.work.model.viewobject.attach.CmsAttachTVOImpl;
import com.zypg.cms.work.model.viewobject.audio.query.CmsAudioVOImpl;
import com.zypg.cms.work.model.viewobject.book.query.CmsBookVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocCategoryRelTVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocTVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocTVORowImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocUcmRelTVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocUcmRelTVORowImpl;
import com.zypg.cms.work.model.viewobject.common.lov.CmsLookupValueVOImpl;
import com.zypg.cms.work.model.viewobject.common.lov.CmsLookupValueVORowImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsBatchSyncLogMonitorVOImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsCategoryVOImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsChapterVOImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsCompVOImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsCompVORowImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsDocDisplayWayVOImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsDocDisplayWayVORowImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsDocStatusVOImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsDocStatusVORowImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsDocUcmRelVOImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsFirstLevelLibVOImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsFirstLevelLibVORowImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsGatherMonitorHVOImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsGatherMonitorLVOImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsLibVOImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsResAuthVOImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsResAuthVORowImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsSecondLevelLibVOImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsSecondLevelLibVORowImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsUserCompVOImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsUserCompVORowImpl;
import com.zypg.cms.work.model.viewobject.courseware.query.CmsCoursewareVOImpl;
import com.zypg.cms.work.model.viewobject.elecprod.query.CmsElecProdVOImpl;
import com.zypg.cms.work.model.viewobject.exif.CmsFigureExifInfoTVOImpl;
import com.zypg.cms.work.model.viewobject.illustration.query.CmsIllustrationVOImpl;
import com.zypg.cms.work.model.viewobject.material.query.CmsMaterialFigureVOImpl;
import com.zypg.cms.work.model.viewobject.newspaper.query.CmsNewspaperVOImpl;
import com.zypg.cms.work.model.viewobject.periodical.query.CmsPeriodicalVOImpl;
import com.zypg.cms.work.model.viewobject.photography.query.CmsPhotographyFigureVOImpl;
import com.zypg.cms.work.model.viewobject.relation.CmsDocRelTVOImpl;
import com.zypg.cms.work.model.viewobject.relation.CmsDocRelTVORowImpl;
import com.zypg.cms.work.model.viewobject.teachingplan.query.CmsTeachingPlanVOImpl;
import com.zypg.cms.work.model.viewobject.video.query.CmsVideoVOImpl;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import oracle.jbo.Row;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ComponentObjectImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowSetImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Apr 08 14:46:00 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class WorkAMImpl extends CustomApplicationModuleImpl implements WorkAM {
    /**
     * This is the default constructor (do not remove).
     */
    public WorkAMImpl() {
    }

    public void deleteChild(Object obj) {
        this.removeChild((ComponentObjectImpl)obj);
    }

    /****************************************库及分类相关***************************************************************/
    public String findUserComp() {
        CmsUserCompVOImpl userCompVO = this.getCmsUserCompVO();
        userCompVO.setbvUserId(this.getCustomDBTransaction().getUserId());
        userCompVO.executeQuery();
        CmsUserCompVORowImpl userCompRow = (CmsUserCompVORowImpl)userCompVO.first();
        if (userCompRow != null) {
            return userCompRow.getCompCode() + "," + userCompRow.getGroupFlag();
        }
        return null;
    }

    public String findCompByName(String compName) {
        CmsCompVOImpl compVO = this.getCmsCompVO();
        compVO.setbvCompName(compName);
        compVO.executeQuery();
        CmsCompVORowImpl compRow = (CmsCompVORowImpl)compVO.first();
        if (compRow != null) {
            return compRow.getCompCode() + "," + compRow.getGroupFlag();
        }
        return null;
    }

    public String getLibExsitFlag(String compCode) {
        CmsSecondLevelLibVOImpl vo = this.getCmsSecondLevelLibVO4Query();
        vo.setbvCompCode(compCode);
        vo.setbvUserId(this.getCustomDBTransaction().getUserId());
        vo.executeQuery();
        if (vo.getEstimatedRowCount() > 0) {
            return "Y";
        }
        return "N";
    }

    public String findFirstLevelLib(String compCode) {
        String result = "NOLIB";
        CmsFirstLevelLibVOImpl firstLevelLibVO = this.getCmsFirstLevelLibVO();
        firstLevelLibVO.setbvCompCode(compCode);
        firstLevelLibVO.setbvUserId(this.getCustomDBTransaction().getUserId());
        firstLevelLibVO.executeQuery();
        Row row = firstLevelLibVO.first();
        if (row != null) {
            CmsFirstLevelLibVORowImpl cmsFirstLevelLibVORow = (CmsFirstLevelLibVORowImpl)row;
            CmsSecondLevelLibVORowImpl cmsSecondLevelLibRow =
                (CmsSecondLevelLibVORowImpl)cmsFirstLevelLibVORow.getCmsSecondLevelLibVO().getRowAtRangeIndex(0);
            if (cmsSecondLevelLibRow != null) {
                result = cmsSecondLevelLibRow.getLibCode();
                this.findCategory(compCode, result, result, cmsSecondLevelLibRow.getLibTypeCode());
            }
        }
        return result;
    }

    public void findCategory(String compCode, String libCode, String libCode4Filter, String libTypeCode) {
        System.out.println("findCategory:" + "--->compCode:" + compCode + "  libCode:" + libCode +
                           "  libCode4Filter:" + libCode4Filter + "   libTypeCode:" + libTypeCode);
        CmsCategoryVOImpl categoryVO = this.getCmsCategoryVO();
        categoryVO.setbvCompCode(compCode);
        categoryVO.setbvLibCode(libCode);
        categoryVO.setbvLibCode4Filter(libCode4Filter);
        categoryVO.setbvLibTypeCode(libTypeCode);
        categoryVO.executeQuery();
    }

    public void findCategory4Pick(String compCode, String libCode, String libTypeCode) {
        System.out.println("findCategory4Pick:" + "--->compCode:" + compCode + "  libCode:" + libCode +
                           "   libTypeCode:" + libTypeCode);
        CmsCategoryVOImpl categoryVO = this.getCmsCategoryVO4Pick();
        categoryVO.setbvCompCode(compCode);
        categoryVO.setbvLibCode(libCode);
        categoryVO.setbvLibTypeCode(libTypeCode);
        categoryVO.executeQuery();
    }

    public boolean findExif(Number docId) {
        CmsFigureExifInfoTVOImpl tvo = this.getCmsFigureExifInfoTVO();
        Row[] rows = tvo.getFilteredRows("DocId", docId);
        if (rows.length > 0) {
            return true;
        }
        return false;
    }

    public String findLovTypeCodeByMeaning(String lookupTypeCode, String meaning) {
        CmsLookupValueVOImpl vo = (CmsLookupValueVOImpl)this.getCmsLookupValueVO4Query();
        vo.setbvLookupTypeCode(lookupTypeCode);
        vo.setbvMeaning(meaning);
        vo.executeQuery();
        Row firstRow = vo.first();
        if (firstRow != null) {
            CmsLookupValueVORowImpl row = (CmsLookupValueVORowImpl)firstRow;
            return row.getLookupValueCode();
        }
        return null;
    }

    public String findLovMeaingByLookupValueCode(String lookupTypeCode, String lookupValueCode) {
        CmsLookupValueVOImpl vo = (CmsLookupValueVOImpl)this.getCmsLookupValueVO4Query();
        Row[] rows =
            vo.getFilteredRows(new RowQualifier("LookupTypeCode ='" + lookupTypeCode + "' AND LookupValueCode ='" +
                                                lookupValueCode + "'"));
        if (rows.length > 0) {
            CmsLookupValueVORowImpl row = (CmsLookupValueVORowImpl)rows[0];
            return row.getMeaning();
        }
        return null;
    }

    /****************************************资源权限相关***************************************************************/
    public Map<String, String> filterResAuth(String libCode, String resTypeCode, String deleteFlag) {
        Map<String, String> resAuthMap = new HashMap<String, String>();
        CmsResAuthVOImpl resAuthVO = this.getCmsResAuthVO();
        resAuthVO.setbvUserId(this.getCustomDBTransaction().getUserId());
        resAuthVO.setbvLibCode(libCode);
        resAuthVO.setbvResTypeCode(resTypeCode);
        resAuthVO.setbvDeleteFlag(deleteFlag);
        resAuthVO.executeQuery();
        resAuthVO.setRangeSize(-1);
        for (Row row : resAuthVO.getAllRowsInRange()) {
            CmsResAuthVORowImpl resAuthRow = (CmsResAuthVORowImpl)row;
            resAuthMap.put(resAuthRow.getResCode(), resAuthRow.getMaxAuth());
        }
        return resAuthMap;
    }

    public String getDefaultStatusCode(String compCode, String libCode, Number categoryId, String categoryGroupType,
                                       String deleteFlag) {
        System.out.println("【进入work_router时初始化】compCode:" + compCode + "  libCode:" + libCode + "  categoryId:" +
                           categoryId + "  categoryGroupType:" + categoryGroupType + "  deleteFlag:" + deleteFlag);
        String statusCode = null;
        CmsDocStatusVOImpl docStatusVO = this.getCmsDocStatusVO();
        docStatusVO.setbvCompCode(compCode);
        docStatusVO.setbvLibCode(libCode);
        docStatusVO.setbvCategoryId(categoryId);
        docStatusVO.setbvCategoryGroupType(categoryGroupType);
        docStatusVO.setbvDeleteFlag(deleteFlag);
        docStatusVO.setbvSearchValue(null);
        docStatusVO.executeQuery();
        Row row = docStatusVO.first();
        if (row != null) {
            CmsDocStatusVORowImpl docStatusRow = (CmsDocStatusVORowImpl)row;
            statusCode = docStatusRow.getStatusCode();
        }
        return statusCode;
    }


    public String getSearchStatusCode(String libCode, Number categoryId, String categoryGroupType, String deleteFlag,
                                      String searchValue, String compCode) {
        String statusCode = null;
        CmsDocStatusVOImpl docStatusVO = this.getCmsDocStatusVO();
        docStatusVO.setbvLibCode(libCode);
        docStatusVO.setbvCategoryId(categoryId);
        docStatusVO.setbvCategoryGroupType(categoryGroupType);
        docStatusVO.setbvDeleteFlag(deleteFlag);
        docStatusVO.setbvSearchValue(searchValue);
        docStatusVO.setbvCompCode(compCode);
        docStatusVO.executeQuery();
        docStatusVO.setRangeSize(-1);
        for (Row r : docStatusVO.getAllRowsInRange()) {
            CmsDocStatusVORowImpl docStatusRow = (CmsDocStatusVORowImpl)r;
            String displayName = docStatusRow.getStatusDisplayName();
            Integer count =
                Integer.valueOf(displayName.substring(displayName.lastIndexOf("(") + 1, displayName.lastIndexOf(")")));
            if (count > 0) {
                statusCode = docStatusRow.getStatusCode();
                break;
            }
        }
        return statusCode;
    }

    public String findNextStatusCode(String statusCode) {
        CmsDocStatusVOImpl docStatusVO = this.getCmsDocStatusVO();
        Row[] rows = docStatusVO.getFilteredRows("StatusCode", statusCode);
        if (rows.length > 0) {
            Row[] r = docStatusVO.getFilteredRows("Seq", ((Number)rows[0].getAttribute("Seq")).intValue() + 10);
            if (r.length > 0) {
                return (String)r[0].getAttribute("StatusCode");
            }
        }
        return null;
    }

    public String findPreStatusCode(String statusCode) {
        CmsDocStatusVOImpl docStatusVO = this.getCmsDocStatusVO();
        Row[] rows = docStatusVO.getFilteredRows("StatusCode", statusCode);
        if (rows.length > 0) {
            Row[] r = docStatusVO.getFilteredRows("Seq", ((Number)rows[0].getAttribute("Seq")).intValue() - 10);
            if (r.length > 0) {
                return (String)r[0].getAttribute("StatusCode");
            }
        }
        return null;
    }

    public String findSpecificStatusCode(String libCode) {
        CmsDocStatusVOImpl docStatusVO = this.getCmsDocStatusVO4Query();
        docStatusVO.setApplyViewCriteriaName("findDocStatusByCodeVC");
        docStatusVO.setbvLibCode(libCode);
        docStatusVO.executeQuery();
        Row row = docStatusVO.first();
        if (row != null) {
            return (String)row.getAttribute("StatusCode");
        }
        return null;
    }

    public String getDefaultDocDisplayWay(String libCode) {
        CmsDocDisplayWayVOImpl displayWayVO = this.getCmsDocDisplayWayVO();
        displayWayVO.setbvLibCode(libCode);
        displayWayVO.executeQuery();
        CmsDocDisplayWayVORowImpl docStatusRow = (CmsDocDisplayWayVORowImpl)displayWayVO.first();
        if (docStatusRow == null) {
            return null;
        }
        return docStatusRow.getStatusCode();
    }

    public void destroyDoc(List<Number> list) {
        for (Iterator it = list.iterator(); it.hasNext(); ) {
            Number docId = (Number)it.next();
            destroyDocCall(docId);
        }
    }

    public void preMgmtAttachTable(Number sourceDocId) {
        CmsAttachTVOImpl tvo = this.getCmsAttachTVO();
        tvo.setbvScourceDocId(sourceDocId);
        tvo.executeQuery();
    }

    /****************************************公用方法**************************************************************/
    public String getCompNameByCode(String compCode) {
        CmsCompVOImpl compVO = this.getCmsCompVO4Query();
        compVO.setbvCompCode(compCode);
        compVO.executeQuery();
        Row row = compVO.first();
        if (row != null) {
            return (String)row.getAttribute("CompName");
        }
        return null;
    }

    public String getLibNameByCode(String libCode) {
        CmsLibVOImpl libVO = this.getCmsLibVO4Query();
        libVO.setbvLibCode(libCode);
        libVO.executeQuery();
        Row row = libVO.first();
        if (row != null) {
            return (String)row.getAttribute("LibName");
        }
        return null;
    }

    public String getLibIdByCode(String libCode) {
        CmsLibVOImpl libVO = this.getCmsLibVO4Query();
        libVO.setbvLibCode(libCode);
        libVO.executeQuery();
        Row row = libVO.first();
        if (row != null) {
            return "" + row.getAttribute("LibId");
        }
        return null;
    }

    public String getDocNameByDocId(Number docId) {
        CallableStatement st = null;
        String result = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin ? := cms_work_platform_pkg.get_docname_by_doc_id(?); end;",
                                                 this.getDBTransaction().DEFAULT);
            st.registerOutParameter(1, Types.VARCHAR);
            st.setObject(2, docId);
            st.executeUpdate();
            result = (String)st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public String getLibCodeByDocId(Number docId) {
        CallableStatement st = null;
        String result = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin ? := cms_work_platform_pkg.get_libcode_by_doc_id(?); end;",
                                                 this.getDBTransaction().DEFAULT);
            st.registerOutParameter(1, Types.VARCHAR);
            st.setObject(2, docId);
            st.executeUpdate();
            result = (String)st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public String getThumbnailUrl(Number docId) {
        CallableStatement st = null;
        String result = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin ? := cms_common_pkg.get_thumbnail_url(?); end;",
                                                 this.getDBTransaction().DEFAULT);
            st.registerOutParameter(1, Types.VARCHAR);
            st.setObject(2, docId);
            st.executeUpdate();
            result = (String)st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public String getPreviewUrl(Number docId) {
        CallableStatement st = null;
        String result = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin ? := cms_common_pkg.get_preview_url(?); end;", this.getDBTransaction().DEFAULT);
            st.registerOutParameter(1, Types.VARCHAR);
            st.setObject(2, docId);
            st.executeUpdate();
            result = (String)st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public Map<String, List<Number>> getDocRelRowsByRelType(Number parentDocId) {
        Map<String, List<Number>> map = new HashMap<String, List<Number>>();
        CmsDocRelTVOImpl relVO = this.getCmsDocRelTVO4View();
        relVO.setbvParentDocId(parentDocId);
        relVO.executeQuery();
        relVO.setRangeSize(-1);
        List<Number> bookList = new ArrayList<Number>();
        List<Number> elecProdList = new ArrayList<Number>();
        List<Number> periodicalList = new ArrayList<Number>();
        List<Number> newspaperList = new ArrayList<Number>();
        List<Number> teachingPlanList = new ArrayList<Number>();
        List<Number> coursewareList = new ArrayList<Number>();
        List<Number> audioList = new ArrayList<Number>();
        List<Number> videoList = new ArrayList<Number>();
        List<Number> illustrationList = new ArrayList<Number>();
        List<Number> materialList = new ArrayList<Number>();
        List<Number> photographyList = new ArrayList<Number>();
        List<Number> worksEntryList = new ArrayList<Number>();
        List<Number> encyclopediasEntryList = new ArrayList<Number>();
        for (Row r : relVO.getAllRowsInRange()) {
            CmsDocRelTVORowImpl row = (CmsDocRelTVORowImpl)r;
            String libCode = this.getLibCodeByDocId(row.getDocId());
            if ("BOOK".equals(libCode)) {
                bookList.add(row.getDocId());
            } else if ("ELEC_PROD".equals(libCode)) {
                elecProdList.add(row.getDocId());
            } else if ("PERIODICAL".equals(libCode)) {
                periodicalList.add(row.getDocId());
            } else if ("NEWSPAPER".equals(libCode)) {
                newspaperList.add(row.getDocId());
            } else if ("TEACHING_PLAN".equals(libCode)) {
                teachingPlanList.add(row.getDocId());
            } else if ("COURSEWARE".equals(libCode)) {
                coursewareList.add(row.getDocId());
            } else if ("AUDIO".equals(libCode)) {
                audioList.add(row.getDocId());
            } else if ("VIDEO".equals(libCode)) {
                videoList.add(row.getDocId());
            } else if ("ILLUSTRATION".equals(libCode)) {
                illustrationList.add(row.getDocId());
            } else if ("MATERIAL_FIGURE".equals(libCode)) {
                materialList.add(row.getDocId());
            } else if ("PHOTOGRAPHY_FIGURE".equals(libCode)) {
                photographyList.add(row.getDocId());
            } else if ("WORKS_ENTRY".equals(libCode)) {
                worksEntryList.add(row.getDocId());
            } else if ("ENCYCLOPEDIAS_ENTRY".equals(libCode)) {
                encyclopediasEntryList.add(row.getDocId());
            }
        }
        map.put("bookList", bookList);
        map.put("elecProdList", elecProdList);
        map.put("periodicalList", periodicalList);
        map.put("newspaperList", newspaperList);
        map.put("teachingPlanList", teachingPlanList);
        map.put("coursewareList", coursewareList);
        map.put("audioList", audioList);
        map.put("videoList", videoList);
        map.put("illustrationList", illustrationList);
        map.put("materialList", materialList);
        map.put("photographyList", photographyList);
        map.put("worksEntryList", worksEntryList);
        map.put("encyclopediasEntryList", encyclopediasEntryList);
        return map;
    }

    public List<Row> getUCMFileByDocId(Number docId) {
        List<Row> list = new ArrayList<Row>();
        CmsDocUcmRelVOImpl ucmRelVO = this.getCmsDocUcmRelVO4Query();
        ucmRelVO.setbvDocIdStr(docId.toString());
        ucmRelVO.executeQuery();
        ucmRelVO.setRangeSize(-1);
        for (Row row : ucmRelVO.getAllRowsInRange()) {
            list.add(row);
        }
        return list;
    }

    public Map<String, String> getUcmDidByDocIdAndDocType(Number docId) {
        Map<String, String> map = new HashMap<String, String>();
        CmsDocUcmRelTVOImpl ucmRelVO = this.getCmsDocUcmRelTVO4View();
        Number ucmDid = null;
        Row[] rows = ucmRelVO.getFilteredRows(new RowQualifier("DocId = " + docId + " and docType = 'COVER'"));
        if (rows.length > 0) {
            CmsDocUcmRelTVORowImpl row = (CmsDocUcmRelTVORowImpl)rows[0];
            ucmDid = row.getUcmDid();
            map.put("ucmDid", row.getUcmDid() == null ? null : row.getUcmDid().toString());
            map.put("attribute15", row.getAttribute15());
        }
        return map;
    }

    public Map<String, String> getUcmDidByDocId(Number docId) {
        Map<String, String> map = new HashMap<String, String>();
        CmsDocUcmRelTVOImpl ucmRelVO = this.getCmsDocUcmRelTVO4View();
        Row[] rows = ucmRelVO.getFilteredRows(new RowQualifier("DocId = " + docId));
        if (rows.length > 0) {
            CmsDocUcmRelTVORowImpl row = (CmsDocUcmRelTVORowImpl)rows[0];
            map.put("ucmDid", row.getUcmDid() == null ? null : row.getUcmDid().toString());
            map.put("attribute15", row.getAttribute15());
        }
        return map;
    }


    /**
     *
     * @param docId
     * @return
     */
    public Map<String, String> destroyDocCall(Number docId) {
        Map<String, String> map = new HashMap<String, String>();
        CallableStatement st = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin cms_work_platform_pkg.destroy_doc(?,?,?); end;",
                                                 this.getDBTransaction().DEFAULT);
            st.setObject(1, docId);
            st.registerOutParameter(2, Types.VARCHAR);
            st.registerOutParameter(3, Types.VARCHAR);
            st.executeUpdate();
            map.put("x_return_code", (String)st.getObject(2));
            map.put("x_return_msg", (String)st.getObject(3));
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return map;
    }

    /**
     * 获取树上每个节点的路径
     * @param libCode
     * @return
     */
    public String getCategoryTreeNodePath(String compCode, String libCode) {
        String result = null;
        CallableStatement st = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin ? := cms_work_platform_pkg.get_category_tree_node_path(?,?); end;",
                                                 this.getDBTransaction().DEFAULT);
            st.registerOutParameter(1, Types.VARCHAR);
            st.setObject(2, compCode);
            st.setObject(3, libCode);
            st.execute();
            result = (String)st.getObject(1);
        } catch (SQLException e) {
            result = null;
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public Number initGatherMonitorHVO(String docIds) {
        System.out.println("docIds:" + docIds);
        CmsGatherMonitorHVOImpl gatherMonitorHVO = this.getCmsGatherMonitorHVO();
        gatherMonitorHVO.setbvDocIds(docIds);
        gatherMonitorHVO.executeQuery();
        Row row = gatherMonitorHVO.first();
        if (row != null) {
            return (Number)row.getAttribute("DocId");
        }
        return null;
    }

    public void initGatherMonitorLVO(Number docId, String code) {
        CmsGatherMonitorLVOImpl gatherMonitorLVO = this.getCmsGatherMonitorLVO();
        gatherMonitorLVO.setWhereClause(null);
        if ("PROCESSING".equals(code)) {
            gatherMonitorLVO.addWhereClause("RESULT IS NULL and Doc_Id = " + docId);
        } else if ("FAIL".equals(code)) {
            gatherMonitorLVO.addWhereClause("(RESULT = 'FAIL' or thumbnail_result = 'FAIL') and Doc_Id = " + docId);
        } else if ("SUCCESS".equals(code)) {
            gatherMonitorLVO.addWhereClause("RESULT <> 'FAIL' and thumbnail_result <> 'FAIL' and RESULT is not null and Doc_Id = " +
                                            docId);
        }
        gatherMonitorLVO.executeQuery();
    }

    public Map<String, String> getGatherMonitorCount(Number docId) {
        Map<String, String> map = new HashMap<String, String>();
        CallableStatement st = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin cms_common_pkg.get_gather_monitor_count(?,?,?,?); end;",
                                                 this.getDBTransaction().DEFAULT);
            st.setObject(1, docId);
            st.registerOutParameter(2, Types.VARCHAR);
            st.registerOutParameter(3, Types.VARCHAR);
            st.registerOutParameter(4, Types.VARCHAR);
            st.executeUpdate();
            map.put("successCount", (String)st.getObject(2));
            map.put("failCount", (String)st.getObject(3));
            map.put("processingCount", (String)st.getObject(4));
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return map;
    }

    public void initBatchSyncLog(String compCode, String libCode, String code) {
        CmsBatchSyncLogMonitorVOImpl batchSycnLogVO = this.getCmsBatchSyncLogMonitorVO();
        batchSycnLogVO.setWhereClause(null);
        String sql =
            " and attribute1 = '" + this.getCustomDBTransaction().getUserName().toUpperCase() + "' and attribute2 = '" +
            compCode + "' and attribute3 = '" + libCode + "'";
        if ("PROCESSING".equals(code)) {
            batchSycnLogVO.addWhereClause("RESULT IS NULL" + sql);
        } else if ("FAIL".equals(code)) {
            batchSycnLogVO.addWhereClause("(RESULT = 'FAIL' or thumbnail_result = 'FAIL')" + sql);
        } else if ("SUCCESS".equals(code)) {
            batchSycnLogVO.addWhereClause("RESULT <> 'FAIL' and thumbnail_result <> 'FAIL' and RESULT is not null" +
                                          sql);
        }
        batchSycnLogVO.executeQuery();
    }

    public Map<String, String> getBatchGatherMonitorCount(String compCode, String libCode) {
        Map<String, String> map = new HashMap<String, String>();
        CallableStatement st = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin cms_common_pkg.get_batch_gather_monitor_count(?,?,?,?,?,?); end;",
                                                 this.getDBTransaction().DEFAULT);
            st.setObject(1, compCode);
            st.setObject(2, libCode);
            st.setObject(3, this.getCustomDBTransaction().getUserName().toUpperCase());
            st.registerOutParameter(4, Types.VARCHAR);
            st.registerOutParameter(5, Types.VARCHAR);
            st.registerOutParameter(6, Types.VARCHAR);
            st.executeUpdate();
            map.put("successCount", (String)st.getObject(4));
            map.put("failCount", (String)st.getObject(5));
            map.put("processingCount", (String)st.getObject(6));
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return map;
    }

    /**
     * 创建导出日志
     * @param docId
     * @param exportType
     */
    public void createExportLog(String docId, String exportType) {
        CallableStatement st = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin cms_work_platform_pkg.create_export_log(?,?,?); end;",
                                                 this.getDBTransaction().DEFAULT);
            st.setObject(1, docId);
            st.setObject(2, exportType);
            st.setObject(3, this.getCustomDBTransaction().getUserId());
            st.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }


    /**
     * 将对象设置到session中
     * @param key
     * @param value
     */
    public void putValueToSession(String key, Object value) {
        this.getDBTransaction().getSession().getUserData().put(key, value);
    }

    public void putStringToSession(String key, String value) {
        putValueToSession(key, value);
    }

    public Object getValueFromSession(String key) {
        return this.getDBTransaction().getSession().getUserData().get(key);
    }

    /**
     * Container's getter for CmsFirstLevelLibVO.
     * @return CmsFirstLevelLibVO
     */
    public CmsFirstLevelLibVOImpl getCmsFirstLevelLibVO() {
        return (CmsFirstLevelLibVOImpl)findViewObject("CmsFirstLevelLibVO");
    }


    /**
     * Container's getter for CmsCategoryVO1.
     * @return CmsCategoryVO1
     */
    public CmsCategoryVOImpl getCmsCategoryVO() {
        return (CmsCategoryVOImpl)findViewObject("CmsCategoryVO");
    }


    /**
     * Container's getter for CmsUserCompVO1.
     * @return CmsUserCompVO1
     */
    public CmsUserCompVOImpl getCmsUserCompVO() {
        return (CmsUserCompVOImpl)findViewObject("CmsUserCompVO");
    }


    /**
     * Container's getter for CmsDocTVO1.
     * @return CmsDocTVO1
     */
    public CmsDocTVOImpl getCmsDocTVO() {
        return (CmsDocTVOImpl)findViewObject("CmsDocTVO");
    }

    /**
     * Container's getter for CmsCompVO1.
     * @return CmsCompVO1
     */
    public CmsCompVOImpl getCmsCompVO() {
        return (CmsCompVOImpl)findViewObject("CmsCompVO");
    }


    /**
     * Container's getter for CmsDocStatusVO1.
     * @return CmsDocStatusVO1
     */
    public CmsDocStatusVOImpl getCmsDocStatusVO() {
        return (CmsDocStatusVOImpl)findViewObject("CmsDocStatusVO");
    }


    /**
     * Container's getter for CmsResAuthVO1.
     * @return CmsResAuthVO1
     */
    public CmsResAuthVOImpl getCmsResAuthVO() {
        return (CmsResAuthVOImpl)findViewObject("CmsResAuthVO");
    }

    /**
     * Container's getter for CmsDocDisplayWayVO.
     * @return CmsDocDisplayWayVO
     */
    public CmsDocDisplayWayVOImpl getCmsDocDisplayWayVO() {
        return (CmsDocDisplayWayVOImpl)findViewObject("CmsDocDisplayWayVO");
    }

    /**
     * Container's getter for CmsDocCategoryRelTVO1.
     * @return CmsDocCategoryRelTVO1
     */
    public CmsDocCategoryRelTVOImpl getCmsDocCategoryRelTVO() {
        return (CmsDocCategoryRelTVOImpl)findViewObject("CmsDocCategoryRelTVO");
    }

    /**
     * Container's getter for CmsCategoryVO1.
     * @return CmsCategoryVO1
     */
    public CmsCategoryVOImpl getCmsCategoryVO4Pick() {
        return (CmsCategoryVOImpl)findViewObject("CmsCategoryVO4Pick");
    }


    /**
     * Container's getter for CmsCategoryVO1.
     * @return CmsCategoryVO1
     */
    public CmsCategoryVOImpl getCmsChildCategoryVO() {
        return (CmsCategoryVOImpl)findViewObject("CmsChildCategoryVO");
    }

    /**
     * Container's getter for CmsCategoryVL1.
     * @return CmsCategoryVL1
     */
    public ViewLinkImpl getCmsCategoryVL1() {
        return (ViewLinkImpl)findViewLink("CmsCategoryVL1");
    }

    /**
     * Container's getter for CmsCategoryVO2.
     * @return CmsCategoryVO2
     */
    public CmsCategoryVOImpl getCmsChildCategoryVO4Pick() {
        return (CmsCategoryVOImpl)findViewObject("CmsChildCategoryVO4Pick");
    }

    /**
     * Container's getter for CmsCategoryVL2.
     * @return CmsCategoryVL2
     */
    public ViewLinkImpl getCmsCategoryVL2() {
        return (ViewLinkImpl)findViewLink("CmsCategoryVL2");
    }

    /**
     * Container's getter for AudioAM.
     * @return AudioAM
     */
    public ApplicationModuleImpl getAudioAM() {
        return (ApplicationModuleImpl)findApplicationModule("AudioAM");
    }

    /**
     * Container's getter for BookAM.
     * @return BookAM
     */
    public ApplicationModuleImpl getBookAM() {
        return (ApplicationModuleImpl)findApplicationModule("BookAM");
    }

    /**
     * Container's getter for ElecProdAM.
     * @return ElecProdAM
     */
    public ApplicationModuleImpl getElecProdAM() {
        return (ApplicationModuleImpl)findApplicationModule("ElecProdAM");
    }

    /**
     * Container's getter for VideoAM1.
     * @return VideoAM1
     */
    public ApplicationModuleImpl getVideoAM() {
        return (ApplicationModuleImpl)findApplicationModule("VideoAM");
    }

    /**
     * Container's getter for MaterialFigureAM.
     * @return MaterialFigureAM
     */
    public ApplicationModuleImpl getMaterialFigureAM() {
        return (ApplicationModuleImpl)findApplicationModule("MaterialFigureAM");
    }

    /**
     * Container's getter for PhotographyFigureAM.
     * @return PhotographyFigureAM
     */
    public ApplicationModuleImpl getPhotographyFigureAM() {
        return (ApplicationModuleImpl)findApplicationModule("PhotographyFigureAM");
    }

    /**
     * Container's getter for ActivityAM.
     * @return ActivityAM
     */
    public ApplicationModuleImpl getActivityAM() {
        return (ApplicationModuleImpl)findApplicationModule("ActivityAM");
    }

    /**
     * Container's getter for CoursewareAM.
     * @return CoursewareAM
     */
    public ApplicationModuleImpl getCoursewareAM() {
        return (ApplicationModuleImpl)findApplicationModule("CoursewareAM");
    }

    /**
     * Container's getter for IllustrationAM.
     * @return IllustrationAM
     */
    public ApplicationModuleImpl getIllustrationAM() {
        return (ApplicationModuleImpl)findApplicationModule("IllustrationAM");
    }

    /**
     * Container's getter for TeachingPlanAM.
     * @return TeachingPlanAM
     */
    public ApplicationModuleImpl getTeachingPlanAM() {
        return (ApplicationModuleImpl)findApplicationModule("TeachingPlanAM");
    }

    /**
     * Container's getter for CmsCompVO4Query.
     * @return CmsCompVO4Query
     */
    public CmsCompVOImpl getCmsCompVO4Query() {
        return (CmsCompVOImpl)findViewObject("CmsCompVO4Query");
    }

    /**
     * Container's getter for CmsActivityVO4Query.
     * @return CmsActivityVO4Query
     */
    public CmsActivityVOImpl getCmsActivityVO4Query() {
        return (CmsActivityVOImpl)findViewObject("CmsActivityVO4Query");
    }

    /**
     * Container's getter for CmsAudioVO4Query.
     * @return CmsAudioVO4Query
     */
    public CmsAudioVOImpl getCmsAudioVO4Query() {
        return (CmsAudioVOImpl)findViewObject("CmsAudioVO4Query");
    }

    /**
     * Container's getter for CmsBookVO4Query.
     * @return CmsBookVO4Query
     */
    public CmsBookVOImpl getCmsBookVO4Query() {
        return (CmsBookVOImpl)findViewObject("CmsBookVO4Query");
    }

    /**
     * Container's getter for CmsCoursewareVO4Query.
     * @return CmsCoursewareVO4Query
     */
    public CmsCoursewareVOImpl getCmsCoursewareVO4Query() {
        return (CmsCoursewareVOImpl)findViewObject("CmsCoursewareVO4Query");
    }

    /**
     * Container's getter for CmsElecProdVO4Query.
     * @return CmsElecProdVO4Query
     */
    public CmsElecProdVOImpl getCmsElecProdVO4Query() {
        return (CmsElecProdVOImpl)findViewObject("CmsElecProdVO4Query");
    }

    /**
     * Container's getter for CmsIllustrationVO4Query.
     * @return CmsIllustrationVO4Query
     */
    public CmsIllustrationVOImpl getCmsIllustrationVO4Query() {
        return (CmsIllustrationVOImpl)findViewObject("CmsIllustrationVO4Query");
    }

    /**
     * Container's getter for CmsMaterialFigureVO4Query.
     * @return CmsMaterialFigureVO4Query
     */
    public CmsMaterialFigureVOImpl getCmsMaterialFigureVO4Query() {
        return (CmsMaterialFigureVOImpl)findViewObject("CmsMaterialFigureVO4Query");
    }

    /**
     * Container's getter for CmsPhotographyFigureVO4Query.
     * @return CmsPhotographyFigureVO4Query
     */
    public CmsPhotographyFigureVOImpl getCmsPhotographyFigureVO4Query() {
        return (CmsPhotographyFigureVOImpl)findViewObject("CmsPhotographyFigureVO4Query");
    }

    /**
     * Container's getter for CmsTeachingPlanVO4Query.
     * @return CmsTeachingPlanVO4Query
     */
    public CmsTeachingPlanVOImpl getCmsTeachingPlanVO4Query() {
        return (CmsTeachingPlanVOImpl)findViewObject("CmsTeachingPlanVO4Query");
    }

    /**
     * Container's getter for CmsVideoVO4Query.
     * @return CmsVideoVO4Query
     */
    public CmsVideoVOImpl getCmsVideoVO4Query() {
        return (CmsVideoVOImpl)findViewObject("CmsVideoVO4Query");
    }


    /**
     * Container's getter for LogAM.
     * @return LogAM
     */
    public ApplicationModuleImpl getLogAM() {
        return (ApplicationModuleImpl)findApplicationModule("LogAM");
    }

    /**
     * Container's getter for CmsLibVO4Query.
     * @return CmsLibVO4Query
     */
    public CmsLibVOImpl getCmsLibVO4Query() {
        return (CmsLibVOImpl)findViewObject("CmsLibVO4Query");
    }

    /**
     * Container's getter for CmsDocUcmRelVO4Query.
     * @return CmsDocUcmRelVO4Query
     */
    public CmsDocUcmRelVOImpl getCmsDocUcmRelVO4Query() {
        return (CmsDocUcmRelVOImpl)findViewObject("CmsDocUcmRelVO4Query");
    }


    /**
     * Container's getter for AttachAM.
     * @return AttachAM
     */
    public ApplicationModuleImpl getAttachAM() {
        return (ApplicationModuleImpl)findApplicationModule("AttachAM");
    }

    /**
     * Container's getter for PeriodicalAM.
     * @return PeriodicalAM
     */
    public ApplicationModuleImpl getPeriodicalAM() {
        return (ApplicationModuleImpl)findApplicationModule("PeriodicalAM");
    }

    /**
     * Container's getter for FigureGroupAM.
     * @return FigureGroupAM
     */
    public ApplicationModuleImpl getFigureGroupAM() {
        return (ApplicationModuleImpl)findApplicationModule("FigureGroupAM");
    }

    /**
     * Container's getter for CmsChapterVO1.
     * @return CmsChapterVO1
     */
    public CmsChapterVOImpl getCmsChapterVO() {
        return (CmsChapterVOImpl)findViewObject("CmsChapterVO");
    }


    /**
     * Container's getter for RelationAM.
     * @return RelationAM
     */
    public ApplicationModuleImpl getRelationAM() {
        return (ApplicationModuleImpl)findApplicationModule("RelationAM");
    }

    /**
     * Container's getter for DocBookAM1.
     * @return DocBookAM1
     */
    public ApplicationModuleImpl getDocBookAM() {
        return (ApplicationModuleImpl)findApplicationModule("DocBookAM");
    }

    /**
     * Container's getter for ResExpAM1.
     * @return ResExpAM1
     */
    public ApplicationModuleImpl getResExpAM() {
        return (ApplicationModuleImpl)findApplicationModule("ResExpAM");
    }


    /**
     * Container's getter for CmsDocRelTVO4View.
     * @return CmsDocRelTVO4View
     */
    public CmsDocRelTVOImpl getCmsDocRelTVO4View() {
        return (CmsDocRelTVOImpl)findViewObject("CmsDocRelTVO4View");
    }

    /**
     * Container's getter for CmsDocTVO4View.
     * @return CmsDocTVO4View
     */
    public CmsDocTVOImpl getCmsDocTVO4View() {
        return (CmsDocTVOImpl)findViewObject("CmsDocTVO4View");
    }

    /**
     * Container's getter for NewspaperAM.
     * @return NewspaperAM
     */
    public ApplicationModuleImpl getNewspaperAM() {
        return (ApplicationModuleImpl)findApplicationModule("NewspaperAM");
    }

    /**
     * Container's getter for CmsFigureExifInfoTVO.
     * @return CmsFigureExifInfoTVO
     */
    public CmsFigureExifInfoTVOImpl getCmsFigureExifInfoTVO() {
        return (CmsFigureExifInfoTVOImpl)findViewObject("CmsFigureExifInfoTVO");
    }

    /**
     * Container's getter for CopyrightAM.
     * @return CopyrightAM
     */
    public ApplicationModuleImpl getCopyrightAM() {
        return (ApplicationModuleImpl)findApplicationModule("CopyrightAM");
    }

    /**
     * Container's getter for CmsLookupValueVO.
     * @return CmsLookupValueVO
     */
    public ViewObjectImpl getCmsLookupValueVO4Query() {
        return (ViewObjectImpl)findViewObject("CmsLookupValueVO4Query");
    }

    /**
     * Container's getter for CmsAttachTVO.
     * @return CmsAttachTVO
     */
    public CmsAttachTVOImpl getCmsAttachTVO() {
        return (CmsAttachTVOImpl)findViewObject("CmsAttachTVO");
    }

    /**
     * Container's getter for CmsDocUcmRelTVO.
     * @return CmsDocUcmRelTVO
     */
    public CmsDocUcmRelTVOImpl getCmsDocUcmRelTVO() {
        return (CmsDocUcmRelTVOImpl)findViewObject("CmsDocUcmRelTVO");
    }

    /**
     * Container's getter for CmsGatherMonitorVO1.
     * @return CmsGatherMonitorVO1
     */
    public CmsGatherMonitorHVOImpl getCmsGatherMonitorHVO() {
        return (CmsGatherMonitorHVOImpl)findViewObject("CmsGatherMonitorHVO");
    }


    /**
     * Container's getter for CommonAM.
     * @return CommonAM
     */
    public ApplicationModuleImpl getCommonAM() {
        return (ApplicationModuleImpl)findApplicationModule("CommonAM");
    }

    /**
     * Container's getter for CmsDocStatusVO4Query.
     * @return CmsDocStatusVO4Query
     */
    public CmsDocStatusVOImpl getCmsDocStatusVO4Query() {
        return (CmsDocStatusVOImpl)findViewObject("CmsDocStatusVO4Query");
    }

    /**
     * Container's getter for CmsDocTVO4Edit.
     * @return CmsDocTVO4Edit
     */
    public CmsDocTVOImpl getCmsDocTVO4Edit() {
        return (CmsDocTVOImpl)findViewObject("CmsDocTVO4Edit");
    }

    /**
     * Container's getter for CmsDocUcmRelTVO4View.
     * @return CmsDocUcmRelTVO4View
     */
    public CmsDocUcmRelTVOImpl getCmsDocUcmRelTVO4View() {
        return (CmsDocUcmRelTVOImpl)findViewObject("CmsDocUcmRelTVO4View");
    }

    /**
     * Container's getter for CmsPeriodicalVO1.
     * @return CmsPeriodicalVO1
     */
    public CmsPeriodicalVOImpl getCmsPeriodicalVO4Query() {
        return (CmsPeriodicalVOImpl)findViewObject("CmsPeriodicalVO4Query");
    }

    /**
     * Container's getter for CmsNewspaperVO1.
     * @return CmsNewspaperVO1
     */
    public CmsNewspaperVOImpl getCmsNewspaperVO4Query() {
        return (CmsNewspaperVOImpl)findViewObject("CmsNewspaperVO4Query");
    }

    /**
     * Container's getter for CmsDocTVO4Query.
     * @return CmsDocTVO4Query
     */
    public CmsDocTVOImpl getCmsDocTVO4Query() {
        return (CmsDocTVOImpl)findViewObject("CmsDocTVO4Query");
    }

    /**
     * Container's getter for CmsBatchSyncLogMonitorVO.
     * @return CmsBatchSyncLogMonitorVO
     */
    public CmsBatchSyncLogMonitorVOImpl getCmsBatchSyncLogMonitorVO() {
        return (CmsBatchSyncLogMonitorVOImpl)findViewObject("CmsBatchSyncLogMonitorVO");
    }

    /**
     * Container's getter for EntryAM.
     * @return EntryAM
     */
    public ApplicationModuleImpl getEntryAM() {
        return (ApplicationModuleImpl)findApplicationModule("EntryAM");
    }

    /**
     * Container's getter for OfflineAM.
     * @return OfflineAM
     */
    public ApplicationModuleImpl getOfflineAM() {
        return (ApplicationModuleImpl)findApplicationModule("OfflineAM");
    }

    /**
     * Container's getter for ThemeAM.
     * @return ThemeAM
     */
    public ApplicationModuleImpl getThemeAM() {
        return (ApplicationModuleImpl)findApplicationModule("ThemeAM");
    }

    /**
     * Container's getter for CmsGatherMonitorLVO.
     * @return CmsGatherMonitorLVO
     */
    public CmsGatherMonitorLVOImpl getCmsGatherMonitorLVO() {
        return (CmsGatherMonitorLVOImpl)findViewObject("CmsGatherMonitorLVO");
    }

    /**
     * Container's getter for CmsDocUcmRelTVO4MoreFiles.
     * @return CmsDocUcmRelTVO4MoreFiles
     */
    public CmsDocUcmRelTVOImpl getCmsDocUcmRelTVO4MoreFiles() {
        return (CmsDocUcmRelTVOImpl)findViewObject("CmsDocUcmRelTVO4MoreFiles");
    }

    /**
     * Container's getter for CmsExportReasonLov.
     * @return CmsExportReasonLov
     */
    public CmsLookupValueVOImpl getCmsExportReasonLov() {
        return (CmsLookupValueVOImpl)findViewObject("CmsExportReasonLov");
    }

    /**
     * Container's getter for ExtendAttrAM.
     * @return ExtendAttrAM
     */
    public ApplicationModuleImpl getExtendAttrAM() {
        return (ApplicationModuleImpl)findApplicationModule("ExtendAttrAM");
    }

    /**
     * Container's getter for CmsSecondLevelLibVO4Query.
     * @return CmsSecondLevelLibVO4Query
     */
    public CmsSecondLevelLibVOImpl getCmsSecondLevelLibVO4Query() {
        return (CmsSecondLevelLibVOImpl)findViewObject("CmsSecondLevelLibVO4Query");
    }
}
