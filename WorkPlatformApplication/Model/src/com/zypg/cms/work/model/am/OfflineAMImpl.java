package com.zypg.cms.work.model.am;

import com.honythink.applicationframework.hadf.CustomApplicationModuleImpl;

import com.zypg.cms.work.model.viewobject.common.CmsDocTVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocTVORowImpl;
import com.zypg.cms.work.model.viewobject.offline.CmsTaskMonitorTVOImpl;
import com.zypg.cms.work.model.viewobject.offline.CmsTaskMonitorTVORowImpl;
import com.zypg.cms.work.model.viewobject.offline.query.CmsOfflineEntryProcessTaskVOImpl;

import com.zypg.cms.work.model.viewobject.offline.query.CmsTaskMonitorLogVOImpl;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Types;

import javax.jws.WebMethod;

import oracle.jbo.domain.Number;

import oracle.jbo.server.ApplicationModuleImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jul 16 14:17:35 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OfflineAMImpl extends CustomApplicationModuleImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public OfflineAMImpl() {
    }

    public Number createTaskMonitor(String taskName, String compCode) {
        CmsDocTVOImpl docVO = this.getCmsDocTVO();
        CmsDocTVORowImpl docNewRow = (CmsDocTVORowImpl)docVO.createRow();
        docNewRow.setStatus("IMPORTING_OFFLINE_ENTRY_PROCESS");
        docNewRow.setLibCode("OFFLINE_ENTRY_PROCESS");
        docNewRow.setLibTypeCode("JOB_LIB");
        docNewRow.setCompCode(compCode);
        docVO.insertRow(docNewRow);

        CmsTaskMonitorTVOImpl monitorVO = this.getCmsTaskMonitorTVO();
        CmsTaskMonitorTVORowImpl monitorRow = (CmsTaskMonitorTVORowImpl)monitorVO.createRow();
        monitorRow.setTaskName(taskName);
        monitorRow.setDocId(docNewRow.getDocId());
        monitorRow.setTaskSponsor(this.getCustomDBTransaction().getUserId() + "");
        monitorRow.setCurrOperator(this.getCustomDBTransaction().getUserId() + "");
        monitorRow.setDescription("条目正在入库中...");
        monitorVO.insertRow(monitorRow);
        return monitorRow.getTaskId();
    }

    public String processTaskMonitorLog(String taskId, String processInfo, String operator, String logType,
                                        String userId, Integer seq) {
        String returnCode = null;
        String returnMsg = null;
        CallableStatement cs = null;
        try {
            cs =
 this.getDBTransaction().createCallableStatement("begin cms_common_pkg.task_monitor_log_processor(?,?,?,?,?,?,?,?); end;",
                                                 this.getDBTransaction().DEFAULT);
            cs.registerOutParameter(7, Types.VARCHAR);
            cs.registerOutParameter(8, Types.VARCHAR);
            cs.setObject(1, taskId);
            cs.setObject(2, processInfo);
            cs.setObject(3, operator);
            cs.setObject(4, logType);
            cs.setObject(5, userId);
            cs.setObject(6, seq);
            cs.execute();
            returnCode = cs.getString(7);
            returnMsg = cs.getString(8);
        } catch (Exception e) {
            returnCode = "E";
            returnMsg = e.toString();
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (SQLException e) {
                returnCode = "E";
                returnMsg = e.toString();
            }
        }
        System.out.println("cms_common_pkg.task_monitor_log_processor result = " + returnCode + "," + returnMsg);
        return returnCode + "," + returnMsg;
    }

    public String deleteTask(Number docId) {
        String result = null;
        CallableStatement st = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin ? := cms_common_pkg.delete_task(?); end;", this.getDBTransaction().DEFAULT);
            st.registerOutParameter(1, Types.VARCHAR);
            st.setObject(2, docId);
            st.execute();
            result = (String)st.getObject(1);
        } catch (SQLException e) {
            result = "N";
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public void initTaskMonitorLog(Number docId) {
        CmsTaskMonitorLogVOImpl logVO = this.getCmsTaskMonitorLogVO();
        logVO.setbvDocId(docId);
        logVO.executeQuery();
        CmsOfflineEntryProcessTaskVOImpl taskVO = this.getCmsOfflineEntryProcessTaskVO4Query();
        taskVO.setbvDocId(docId);
        taskVO.executeQuery();
    }

    /**
     * Container's getter for CmsOfflineEntryProcessTaskVO.
     * @return CmsOfflineEntryProcessTaskVO
     */
    public CmsOfflineEntryProcessTaskVOImpl getCmsOfflineEntryProcessTaskVO() {
        return (CmsOfflineEntryProcessTaskVOImpl)findViewObject("CmsOfflineEntryProcessTaskVO");
    }

    /**
     * Container's getter for CmsTaskMonitorTVO.
     * @return CmsTaskMonitorTVO
     */
    public CmsTaskMonitorTVOImpl getCmsTaskMonitorTVO() {
        return (CmsTaskMonitorTVOImpl)findViewObject("CmsTaskMonitorTVO");
    }

    /**
     * Container's getter for CmsTaskMonitorLogVO.
     * @return CmsTaskMonitorLogVO
     */
    public CmsTaskMonitorLogVOImpl getCmsTaskMonitorLogVO() {
        return (CmsTaskMonitorLogVOImpl)findViewObject("CmsTaskMonitorLogVO");
    }

    /**
     * Container's getter for CmsOfflineEntryProcessTaskVO4Query.
     * @return CmsOfflineEntryProcessTaskVO4Query
     */
    public CmsOfflineEntryProcessTaskVOImpl getCmsOfflineEntryProcessTaskVO4Query() {
        return (CmsOfflineEntryProcessTaskVOImpl)findViewObject("CmsOfflineEntryProcessTaskVO4Query");
    }

    /**
     * Container's getter for CmsDocTVO.
     * @return CmsDocTVO
     */
    public CmsDocTVOImpl getCmsDocTVO() {
        return (CmsDocTVOImpl)findViewObject("CmsDocTVO");
    }
}
