package com.zypg.cms.work.model.viewobject.theme.query;

import java.math.BigDecimal;

import java.util.Hashtable;
import java.util.List;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 05 11:22:36 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CmsThemeResourceVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        ResourceId {
            public Object get(CmsThemeResourceVORowImpl obj) {
                return obj.getResourceId();
            }

            public void put(CmsThemeResourceVORowImpl obj, Object value) {
                obj.setResourceId((Number)value);
            }
        },
        ResourceName {
            public Object get(CmsThemeResourceVORowImpl obj) {
                return obj.getResourceName();
            }

            public void put(CmsThemeResourceVORowImpl obj, Object value) {
                obj.setResourceName((String)value);
            }
        },
        LibCode {
            public Object get(CmsThemeResourceVORowImpl obj) {
                return obj.getLibCode();
            }

            public void put(CmsThemeResourceVORowImpl obj, Object value) {
                obj.setLibCode((String)value);
            }
        },
        TreeNodeId {
            public Object get(CmsThemeResourceVORowImpl obj) {
                return obj.getTreeNodeId();
            }

            public void put(CmsThemeResourceVORowImpl obj, Object value) {
                obj.setTreeNodeId((Number)value);
            }
        },
        CompCode {
            public Object get(CmsThemeResourceVORowImpl obj) {
                return obj.getCompCode();
            }

            public void put(CmsThemeResourceVORowImpl obj, Object value) {
                obj.setCompCode((String)value);
            }
        },
        NodeName {
            public Object get(CmsThemeResourceVORowImpl obj) {
                return obj.getNodeName();
            }

            public void put(CmsThemeResourceVORowImpl obj, Object value) {
                obj.setNodeName((String)value);
            }
        },
        LibName {
            public Object get(CmsThemeResourceVORowImpl obj) {
                return obj.getLibName();
            }

            public void put(CmsThemeResourceVORowImpl obj, Object value) {
                obj.setLibName((String)value);
            }
        },
        Checked {
            public Object get(CmsThemeResourceVORowImpl obj) {
                return obj.getChecked();
            }

            public void put(CmsThemeResourceVORowImpl obj, Object value) {
                obj.setChecked((Boolean)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CmsThemeResourceVORowImpl object);

        public abstract void put(CmsThemeResourceVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int RESOURCEID = AttributesEnum.ResourceId.index();
    public static final int RESOURCENAME = AttributesEnum.ResourceName.index();
    public static final int LIBCODE = AttributesEnum.LibCode.index();
    public static final int TREENODEID = AttributesEnum.TreeNodeId.index();
    public static final int COMPCODE = AttributesEnum.CompCode.index();
    public static final int NODENAME = AttributesEnum.NodeName.index();
    public static final int LIBNAME = AttributesEnum.LibName.index();
    public static final int CHECKED = AttributesEnum.Checked.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CmsThemeResourceVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute ResourceId.
     * @return the ResourceId
     */
    public Number getResourceId() {
        return (Number)getAttributeInternal(RESOURCEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ResourceId.
     * @param value value to set the  ResourceId
     */
    public void setResourceId(Number value) {
        setAttributeInternal(RESOURCEID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ResourceName.
     * @return the ResourceName
     */
    public String getResourceName() {
        return (String)getAttributeInternal(RESOURCENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ResourceName.
     * @param value value to set the  ResourceName
     */
    public void setResourceName(String value) {
        setAttributeInternal(RESOURCENAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LibCode.
     * @return the LibCode
     */
    public String getLibCode() {
        return (String)getAttributeInternal(LIBCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LibCode.
     * @param value value to set the  LibCode
     */
    public void setLibCode(String value) {
        setAttributeInternal(LIBCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TreeNodeId.
     * @return the TreeNodeId
     */
    public Number getTreeNodeId() {
        return (Number)getAttributeInternal(TREENODEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TreeNodeId.
     * @param value value to set the  TreeNodeId
     */
    public void setTreeNodeId(Number value) {
        setAttributeInternal(TREENODEID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CompCode.
     * @return the CompCode
     */
    public String getCompCode() {
        return (String)getAttributeInternal(COMPCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CompCode.
     * @param value value to set the  CompCode
     */
    public void setCompCode(String value) {
        setAttributeInternal(COMPCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute NodeName.
     * @return the NodeName
     */
    public String getNodeName() {
        return (String)getAttributeInternal(NODENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute NodeName.
     * @param value value to set the  NodeName
     */
    public void setNodeName(String value) {
        setAttributeInternal(NODENAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LibName.
     * @return the LibName
     */
    public String getLibName() {
        return (String)getAttributeInternal(LIBNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LibName.
     * @param value value to set the  LibName
     */
    public void setLibName(String value) {
        setAttributeInternal(LIBNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Checked.
     * @return the Checked
     */
    public Boolean getChecked() {
        Boolean result = null;
        Hashtable map = this.getDBTransaction().getSession().getUserData();
        String prefix = "Theme";
        String selectAllFlag = (String)map.get(prefix + "_selectAllFlag");
        String key = prefix + "_" + this.getResourceId();
        List<String> currSelectedList = (List<String>)map.get(prefix + "_currSelected");
        if ("O".equals(selectAllFlag)) {
            if (currSelectedList.contains(key)) {
                result = true;
            } else {
                result = false;
            }
        } else {
            if ("Y".equals(selectAllFlag)) {
                result = true;
            } else if ("N".equals(selectAllFlag)) {
                result = false;
            }
        }
        this.setChecked(result);
        return (Boolean)getAttributeInternal(CHECKED);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Checked.
     * @param value value to set the  Checked
     */
    public void setChecked(Boolean value) {
        setAttributeInternal(CHECKED, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
