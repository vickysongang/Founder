package com.zypg.cms.work.model.am;


import com.honythink.applicationframework.hadf.CustomApplicationModuleImpl;
import com.honythink.applicationframework.hadf.util.DateUtil;

import com.zypg.cms.work.model.am.common.BookAM;
import com.zypg.cms.work.model.viewobject.book.CmsBookEditVOImpl;
import com.zypg.cms.work.model.viewobject.book.CmsBookEditVORowImpl;
import com.zypg.cms.work.model.viewobject.book.CmsBookTVOImpl;
import com.zypg.cms.work.model.viewobject.book.CmsBookTVORowImpl;
import com.zypg.cms.work.model.viewobject.book.CmsChapterTVOImpl;
import com.zypg.cms.work.model.viewobject.book.CmsJbInfoTVOImpl;
import com.zypg.cms.work.model.viewobject.book.CmsJbInfoTVORowImpl;
import com.zypg.cms.work.model.viewobject.book.CmsXcInfoTVOImpl;
import com.zypg.cms.work.model.viewobject.book.CmsXcInfoTVORowImpl;
import com.zypg.cms.work.model.viewobject.book.query.CmsBookQVOImpl;
import com.zypg.cms.work.model.viewobject.book.query.CmsBookQueryVOImpl;
import com.zypg.cms.work.model.viewobject.book.query.CmsBookVOImpl;
import com.zypg.cms.work.model.viewobject.book.query.CmsBookVORowImpl;
import com.zypg.cms.work.model.viewobject.book.query.CmsBookValidateVOImpl;
import com.zypg.cms.work.model.viewobject.book.query.CmsBookValidateVORowImpl;
import com.zypg.cms.work.model.viewobject.book.query.CmsChapterVOImpl;
import com.zypg.cms.work.model.viewobject.book.query.CmsXcInfoTypeVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocCategoryRelTVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocCategoryRelTVORowImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocTVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocTVORowImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocUcmRelTVOImpl;
import com.zypg.cms.work.model.viewobject.common.lov.CmsLookupValueVOImpl;
import com.zypg.cms.work.model.viewobject.common.lov.CmsLookupValueVORowImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsCategoryQueryVOImpl;
import com.zypg.cms.work.model.viewobject.common.query.CmsCategoryQueryVORowImpl;

import com.zypg.cms.work.model.viewobject.common.query.CmsDocStatus4CheckImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.util.List;
import java.util.Map;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.domain.ClobDomain;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Apr 18 13:23:51 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BookAMImpl extends CustomApplicationModuleImpl implements BookAM {
    /**
     * This is the default constructor (do not remove).
     */
    public BookAMImpl() {
    }


    /****************************************图书库相关****************************************************************/

    public String deleteChapter(Integer docId) {
        String ret = "E";
        CallableStatement st = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin cms_work_platform_pkg.delete_chapter(?); end;", this.getDBTransaction().DEFAULT);
            st.setObject(1, docId);
            st.execute();
            this.getDBTransaction().commit();
            ret = "S";
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return ret;
    }

    public String getBookName(Number docId) {
        String ret = "";
        CmsBookVOImpl bookVo = this.getCmsBookVO();
        bookVo.setbvDocId(docId);
        bookVo.executeQuery();
        Row row = bookVo.first();
        if (row != null) {
            CmsBookVORowImpl bookRow = (CmsBookVORowImpl)row;
            ret = bookRow.getBookName();
        }
        return ret;
    }

    public void initChapterSort(Number docId) {
        CmsChapterTVOImpl chapterVo = this.getCmsChapterTVO();
        chapterVo.setbvDocId(docId);
        chapterVo.executeQuery();
        chapterVo.setRangeSize(-1);
    }

    public void initChapter(Number docId) {
        CmsChapterVOImpl chapterVo = this.getCmsChapterVO();
        chapterVo.setbvDocId(docId);
        chapterVo.executeQuery();
        chapterVo.setRangeSize(-1);
    }

    public Row getBookRowByAltKey(String bookName, String isbn, Number edition, Number impression, String compCode) {
        CmsBookValidateVOImpl validateVO = this.getCmsBookValidateVO();
        validateVO.setbvBookName(bookName);
        validateVO.setbvIsbn(isbn);
        validateVO.setbvEdition(edition);
        validateVO.setbvImpression(impression);
        validateVO.setbvCompCode(compCode);
        validateVO.executeQuery();
        validateVO.setRangeSize(-1);
        if (validateVO.getEstimatedRowCount() > 0) {
            return validateVO.first();
        }
        return null;
    }

    public Number findCategoryIdByCategoryName(String categoryName, String compCode, String libCode) {
        CmsCategoryQueryVOImpl vo = this.getCmsCategoryQueryVO();
        vo.setbvCategoryName(categoryName);
        vo.setbvCompCode(compCode);
        vo.setbvLibCode(libCode);
        vo.executeQuery();
        Row firstRow = vo.first();
        if (firstRow != null) {
            CmsCategoryQueryVORowImpl row = (CmsCategoryQueryVORowImpl)firstRow;
            return row.getCategoryId();
        }
        return null;
    }

    public String findLovTypeCodeByMeaning(String lookupTypeCode, String meaning) {
        CmsLookupValueVOImpl vo = this.getCmsLookupValueVO4Query();
        vo.setbvLookupTypeCode(lookupTypeCode);
        vo.setbvMeaning(meaning);
        vo.executeQuery();
        Row firstRow = vo.first();
        if (firstRow != null) {
            CmsLookupValueVORowImpl row = (CmsLookupValueVORowImpl)firstRow;
            return row.getLookupValueCode();
        }
        return null;
    }

    public boolean isEmpty(Object o) {
        if (o == null) {
            return true;
        }
        if (o instanceof String) {
            String str = (String)o;
            str = str.trim();
            if (str.length() == 0) {
                return true;
            }
        }
        return false;
    }

    public String importData(List<Map<String, Object>> importData, String coverType, Number currentCategoryId,
                             String compCode) {
        String ret = "S";
        StringBuffer sb = new StringBuffer();
        try {
            CmsBookTVOImpl bookSaveVo = this.getCmsBook4ImportSaveTVO();
            bookSaveVo.setRangeSize(-1);
            if (importData != null && importData.size() > 0) {
                for (Map<String, Object> row : importData) {
                    CmsBookTVORowImpl bookRow = null;
                    //书名
                    Object bookName = row.get("书名");
                    //著者
                    Object author = row.get("著者");
                    //ISBN
                    Object isbn = row.get("ISBN");
                    //出版年月
                    Object publishDate = row.get("出版年月");
                    //出版社
                    Object publisherHouse = row.get("出版社");
                    //版次
                    Object edition = row.get("版次");
                    //印次
                    Object impression = row.get("印次");
                    //内容简介
                    Object contentAbstract = row.get("内容简介");

                    Object price = row.get("定价");

                    Object editor = row.get("责编");

                    Object categoryName = row.get("资源库分类");

                    Object bookSize = row.get("开本");
                    String bookSizeCode = this.findLovTypeCodeByMeaning("BOOK_SIZE", (String)bookSize);

                    Object pagination = row.get("页数");

                    Object contentDesc = row.get("内容简介");

                    Object catalog = row.get("目录");

                    Object series = row.get("丛书名");

                    CmsBookValidateVORowImpl validateRow =
                        (CmsBookValidateVORowImpl)this.getBookRowByAltKey((String)bookName, (String)isbn,
                                                                          new Number(edition), new Number(impression),
                                                                          compCode);
                    boolean isCover = false;
                    if (validateRow != null) {
                        //覆盖
                        if ("cover".equalsIgnoreCase(coverType)) {
                            Number bookId = validateRow.getBookId();
                            bookRow = (CmsBookTVORowImpl)bookSaveVo.getRow(new Key(new Object[] { bookId }));
                            isCover = true;
                            sb.append(validateRow.getBookName() + "," + validateRow.getIsbn() + "," +
                                      validateRow.getEdition() + "," + validateRow.getImpression() + "被覆盖;</br>");
                        } else {
                            //忽略
                            sb.append(validateRow.getBookName() + "," + validateRow.getIsbn() + "," +
                                      validateRow.getEdition() + "," + validateRow.getImpression() + "被忽略;</br>");
                            continue;
                        }
                    } else {
                        //没有直接插入
                        bookRow = (CmsBookTVORowImpl)bookSaveVo.createRow();
                    }

                    bookRow.setBookName((String)bookName);
                    bookRow.setAuthor((String)author);
                    bookRow.setIsbn((String)isbn);
                    bookRow.setEdition(new Number(isEmpty(edition) ? 1 : edition));
                    bookRow.setImpression(new Number(isEmpty(impression) ? 1 : impression));
                    bookRow.setRemarks((String)contentAbstract);
                    bookRow.setPubTime(publishDate == null ? DateUtil.getCurrentJboDatetime() : new Date(publishDate));
                    bookRow.setPublishingHouse((String)publisherHouse); //出版社名
                    bookRow.setPrice(new Number(isEmpty(price) ? 0 : price));
                    bookRow.setEditor((String)editor);
                    bookRow.setPagination(new Number(isEmpty(pagination) ? 0 : pagination));
                    bookRow.setSeries((String)series);
                    bookRow.setBookSize(bookSizeCode);
                    //如果不是覆盖操作，则设置关联信息
                    if (!isCover) {
                        CmsDocTVOImpl docVO = this.getCmsDocTVO();
                        CmsDocTVORowImpl docNewRow = (CmsDocTVORowImpl)docVO.createRow();
                        docNewRow.setStatus("TO_GATHER_BOOK");
                        docNewRow.setLibCode("BOOK");
                        docNewRow.setLibTypeCode("END_PROD_LIB");
                        docNewRow.setCompCode(compCode);
                        docVO.insertRow(docNewRow);
                        bookRow.setDocId(docNewRow.getDocId());
                        Number categoryId = findCategoryIdByCategoryName((String)categoryName, compCode, "BOOK");
                        System.out.println("导入书目所属的分类：" + categoryId);
                        if (categoryId == null) {
                            categoryId = currentCategoryId == null ? new Number(-1) : currentCategoryId;
                        }
                        preDocCategroupRel("CREATE", docNewRow.getDocId(), categoryId);

                        if (contentDesc != null && catalog != null) {
                            CmsJbInfoTVOImpl jbInfoVO = this.getCmsJbInfoTVO();
                            CmsJbInfoTVORowImpl jbRow = (CmsJbInfoTVORowImpl)jbInfoVO.createRow();
                            jbRow.setDocId(docNewRow.getDocId());
                            jbRow.setBriefIntroduction(new ClobDomain((String)contentDesc));
                            jbRow.setCatalog(new ClobDomain((String)catalog));
                            jbInfoVO.insertRow(jbRow);
                        }
                    } else {
                        Number categoryId = findCategoryIdByCategoryName((String)categoryName, compCode, "BOOK");
                        System.out.println("覆盖书目所属的分类：" + categoryId);
                        if (categoryId != null) {
                            preDocCategroupRel("MODIFY", bookRow.getDocId(), categoryId);
                        }
                        CmsJbInfoTVOImpl jbInfoVO = this.getCmsJbInfoTVO();
                        Row[] rows = jbInfoVO.getFilteredRows("DocId", bookRow.getDocId());
                        if (rows.length > 0) {
                            CmsJbInfoTVORowImpl jbRow = (CmsJbInfoTVORowImpl)rows[0];
                            jbRow.setBriefIntroduction(new ClobDomain((String)contentDesc));
                            jbRow.setCatalog(new ClobDomain((String)catalog));
                        }
                    }
                }
                this.getDBTransaction().commit();
            }
        } catch (Exception e) {
            this.getDBTransaction().rollback();
            e.printStackTrace();
            ret = e.getMessage();
        }
        if ("S".equals(ret) || sb.length() > 0) {
            ret = "S," + sb.toString();
        }
        return ret;
    }


    public Number preEditBook(String mode, Number docId, String compCode, String compName) {
        Number result = null;
        CmsBookTVOImpl bookVO = this.getCmsBookTVO();
        if ("CREATE".equals(mode)) {
            CmsDocTVOImpl docVO = this.getCmsDocTVO();
            CmsDocTVORowImpl docNewRow = (CmsDocTVORowImpl)docVO.createRow();
            docNewRow.setStatus("TO_GATHER_BOOK");
            docNewRow.setLibCode("BOOK");
            docNewRow.setLibTypeCode("END_PROD_LIB");
            docNewRow.setCompCode(compCode);
            docVO.insertRow(docNewRow);

            CmsBookTVORowImpl bookNewRow = (CmsBookTVORowImpl)bookVO.createRow();
            bookNewRow.setDocId(docNewRow.getDocId());
            bookNewRow.setPublishingHouse(compName);
            bookVO.insertRow(bookNewRow);

            preDocCategroupRel(mode, docNewRow.getDocId(), new Number(-1));
            result = bookNewRow.getDocId();
        } else {
            result = docId;
            bookVO.setbvDocId(docId);
            bookVO.executeQuery();
            Row row = bookVO.first();
            if (row != null) {
                row.setAttribute("LastUpdateDate", new Date());
                bookVO.setCurrentRow(row);
            }
            preDocCategroupRel(mode, docId, null);
        }
        return result;
    }

    public void preDocCategroupRel(String mode, Number docId, Number categoryId) {
        CmsDocCategoryRelTVOImpl docCategoryRelVO = this.getCmsDocCategoryRelTVO();
        if ("CREATE".equals(mode)) {
            CmsDocCategoryRelTVORowImpl docCategoryRelNewRow =
                (CmsDocCategoryRelTVORowImpl)docCategoryRelVO.createRow();
            docCategoryRelNewRow.setDocId(docId);
            docCategoryRelNewRow.setCategoryGroupType("BY_CATEGORY");
            docCategoryRelNewRow.setCategoryId(categoryId);
            docCategoryRelVO.insertRow(docCategoryRelNewRow);
            docCategoryRelVO.setCurrentRow(docCategoryRelNewRow);
        } else {
            docCategoryRelVO.setbvDocId(docId);
            docCategoryRelVO.executeQuery();
            Row row = docCategoryRelVO.first();
            if (row != null) {
                CmsDocCategoryRelTVORowImpl docCategoryRelNewRow = (CmsDocCategoryRelTVORowImpl)row;
                docCategoryRelNewRow.setCategoryId(categoryId);
                docCategoryRelVO.setCurrentRow(row);
            }
        }
    }

    public void updateCategoryRel(Number categoryId, Number docId) {
        CmsDocCategoryRelTVOImpl docCategoryRelVO = this.getCmsDocCategoryRelTVO();
        //        Row[] rows = docCategoryRelVO.getFilteredRows("DocId", docId);
        //        if (rows.length > 0) {
        //            CmsDocCategoryRelTVORowImpl docCategoryRelNewRow = (CmsDocCategoryRelTVORowImpl)rows[0];
        //            docCategoryRelNewRow.setCategoryId(categoryId);
        //        }
        docCategoryRelVO.setbvDocId(docId);
        docCategoryRelVO.executeQuery();
        Row row = docCategoryRelVO.first();
        if (row != null) {
            CmsDocCategoryRelTVORowImpl docCategoryRelNewRow = (CmsDocCategoryRelTVORowImpl)row;
            docCategoryRelNewRow.setCategoryId(categoryId);
        }
    }

    public void initBookEditVO() {
        CmsBookEditVOImpl vo = this.getCmsBookEditVO();
        vo.executeQuery();
        Row row = vo.first();
        if (row != null) {
            vo.setCurrentRow(row);
        }
    }

    public void batchEditBook(String docIds) {
        String[] docId = docIds.split(",");
        CmsBookTVOImpl bookVO = this.getCmsBookTVO();
        CmsBookEditVOImpl editVO = this.getCmsBookEditVO();
        CmsBookEditVORowImpl editRow = (CmsBookEditVORowImpl)editVO.getCurrentRow();
        for (String id : docId) {
            try {
                bookVO.setbvDocId(new Number(id));
            } catch (SQLException e) {
                e.printStackTrace();
            }
            bookVO.executeQuery();
            Row row = bookVO.first();
            if (row != null) {
                CmsBookTVORowImpl bookRow = (CmsBookTVORowImpl)row;
                for (String attr : editRow.getAttributeNames()) {
                    if (editRow.getAttribute(attr) != null) {
                        if ("Keyword".equals(attr)) {
                            String oldKeyword = bookRow.getKeyword();
                            String newKeyword = null;
                            if (oldKeyword == null) {
                                newKeyword = editRow.getAttribute(attr) + "";
                            } else {
                                newKeyword = oldKeyword + "," + editRow.getAttribute(attr);
                            }
                            bookRow.setAttribute(attr, newKeyword);
                        } else {
                            bookRow.setAttribute(attr, editRow.getAttribute(attr));
                        }
                    }
                }
                bookRow.setLastUpdatedBy(this.getCustomDBTransaction().getUserId());
                bookRow.setLastUpdateDate(new Date());
                try {
                    if (editRow.getCategoryId() != null) {
                        updateCategoryRel(editRow.getCategoryId(), new Number(id));
                        this.updateAssortCategoryWhenBookCategoryUpdated(new Number(id), editRow.getCategoryId());
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public void initJbInfo(Number docId) {
        CmsJbInfoTVOImpl jbInfoVO = this.getCmsJbInfoTVO();
        jbInfoVO.setbvDocId(docId);
        jbInfoVO.executeQuery();
        Row firstRow = jbInfoVO.first();
        if (firstRow != null) {
            jbInfoVO.setCurrentRow(firstRow);
        } else {
            CmsJbInfoTVORowImpl row = (CmsJbInfoTVORowImpl)jbInfoVO.createRow();
            row.setDocId(docId);
            jbInfoVO.insertRow(row);
            jbInfoVO.setCurrentRow(row);
        }
    }

    public void initXcInfo(Number docId, String xcInfoType) {
        CmsXcInfoTVOImpl infoVO = this.getCmsXcInfoTVO4Query();
        infoVO.setbvDocId(docId);
        infoVO.setbvType(xcInfoType);
        infoVO.executeQuery();
        infoVO.setRangeSize(-1);
    }

    public void addXcInfo(Number docId, String xcInfoType) {
        CmsXcInfoTVOImpl infoVO = this.getCmsXcInfoTVO();
        CmsXcInfoTVORowImpl infoRow = (CmsXcInfoTVORowImpl)infoVO.createRow();
        infoRow.setDocId(docId);
        infoRow.setType(xcInfoType);
        infoVO.insertRow(infoRow);
        infoVO.setCurrentRow(infoRow);
    }

    public void updateXcInfo(Number xcInfoId) {
        CmsXcInfoTVOImpl infoVO = this.getCmsXcInfoTVO();
        Row[] rows = infoVO.getFilteredRows(new RowQualifier("XcInfoId=" + xcInfoId));
        if (rows.length > 0) {
            infoVO.setCurrentRow(rows[0]);
        }
    }

    public void resetXcInfo() {
        CmsXcInfoTVOImpl infoVO = this.getCmsXcInfoTVO();
        CmsXcInfoTVORowImpl row = (CmsXcInfoTVORowImpl)infoVO.getCurrentRow();
        String rowStatus = row.getRowStatus();
        if ("Initialized".equals(rowStatus) || "New".equals(rowStatus)) {
            row.remove();
        } else if ("Modified".equals(rowStatus)) {
            row.refresh(Row.REFRESH_FORGET_NEW_ROWS | Row.REFRESH_UNDO_CHANGES);
        }
    }

    public void deleteXcInfo(Number xcInfoId) {
        CmsXcInfoTVOImpl infoVO = this.getCmsXcInfoTVO();
        Row[] rows = infoVO.getFilteredRows(new RowQualifier("XcInfoId=" + xcInfoId));
        if (rows.length > 0) {
            rows[0].remove();
        }
    }

    public void initBookInfo4View(Number docId) {
        CmsDocTVOImpl docVO = this.getCmsDocTVO4View();
        docVO.setbvDocId(docId);
        docVO.executeQuery();
        CmsDocUcmRelTVOImpl docUcmRelTVO = this.getCmsDocUcmRelTVO4FileList();
        docUcmRelTVO.setbvDocId(docId);
        docUcmRelTVO.executeQuery();
        Row row = docVO.first();
        if (row != null) {
            docVO.setCurrentRow(row);
        }
    }

    public long initOnlineReadInfo(Number docId) {
        CmsDocUcmRelTVOImpl onlineReadVO = this.getCmsDocUcmRelTVO4OnlineRead();
        onlineReadVO.setbvDocId(docId);
        onlineReadVO.executeQuery();
        onlineReadVO.setRangeSize(-1);
        return onlineReadVO.getEstimatedRowCount();
    }

    /**
     * 修改图书的分类时修改插图的分类
     * @param docId
     */
    public void updateAssortCategoryWhenBookCategoryUpdated(Number docId, Number categoryId) {
        CallableStatement st = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin cms_common_pkg.update_other_category_for_book(?,?); end;",
                                                 this.getDBTransaction().DEFAULT);
            st.setObject(1, docId);
            st.setObject(2, categoryId);
            st.execute();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * 初始化高级查询面板
     */
    public void initComplexSearch4Book() {
        CmsBookQVOImpl vo = this.getCmsBookQVO();
        vo.executeQuery();
        vo.setCurrentRow(vo.first());
    }

    /**
     * Container's getter for CmsBookTVO.
     * @return CmsBookTVO
     */
    public CmsBookTVOImpl getCmsBookTVO() {
        return (CmsBookTVOImpl)findViewObject("CmsBookTVO");
    }

    /**
     * Container's getter for CmsBookVO.
     * @return CmsBookVO
     */
    public CmsBookVOImpl getCmsBookVO() {
        return (CmsBookVOImpl)findViewObject("CmsBookVO");
    }

    /**
     * Container's getter for CmsDocTVO.
     * @return CmsDocTVO
     */
    public CmsDocTVOImpl getCmsDocTVO() {
        return (CmsDocTVOImpl)findViewObject("CmsDocTVO");
    }

    /**
     * Container's getter for CmsDocCategoryRelTVO.
     * @return CmsDocCategoryRelTVO
     */
    public CmsDocCategoryRelTVOImpl getCmsDocCategoryRelTVO() {
        return (CmsDocCategoryRelTVOImpl)findViewObject("CmsDocCategoryRelTVO");
    }

    /**
     * Container's getter for CmsBookEditVO.
     * @return CmsBookEditVO
     */
    public CmsBookEditVOImpl getCmsBookEditVO() {
        return (CmsBookEditVOImpl)findViewObject("CmsBookEditVO");
    }

    /**
     * Container's getter for CmsJbInfoTVO.
     * @return CmsJbInfoTVO
     */
    public CmsJbInfoTVOImpl getCmsJbInfoTVO() {
        return (CmsJbInfoTVOImpl)findViewObject("CmsJbInfoTVO");
    }

    /**
     * Container's getter for CmsXcInfoTVO.
     * @return CmsXcInfoTVO
     */
    public CmsXcInfoTVOImpl getCmsXcInfoTVO() {
        return (CmsXcInfoTVOImpl)findViewObject("CmsXcInfoTVO");
    }

    /**
     * Container's getter for CmsXcInfoTVO4Query.
     * @return CmsXcInfoTVO4Query
     */
    public CmsXcInfoTVOImpl getCmsXcInfoTVO4Query() {
        return (CmsXcInfoTVOImpl)findViewObject("CmsXcInfoTVO4Query");
    }

    /**
     * Container's getter for CmsXcInfoTypeVO.
     * @return CmsXcInfoTypeVO
     */
    public CmsXcInfoTypeVOImpl getCmsXcInfoTypeVO() {
        return (CmsXcInfoTypeVOImpl)findViewObject("CmsXcInfoTypeVO");
    }


    /**
     * Container's getter for CmsBook4ImportTVO.
     * @return CmsBook4ImportTVO
     */
    public CmsBookTVOImpl getCmsBook4ImportTVO() {
        return (CmsBookTVOImpl)findViewObject("CmsBook4ImportTVO");
    }

    /**
     * Container's getter for CmsBook4ImportSaveTVO.
     * @return CmsBook4ImportSaveTVO
     */
    public CmsBookTVOImpl getCmsBook4ImportSaveTVO() {
        return (CmsBookTVOImpl)findViewObject("CmsBook4ImportSaveTVO");
    }

    /**
     * Container's getter for CmsChapterVO.
     * @return CmsChapterVO
     */
    public CmsChapterVOImpl getCmsChapterVO() {
        return (CmsChapterVOImpl)findViewObject("CmsChapterVO");
    }

    /**
     * Container's getter for CmsChapterTVO.
     * @return CmsChapterTVO
     */
    public CmsChapterTVOImpl getCmsChapterTVO() {
        return (CmsChapterTVOImpl)findViewObject("CmsChapterTVO");
    }

    /**
     * Container's getter for CmsChapterQueryTVO.
     * @return CmsChapterQueryTVO
     */
    public CmsChapterTVOImpl getCmsChapterQueryTVO() {
        return (CmsChapterTVOImpl)findViewObject("CmsChapterQueryTVO");
    }

    /**
     * Container's getter for CmsDocTVO4View.
     * @return CmsDocTVO4View
     */
    public CmsDocTVOImpl getCmsDocTVO4View() {
        return (CmsDocTVOImpl)findViewObject("CmsDocTVO4View");
    }

    /**
     * Container's getter for CmsBookTVO4View.
     * @return CmsBookTVO4View
     */
    public CmsBookTVOImpl getCmsBookTVO4View() {
        return (CmsBookTVOImpl)findViewObject("CmsBookTVO4View");
    }

    /**
     * Container's getter for CmsDoc2BookVL1.
     * @return CmsDoc2BookVL1
     */
    public ViewLinkImpl getCmsDoc2BookVL() {
        return (ViewLinkImpl)findViewLink("CmsDoc2BookVL");
    }

    /**
     * Container's getter for CmsJbInfoTVO4View.
     * @return CmsJbInfoTVO4View
     */
    public CmsJbInfoTVOImpl getCmsJbInfoTVO4View() {
        return (CmsJbInfoTVOImpl)findViewObject("CmsJbInfoTVO4View");
    }

    /**
     * Container's getter for CmsDoc2JbInfoVL1.
     * @return CmsDoc2JbInfoVL1
     */
    public ViewLinkImpl getCmsDoc2JbInfoVL() {
        return (ViewLinkImpl)findViewLink("CmsDoc2JbInfoVL");
    }


    /**
     * Container's getter for CmsXcInfoTVO4BookReview.
     * @return CmsXcInfoTVO4BookReview
     */
    public CmsXcInfoTVOImpl getCmsXcInfoTVO4BookReview() {
        return (CmsXcInfoTVOImpl)findViewObject("CmsXcInfoTVO4BookReview");
    }

    /**
     * Container's getter for CmsDoc2XcInfoVL1.
     * @return CmsDoc2XcInfoVL1
     */
    public ViewLinkImpl getCmsDoc2XcInfoVL1() {
        return (ViewLinkImpl)findViewLink("CmsDoc2XcInfoVL1");
    }

    /**
     * Container's getter for CmsXcInfoTVO4BookNews.
     * @return CmsXcInfoTVO4BookNews
     */
    public CmsXcInfoTVOImpl getCmsXcInfoTVO4BookNews() {
        return (CmsXcInfoTVOImpl)findViewObject("CmsXcInfoTVO4BookNews");
    }

    /**
     * Container's getter for CmsDoc2XcInfoVL2.
     * @return CmsDoc2XcInfoVL2
     */
    public ViewLinkImpl getCmsDoc2XcInfoVL2() {
        return (ViewLinkImpl)findViewLink("CmsDoc2XcInfoVL2");
    }

    /**
     * Container's getter for CmsXcInfoTVO4EditorChoice.
     * @return CmsXcInfoTVO4EditorChoice
     */
    public CmsXcInfoTVOImpl getCmsXcInfoTVO4EditorChoice() {
        return (CmsXcInfoTVOImpl)findViewObject("CmsXcInfoTVO4EditorChoice");
    }

    /**
     * Container's getter for CmsDoc2XcInfoVL3.
     * @return CmsDoc2XcInfoVL3
     */
    public ViewLinkImpl getCmsDoc2XcInfoVL3() {
        return (ViewLinkImpl)findViewLink("CmsDoc2XcInfoVL3");
    }

    /**
     * Container's getter for CmsXcInfoTVO4MediaEvaluation.
     * @return CmsXcInfoTVO4MediaEvaluation
     */
    public CmsXcInfoTVOImpl getCmsXcInfoTVO4MediaEvaluation() {
        return (CmsXcInfoTVOImpl)findViewObject("CmsXcInfoTVO4MediaEvaluation");
    }

    /**
     * Container's getter for CmsDoc2XcInfoVL4.
     * @return CmsDoc2XcInfoVL4
     */
    public ViewLinkImpl getCmsDoc2XcInfoVL4() {
        return (ViewLinkImpl)findViewLink("CmsDoc2XcInfoVL4");
    }

    /**
     * Container's getter for CmsXcInfoTVO4ExpertEvaluation.
     * @return CmsXcInfoTVO4ExpertEvaluation
     */
    public CmsXcInfoTVOImpl getCmsXcInfoTVO4ExpertEvaluation() {
        return (CmsXcInfoTVOImpl)findViewObject("CmsXcInfoTVO4ExpertEvaluation");
    }

    /**
     * Container's getter for CmsDoc2XcInfoVL5.
     * @return CmsDoc2XcInfoVL5
     */
    public ViewLinkImpl getCmsDoc2XcInfoVL5() {
        return (ViewLinkImpl)findViewLink("CmsDoc2XcInfoVL5");
    }

    /**
     * Container's getter for CmsXcInfoTVO4AdLanguage.
     * @return CmsXcInfoTVO4AdLanguage
     */
    public CmsXcInfoTVOImpl getCmsXcInfoTVO4AdLanguage() {
        return (CmsXcInfoTVOImpl)findViewObject("CmsXcInfoTVO4AdLanguage");
    }

    /**
     * Container's getter for CmsDoc2XcInfoVL6.
     * @return CmsDoc2XcInfoVL6
     */
    public ViewLinkImpl getCmsDoc2XcInfoVL6() {
        return (ViewLinkImpl)findViewLink("CmsDoc2XcInfoVL6");
    }

    /**
     * Container's getter for CmsXcInfoTVO4Awards.
     * @return CmsXcInfoTVO4Awards
     */
    public CmsXcInfoTVOImpl getCmsXcInfoTVO4Awards() {
        return (CmsXcInfoTVOImpl)findViewObject("CmsXcInfoTVO4Awards");
    }

    /**
     * Container's getter for CmsDoc2XcInfoVL7.
     * @return CmsDoc2XcInfoVL7
     */
    public ViewLinkImpl getCmsDoc2XcInfoVL7() {
        return (ViewLinkImpl)findViewLink("CmsDoc2XcInfoVL7");
    }

    /**
     * Container's getter for CmsXcInfoTVO4PublicityPage.
     * @return CmsXcInfoTVO4PublicityPage
     */
    public CmsXcInfoTVOImpl getCmsXcInfoTVO4PublicityPage() {
        return (CmsXcInfoTVOImpl)findViewObject("CmsXcInfoTVO4PublicityPage");
    }

    /**
     * Container's getter for CmsDoc2XcInfoVL8.
     * @return CmsDoc2XcInfoVL8
     */
    public ViewLinkImpl getCmsDoc2XcInfoVL8() {
        return (ViewLinkImpl)findViewLink("CmsDoc2XcInfoVL8");
    }

    /**
     * Container's getter for CmsXcInfoTVO4RelatedNews.
     * @return CmsXcInfoTVO4RelatedNews
     */
    public CmsXcInfoTVOImpl getCmsXcInfoTVO4RelatedNews() {
        return (CmsXcInfoTVOImpl)findViewObject("CmsXcInfoTVO4RelatedNews");
    }

    /**
     * Container's getter for CmsDoc2XcInfoVL9.
     * @return CmsDoc2XcInfoVL9
     */
    public ViewLinkImpl getCmsDoc2XcInfoVL9() {
        return (ViewLinkImpl)findViewLink("CmsDoc2XcInfoVL9");
    }


    /**
     * Container's getter for CmsDocUcmRelTVO4FileList.
     * @return CmsDocUcmRelTVO4FileList
     */
    public CmsDocUcmRelTVOImpl getCmsDocUcmRelTVO4FileList() {
        return (CmsDocUcmRelTVOImpl)findViewObject("CmsDocUcmRelTVO4FileList");
    }

    /**
     * Container's getter for CmsBookValidateVO.
     * @return CmsBookValidateVO
     */
    public CmsBookValidateVOImpl getCmsBookValidateVO() {
        return (CmsBookValidateVOImpl)findViewObject("CmsBookValidateVO");
    }

    /**
     * Container's getter for CmsDocUcmRelTVO4OnlineRead.
     * @return CmsDocUcmRelTVO4OnlineRead
     */
    public CmsDocUcmRelTVOImpl getCmsDocUcmRelTVO4OnlineRead() {
        return (CmsDocUcmRelTVOImpl)findViewObject("CmsDocUcmRelTVO4OnlineRead");
    }

    /**
     * Container's getter for CmsLookupValueVO4Query.
     * @return CmsLookupValueVO4Query
     */
    public CmsLookupValueVOImpl getCmsLookupValueVO4Query() {
        return (CmsLookupValueVOImpl)findViewObject("CmsLookupValueVO4Query");
    }

    /**
     * Container's getter for CmsCategoryQueryVO.
     * @return CmsCategoryQueryVO
     */
    public CmsCategoryQueryVOImpl getCmsCategoryQueryVO() {
        return (CmsCategoryQueryVOImpl)findViewObject("CmsCategoryQueryVO");
    }

    /**
     * Container's getter for CmsBookQueryVO.
     * @return CmsBookQueryVO
     */
    public CmsBookQueryVOImpl getCmsBookQueryVO() {
        return (CmsBookQueryVOImpl)findViewObject("CmsBookQueryVO");
    }

    /**
     * Container's getter for CmsDocStatus4Check.
     * @return CmsDocStatus4Check
     */
    public CmsDocStatus4CheckImpl getCmsDocStatus4ExportBook() {
        return (CmsDocStatus4CheckImpl)findViewObject("CmsDocStatus4ExportBook");
    }

    /**
     * Container's getter for CmsBookQVO.
     * @return CmsBookQVO
     */
    public CmsBookQVOImpl getCmsBookQVO() {
        return (CmsBookQVOImpl)findViewObject("CmsBookQVO");
    }
}
