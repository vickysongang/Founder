package com.zypg.cms.work.model.viewobject.entry.query;

import java.math.BigDecimal;

import oracle.jbo.domain.ClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 04 16:20:56 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CmsEntryDupMasterEntryVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        EntryId {
            public Object get(CmsEntryDupMasterEntryVORowImpl obj) {
                return obj.getEntryId();
            }

            public void put(CmsEntryDupMasterEntryVORowImpl obj, Object value) {
                obj.setEntryId((Number)value);
            }
        }
        ,
        DocId {
            public Object get(CmsEntryDupMasterEntryVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(CmsEntryDupMasterEntryVORowImpl obj, Object value) {
                obj.setDocId((Number)value);
            }
        }
        ,
        EntryName {
            public Object get(CmsEntryDupMasterEntryVORowImpl obj) {
                return obj.getEntryName();
            }

            public void put(CmsEntryDupMasterEntryVORowImpl obj, Object value) {
                obj.setEntryName((String)value);
            }
        }
        ,
        Source {
            public Object get(CmsEntryDupMasterEntryVORowImpl obj) {
                return obj.getSource();
            }

            public void put(CmsEntryDupMasterEntryVORowImpl obj, Object value) {
                obj.setSource((String)value);
            }
        }
        ,
        EntryContent {
            public Object get(CmsEntryDupMasterEntryVORowImpl obj) {
                return obj.getEntryContent();
            }

            public void put(CmsEntryDupMasterEntryVORowImpl obj, Object value) {
                obj.setEntryContent((ClobDomain)value);
            }
        }
        ,
        Status {
            public Object get(CmsEntryDupMasterEntryVORowImpl obj) {
                return obj.getStatus();
            }

            public void put(CmsEntryDupMasterEntryVORowImpl obj, Object value) {
                obj.setStatus((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CmsEntryDupMasterEntryVORowImpl object);

        public abstract void put(CmsEntryDupMasterEntryVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ENTRYID = AttributesEnum.EntryId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int ENTRYNAME = AttributesEnum.EntryName.index();
    public static final int SOURCE = AttributesEnum.Source.index();
    public static final int ENTRYCONTENT = AttributesEnum.EntryContent.index();
    public static final int STATUS = AttributesEnum.Status.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CmsEntryDupMasterEntryVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute EntryId.
     * @return the EntryId
     */
    public Number getEntryId() {
        return (Number) getAttributeInternal(ENTRYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EntryId.
     * @param value value to set the  EntryId
     */
    public void setEntryId(Number value) {
        setAttributeInternal(ENTRYID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public Number getDocId() {
        return (Number) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DocId.
     * @param value value to set the  DocId
     */
    public void setDocId(Number value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EntryName.
     * @return the EntryName
     */
    public String getEntryName() {
        return (String) getAttributeInternal(ENTRYNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EntryName.
     * @param value value to set the  EntryName
     */
    public void setEntryName(String value) {
        setAttributeInternal(ENTRYNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Source.
     * @return the Source
     */
    public String getSource() {
        return (String) getAttributeInternal(SOURCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Source.
     * @param value value to set the  Source
     */
    public void setSource(String value) {
        setAttributeInternal(SOURCE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EntryContent.
     * @return the EntryContent
     */
    public ClobDomain getEntryContent() {
        return (ClobDomain) getAttributeInternal(ENTRYCONTENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EntryContent.
     * @param value value to set the  EntryContent
     */
    public void setEntryContent(ClobDomain value) {
        setAttributeInternal(ENTRYCONTENT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Status.
     * @return the Status
     */
    public String getStatus() {
        return (String) getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Status.
     * @param value value to set the  Status
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
