package com.zypg.cms.work.model.viewobject.attach;

import oracle.jbo.RowSet;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 05 11:27:28 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CmsAttachEditTVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        AttachId {
            public Object get(CmsAttachEditTVORowImpl obj) {
                return obj.getAttachId();
            }

            public void put(CmsAttachEditTVORowImpl obj, Object value) {
                obj.setAttachId((Number)value);
            }
        }
        ,
        Title {
            public Object get(CmsAttachEditTVORowImpl obj) {
                return obj.getTitle();
            }

            public void put(CmsAttachEditTVORowImpl obj, Object value) {
                obj.setTitle((String)value);
            }
        }
        ,
        AttachType {
            public Object get(CmsAttachEditTVORowImpl obj) {
                return obj.getAttachType();
            }

            public void put(CmsAttachEditTVORowImpl obj, Object value) {
                obj.setAttachType((String)value);
            }
        }
        ,
        Remarks {
            public Object get(CmsAttachEditTVORowImpl obj) {
                return obj.getRemarks();
            }

            public void put(CmsAttachEditTVORowImpl obj, Object value) {
                obj.setRemarks((String)value);
            }
        }
        ,
        Format {
            public Object get(CmsAttachEditTVORowImpl obj) {
                return obj.getFormat();
            }

            public void put(CmsAttachEditTVORowImpl obj, Object value) {
                obj.setFormat((String)value);
            }
        }
        ,
        FileSize {
            public Object get(CmsAttachEditTVORowImpl obj) {
                return obj.getFileSize();
            }

            public void put(CmsAttachEditTVORowImpl obj, Object value) {
                obj.setFileSize((Number)value);
            }
        }
        ,
        UcmDid {
            public Object get(CmsAttachEditTVORowImpl obj) {
                return obj.getUcmDid();
            }

            public void put(CmsAttachEditTVORowImpl obj, Object value) {
                obj.setUcmDid((Number)value);
            }
        }
        ,
        UcmDocname {
            public Object get(CmsAttachEditTVORowImpl obj) {
                return obj.getUcmDocname();
            }

            public void put(CmsAttachEditTVORowImpl obj, Object value) {
                obj.setUcmDocname((String)value);
            }
        }
        ,
        SourceId {
            public Object get(CmsAttachEditTVORowImpl obj) {
                return obj.getSourceId();
            }

            public void put(CmsAttachEditTVORowImpl obj, Object value) {
                obj.setSourceId((Number)value);
            }
        }
        ,
        libCode {
            public Object get(CmsAttachEditTVORowImpl obj) {
                return obj.getlibCode();
            }

            public void put(CmsAttachEditTVORowImpl obj, Object value) {
                obj.setlibCode((String)value);
            }
        }
        ,
        AttachTypeMeaning {
            public Object get(CmsAttachEditTVORowImpl obj) {
                return obj.getAttachTypeMeaning();
            }

            public void put(CmsAttachEditTVORowImpl obj, Object value) {
                obj.setAttachTypeMeaning((String)value);
            }
        }
        ,
        CmsAttachTypeVO {
            public Object get(CmsAttachEditTVORowImpl obj) {
                return obj.getCmsAttachTypeVO();
            }

            public void put(CmsAttachEditTVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CmsAttachEditTVORowImpl object);

        public abstract void put(CmsAttachEditTVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ATTACHID = AttributesEnum.AttachId.index();
    public static final int TITLE = AttributesEnum.Title.index();
    public static final int ATTACHTYPE = AttributesEnum.AttachType.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();
    public static final int FORMAT = AttributesEnum.Format.index();
    public static final int FILESIZE = AttributesEnum.FileSize.index();
    public static final int UCMDID = AttributesEnum.UcmDid.index();
    public static final int UCMDOCNAME = AttributesEnum.UcmDocname.index();
    public static final int SOURCEID = AttributesEnum.SourceId.index();
    public static final int LIBCODE = AttributesEnum.libCode.index();
    public static final int ATTACHTYPEMEANING = AttributesEnum.AttachTypeMeaning.index();
    public static final int CMSATTACHTYPEVO = AttributesEnum.CmsAttachTypeVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CmsAttachEditTVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute AttachId.
     * @return the AttachId
     */
    public Number getAttachId() {
        return (Number) getAttributeInternal(ATTACHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AttachId.
     * @param value value to set the  AttachId
     */
    public void setAttachId(Number value) {
        setAttributeInternal(ATTACHID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Title.
     * @return the Title
     */
    public String getTitle() {
        return (String) getAttributeInternal(TITLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Title.
     * @param value value to set the  Title
     */
    public void setTitle(String value) {
        setAttributeInternal(TITLE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute AttachType.
     * @return the AttachType
     */
    public String getAttachType() {
        return (String) getAttributeInternal(ATTACHTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AttachType.
     * @param value value to set the  AttachType
     */
    public void setAttachType(String value) {
        setAttributeInternal(ATTACHTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Remarks.
     * @return the Remarks
     */
    public String getRemarks() {
        return (String) getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Remarks.
     * @param value value to set the  Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Format.
     * @return the Format
     */
    public String getFormat() {
        return (String) getAttributeInternal(FORMAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Format.
     * @param value value to set the  Format
     */
    public void setFormat(String value) {
        setAttributeInternal(FORMAT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FileSize.
     * @return the FileSize
     */
    public Number getFileSize() {
        return (Number) getAttributeInternal(FILESIZE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FileSize.
     * @param value value to set the  FileSize
     */
    public void setFileSize(Number value) {
        setAttributeInternal(FILESIZE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute UcmDid.
     * @return the UcmDid
     */
    public Number getUcmDid() {
        return (Number) getAttributeInternal(UCMDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute UcmDid.
     * @param value value to set the  UcmDid
     */
    public void setUcmDid(Number value) {
        setAttributeInternal(UCMDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute UcmDocname.
     * @return the UcmDocname
     */
    public String getUcmDocname() {
        return (String) getAttributeInternal(UCMDOCNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute UcmDocname.
     * @param value value to set the  UcmDocname
     */
    public void setUcmDocname(String value) {
        setAttributeInternal(UCMDOCNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SourceId.
     * @return the SourceId
     */
    public Number getSourceId() {
        return (Number) getAttributeInternal(SOURCEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SourceId.
     * @param value value to set the  SourceId
     */
    public void setSourceId(Number value) {
        setAttributeInternal(SOURCEID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute libCode.
     * @return the libCode
     */
    public String getlibCode() {
        return (String) getAttributeInternal(LIBCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute libCode.
     * @param value value to set the  libCode
     */
    public void setlibCode(String value) {
        setAttributeInternal(LIBCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute AttachTypeMeaning.
     * @return the AttachTypeMeaning
     */
    public String getAttachTypeMeaning() {
        return (String) getAttributeInternal(ATTACHTYPEMEANING);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AttachTypeMeaning.
     * @param value value to set the  AttachTypeMeaning
     */
    public void setAttachTypeMeaning(String value) {
        setAttributeInternal(ATTACHTYPEMEANING, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> CmsAttachTypeVO.
     */
    public RowSet getCmsAttachTypeVO() {
        return (RowSet)getAttributeInternal(CMSATTACHTYPEVO);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
