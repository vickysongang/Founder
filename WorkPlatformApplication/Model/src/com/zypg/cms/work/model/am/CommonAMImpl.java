package com.zypg.cms.work.model.am;


import com.honythink.applicationframework.hadf.CustomApplicationModuleImpl;

import com.honythink.applicationframework.hadf.util.DateUtil;

import com.zypg.cms.work.model.am.common.CommonAM;
import com.zypg.cms.work.model.viewobject.attach.CmsAttachTVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocTVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocTVORowImpl;
import com.zypg.cms.work.model.viewobject.common.CmsDocUcmRelTVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsGatherMonitorTVOImpl;
import com.zypg.cms.work.model.viewobject.common.CmsGatherMonitorTVORowImpl;
import com.zypg.cms.work.model.viewobject.common.lov.CmsLookupValueVOImpl;
import com.zypg.cms.work.model.viewobject.common.lov.CmsLookupValueVORowImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.text.SimpleDateFormat;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import oracle.jbo.Row;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jun 03 18:49:37 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CommonAMImpl extends CustomApplicationModuleImpl implements CommonAM {
    /**
     * This is the default constructor (do not remove).
     */
    public CommonAMImpl() {
    }


    public void insertGatherMonitorRecord(Number docId, String fileName, String filePath) {
        CmsGatherMonitorTVOImpl gatherMonitorVO = this.getCmsGatherMonitorTVO();
        CmsGatherMonitorTVORowImpl gatherMonitorRow = (CmsGatherMonitorTVORowImpl)gatherMonitorVO.createRow();
        gatherMonitorRow.setDocId(docId);
        gatherMonitorRow.setFileName(fileName);
        gatherMonitorRow.setFilePath(filePath);
        gatherMonitorVO.insertRow(gatherMonitorRow);
    }

    public void preMgmtAttachTable(Number sourceDocId, String libCode) {
        CmsAttachTVOImpl tvo = this.getCmsAttachTVO4View();
        tvo.setbvScourceDocId(sourceDocId);
        tvo.executeQuery();
    }

    public String findLovMeaingByLookupValueCode(String lookupTypeCode, String lookupValueCode) {
        CmsLookupValueVOImpl vo = this.getCmsLookupValueVO();
        Row[] rows =
            vo.getFilteredRows(new RowQualifier("LookupTypeCode ='" + lookupTypeCode + "' AND LookupValueCode ='" +
                                                lookupValueCode + "'"));
        if (rows.length > 0) {
            CmsLookupValueVORowImpl row = (CmsLookupValueVORowImpl)rows[0];
            return row.getMeaning();
        }
        return null;
    }


    public void deleteAttachById(Number attachId) {
        CmsAttachTVOImpl cmsAttachTVO = this.getCmsAttachTVO4View();
        Row[] rows = cmsAttachTVO.getFilteredRows("AttachId", attachId);
        if (rows.length > 0) {
            rows[0].remove();
            this.getTransaction().commit();
        }
    }

    public void updateDocStatus(List<Number> list, String statusCode) {
        StringBuffer docIdStr = new StringBuffer();
        for (Iterator it = list.iterator(); it.hasNext(); ) {
            docIdStr.append(String.valueOf(it.next()) + ",");
        }
        CmsDocTVOImpl docVO = this.getCmsDocTVO4Edit();
        docVO.setWhereClause(null);
        docVO.addWhereClause("Doc_Id in (" + docIdStr.substring(0, docIdStr.length() - 1) + ")");
        docVO.executeQuery();
        docVO.setRangeSize(-1);
        for (Row row : docVO.getAllRowsInRange()) {
            CmsDocTVORowImpl docRow = (CmsDocTVORowImpl)row;
            docRow.setLastUpdateDate(new Date());
            docRow.setStatus(statusCode);
            //修改插图的状态
            if ("TO_APPROVE_BOOK".equals(statusCode)) {
                this.updateBookAssortResStatus(docRow.getDocId(), "TO_INDEX_ILLUSTRATION", "ILLUSTRATION");
                this.updateBookAssortResStatus(docRow.getDocId(), "TO_APPROVE_VIDEO", "VIDEO");
                this.updateBookAssortResStatus(docRow.getDocId(), "TO_APPROVE_AUDIO", "AUDIO");
            }
        }
        this.getDBTransaction().commit();
    }


    public void updateDocStatusLog(List<Number> list, String statusCode, String operation, String libCoce) {
        if (list == null || list.size() == 0) {
            return;
        }
        StringBuffer docIdStr = new StringBuffer();
        for (Iterator it = list.iterator(); it.hasNext(); ) {
            docIdStr.append("'" + String.valueOf(it.next()) + "'" + ",");
        }
        CmsDocTVOImpl docVO = this.getCmsDocTVO4Edit();
        docVO.setWhereClause(null);
        docVO.addWhereClause("Doc_Id in (" + docIdStr.substring(0, docIdStr.length() - 1) + ")");
        docVO.executeQuery();
        docVO.setRangeSize(-1);
        for (Row row : docVO.getAllRowsInRange()) {
            CmsDocTVORowImpl docRow = (CmsDocTVORowImpl)row;
            docRow.setLastUpdateDate(new Date());
            docRow.setStatus(statusCode);
            //增加日志操作
            insertProcessLog(docRow.getDocId(), operation, statusCode, libCoce);
            //修改插图的状态
            System.out.println("statusCodestatusCode:" + statusCode);
            if (statusCode.startsWith("PUBED_")) {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
                System.out.println("保存最近一次发布时间..." + sdf.format(new java.util.Date()));
                docRow.setAttribute2(sdf.format(new java.util.Date())); //保存最近一次发布时间
            }
            if ("PUBED_BOOK".equals(statusCode)) {
                this.updateBookAssortResStatus(docRow.getDocId(), "PUBED_ILLUSTRATION", "ILLUSTRATION");
                this.updateBookAssortResStatus(docRow.getDocId(), "PUBED_VIDEO", "VIDEO");
                this.updateBookAssortResStatus(docRow.getDocId(), "PUBED_AUDIO", "AUDIO");
            }
        }
        this.getDBTransaction().commit();
    }

    public void deleteAndRecoverDoc(List<Number> list, String deleteFlag) {
        StringBuffer docIdStr = new StringBuffer();
        for (Iterator it = list.iterator(); it.hasNext(); ) {
            docIdStr.append(String.valueOf(it.next()) + ",");
        }
        CmsDocTVOImpl docVO = this.getCmsDocTVO4Edit();
        docVO.setWhereClause(null);
        docVO.addWhereClause("Doc_Id in (" + docIdStr.substring(0, docIdStr.length() - 1) + ")");
        docVO.executeQuery();
        docVO.setRangeSize(-1);
        for (Row row : docVO.getAllRowsInRange()) {
            CmsDocTVORowImpl docRow = (CmsDocTVORowImpl)row;
            docRow.setDeleteFlag(deleteFlag);
        }
        this.getDBTransaction().commit();
    }

    public String deleteGatherMonitorRecord(Number docId) {
        String result = null;
        CallableStatement st = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin ? := cms_common_pkg.delete_gather_monitor_record(?); end;",
                                                 this.getDBTransaction().DEFAULT);
            st.registerOutParameter(1, Types.VARCHAR);
            st.setObject(2, docId);
            st.execute();
            result = (String)st.getObject(1);
        } catch (SQLException e) {
            result = "N";
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        if ("S".equals(result)) {
            this.getDBTransaction().commit();
        } else {
            this.getDBTransaction().rollback();
        }
        return result;
    }


    /****************************************日志相关**************************************************************/

    /**
     *
     * @param docId
     * @param operation
     * @param startPoint
     * @param libCoce
     * @return
     */
    public Map<String, String> insertProcessLog(Number docId, String operation, String startPoint, String libCoce) {
        Map<String, String> map = new HashMap<String, String>();
        CallableStatement st = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin cms_work_platform_pkg.insert_process_log(?,?,?,?,?,?,?); end;",
                                                 this.getDBTransaction().DEFAULT);
            st.setObject(1, docId);
            st.setObject(2, operation);
            st.setObject(3, this.getCustomDBTransaction().getUserId());
            st.setObject(4, startPoint);
            st.setObject(5, libCoce);
            st.registerOutParameter(6, Types.VARCHAR);
            st.registerOutParameter(7, Types.VARCHAR);
            st.executeUpdate();
            map.put("x_return_code", (String)st.getObject(6));
            map.put("x_return_msg", (String)st.getObject(7));
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return map;
    }

    /**
     * 清除当前用户之前的批量同步日志
     * @return
     */
    public String clearSyncLog(String compCode, String libCode) {
        String result = null;
        CallableStatement st = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin cms_common_pkg.clear_sync_log(?,?,?,?,?); end;",
                                                 this.getDBTransaction().DEFAULT);
            st.setObject(1, this.getCustomDBTransaction().getUserName().toUpperCase());
            st.setObject(2, compCode);
            st.setObject(3, libCode);
            st.registerOutParameter(4, Types.VARCHAR);
            st.registerOutParameter(5, Types.VARCHAR);
            st.executeUpdate();
            result = (String)st.getObject(4);
            if (!"S".equals(result)) {
                result = (String)st.getObject(5);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    /**
     * 处理批量同步的日志
     * @param docId
     * @param fileName
     * @param filePath
     * @return
     */
    public String processSyncLog(Number docId, String fileName, String filePath, String userName, String compCode,
                                 String libCode, String operation, String gatherResult, String thumbnailResult,
                                 String remarks, String batchNum) {
        System.out.println("fileName:" + fileName + "  filePath:" + filePath);
        String result = null;
        CallableStatement st = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin cms_common_pkg.sync_log_processor(?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;",
                                                 this.getDBTransaction().DEFAULT);
            st.setObject(1, this.getCustomDBTransaction().getUserId());
            st.setObject(2, userName == null ? null : userName.toUpperCase());
            st.setObject(3, compCode);
            st.setObject(4, libCode);
            st.setObject(5, docId);
            st.setObject(6, fileName);
            st.setObject(7, filePath);
            st.setObject(8, operation);
            st.setObject(9, gatherResult);
            st.setObject(10, thumbnailResult);
            st.setObject(11, remarks);
            st.setObject(12, batchNum);
            st.registerOutParameter(13, Types.VARCHAR);
            st.registerOutParameter(14, Types.VARCHAR);
            st.executeUpdate();
            result = (String)st.getObject(13);
            if (!"S".equals(result)) {
                result = (String)st.getObject(14);
            }
            System.out.println("cms_common_pkg.sync_log_processor  result:" + result);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public void startSync(String docId) {
        CallableStatement st = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin cms_common_pkg.start_sync(?); end;", this.getDBTransaction().DEFAULT);
            st.setObject(1, docId);
            st.execute();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public void endSync(String docId) {
        CallableStatement st = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin cms_common_pkg.end_sync(?); end;", this.getDBTransaction().DEFAULT);
            st.setObject(1, docId);
            st.execute();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public void fileManage(Number docId, String syncFlag) {
        CallableStatement st = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin cms_common_pkg.file_manage(?,?); end;", this.getDBTransaction().DEFAULT);
            st.setObject(1, docId);
            st.setObject(2, syncFlag);
            st.execute();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public String getFileManageDirectory(Number docId) {
        String result = null;
        CallableStatement st = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin ? := cms_common_pkg.get_file_manage_directory(?); end;",
                                                 this.getDBTransaction().DEFAULT);
            st.registerOutParameter(1, Types.VARCHAR);
            st.setObject(2, docId);
            st.execute();
            result = (String)st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public String getSyncFlag(Number docId) {
        String result = null;
        CallableStatement st = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin ? := cms_common_pkg.get_sync_flag(?); end;", this.getDBTransaction().DEFAULT);
            st.registerOutParameter(1, Types.VARCHAR);
            st.setObject(2, docId);
            st.execute();
            result = (String)st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }


    /**
     * 当图书发布或者撤销发布时相关插图、视频、音频资源随同发布或撤销发布
     * @param docId
     * @param status
     * @param libCode
     * @return
     */
    public String updateBookAssortResStatus(Number docId, String status, String libCode) {
        String result = null;
        CallableStatement st = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin ? := cms_work_platform_pkg.update_book_assort_res_status(?,?,?); end;",
                                                 this.getDBTransaction().DEFAULT);
            st.registerOutParameter(1, Types.VARCHAR);
            st.setObject(2, docId);
            st.setObject(3, status);
            st.setObject(4, libCode);
            st.execute();
            result = (String)st.getObject(1);
        } catch (SQLException e) {
            result = "N";
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }


    public String getDocType(String filePath, String libCode) {
        String result = null;
        CallableStatement st = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin ? := cms_common_pkg.get_doc_type(?,?); end;", this.getDBTransaction().DEFAULT);
            st.registerOutParameter(1, Types.VARCHAR);
            st.setObject(2, filePath);
            st.setObject(3, libCode);
            st.execute();
            result = (String)st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public String getEntryTitle(Number docId) {
        String result = null;
        CallableStatement st = null;
        try {
            st =
 this.getDBTransaction().createCallableStatement("begin ? := cms_common_pkg.get_entry_title(?); end;", this.getDBTransaction().DEFAULT);
            st.registerOutParameter(1, Types.VARCHAR);
            st.setObject(2, docId);
            st.execute();
            result = (String)st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public Row initOnlineReadInfo(Number docId) {
        CmsDocUcmRelTVOImpl onlineReadVO = this.getCmsDocUcmRelTVO4OnlineRead();
        onlineReadVO.setbvDocId(docId);
        onlineReadVO.executeQuery();
        onlineReadVO.setRangeSize(-1);
        if (onlineReadVO.getEstimatedRowCount() > 0) {
            return onlineReadVO.first();
        }
        return null;
    }

    /** Container's getter for CmsGatherMonitorTVO.
     * @return CmsGatherMonitorTVO
     */
    public CmsGatherMonitorTVOImpl getCmsGatherMonitorTVO() {
        return (CmsGatherMonitorTVOImpl)findViewObject("CmsGatherMonitorTVO");
    }


    /**
     * Container's getter for CmsAttachTVO.
     * @return CmsAttachTVO
     */
    public CmsAttachTVOImpl getCmsAttachTVO4View() {
        return (CmsAttachTVOImpl)findViewObject("CmsAttachTVO4View");
    }

    /**
     * Container's getter for CmsLookupValueVO.
     * @return CmsLookupValueVO
     */
    public CmsLookupValueVOImpl getCmsLookupValueVO() {
        return (CmsLookupValueVOImpl)findViewObject("CmsLookupValueVO");
    }

    /**
     * Container's getter for CmsDocTVO4Edit.
     * @return CmsDocTVO4Edit
     */
    public CmsDocTVOImpl getCmsDocTVO4Edit() {
        return (CmsDocTVOImpl)findViewObject("CmsDocTVO4Edit");
    }

    /**
     * Container's getter for CmsDocUcmRelTVO4OnlineRead.
     * @return CmsDocUcmRelTVO4OnlineRead
     */
    public CmsDocUcmRelTVOImpl getCmsDocUcmRelTVO4OnlineRead() {
        return (CmsDocUcmRelTVOImpl)findViewObject("CmsDocUcmRelTVO4OnlineRead");
    }
}
