package com.zypg.cms.work.model.am;


import com.zypg.cms.work.model.viewobject.relation.CmsDocRelTVOImpl;
import com.zypg.cms.work.model.viewobject.relation.CmsDocRelTVORowImpl;
import com.zypg.cms.work.model.viewobject.relation.query.CmsDoc4RelationQueryVOImpl;
import com.zypg.cms.work.model.viewobject.relation.query.CmsDoc4RelationQueryVORowImpl;
import com.zypg.cms.work.model.viewobject.relation.query.CmsDocRelVOImpl;
import com.zypg.cms.work.model.viewobject.relation.query.CmsDocRetrivalVOImpl;
import com.zypg.cms.work.model.viewobject.relation.query.CmsLibRetrivalVOImpl;
import com.zypg.cms.work.model.viewobject.relation.query.CmsLibRetrivalVORowImpl;

import oracle.jbo.Row;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 13 11:07:58 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RelationAMImpl extends ApplicationModuleImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public RelationAMImpl() {
    }

    public void deleteDocRel(Number docId, Number parentDocId) {
        CmsDocRelTVOImpl relVO = this.getCmsDocRelTVO();
        Row[] rows = relVO.getFilteredRows(new RowQualifier("DocId=" + docId + " and ParentDocId=" + parentDocId));
        if (rows.length > 0) {
            rows[0].remove();
        }
    }

    public void init4RelationSet() {
        initRelationQuery();
        this.getCmsDocRetrivalVO().executeEmptyRowSet();
    }

    public void initRelationQuery() {
        CmsDoc4RelationQueryVOImpl queryVO = this.getCmsDoc4RelationQueryVO();
        queryVO.executeQuery();
        Row row = queryVO.first();
        if (row != null) {
            queryVO.setCurrentRow(row);
        }
    }

    public void queryDoc4Relation(Number docId, String actionName) {
        if (!"search".equals(actionName)) {
            init4RelationSet();
            return;
        }
        CmsDoc4RelationQueryVOImpl queryVO = this.getCmsDoc4RelationQueryVO();
        CmsDoc4RelationQueryVORowImpl queryRow = (CmsDoc4RelationQueryVORowImpl)queryVO.getCurrentRow();

        CmsDocRetrivalVOImpl docVO = this.getCmsDocRetrivalVO();
        String title = queryRow.getTitle();
        String author = queryRow.getAuthor();
        String keyword = queryRow.getKeyword();
        String isbn = queryRow.getIsbn();
        Date startData = queryRow.getStartTime();
        Date endData = queryRow.getEndTime();
        //                docVO.setbvAuthor(queryRow.getAuthor());
        //                docVO.setbvIsbn(queryRow.getIsbn());
        //                docVO.setbvKeyword(queryRow.getKeyword());
        //                docVO.setbvTitle(queryRow.getTitle());
        //                docVO.setbvStartTime(queryRow.getStartTime());
        //                docVO.setbvEndTime(queryRow.getEndTime());
        //                docVO.setbvDocId(docId);
        CmsLibRetrivalVOImpl libVO = this.getCmsLibRetrivalVO();
        StringBuffer sb = new StringBuffer();
        for (Row row : libVO.getAllRowsInRange()) {
            CmsLibRetrivalVORowImpl libRow = (CmsLibRetrivalVORowImpl)row;
            if (libRow.getChecked()) {
                sb.append(",'" + libRow.getLibCode() + "'");
            }
        }
        String clause = "lib_code in (" + sb.toString().substring(1) + ")";
        if (title != null) {
            clause = clause + " and (UPPER(TITLE) LIKE UPPER('%' ||" + "'" + title + "'" + "|| '%') )";
        }
        if (author != null) {
            clause = clause + " and (AUTHOR LIKE ('%' || " + "'" + author + "'" + "|| '%') )";
        }
        if (keyword != null) {
            clause = clause + " and (UPPER(KEYWORD) LIKE UPPER('%' ||" + "'" + keyword + "'" + "|| '%') )";
        }
        if (isbn != null) {
            clause = clause + " and (UPPER(ISBN ) LIKE UPPER('%' ||" + "'" + isbn + "'" + "|| '%') )";
        }

        if (startData != null && endData != null) {
            clause =
                    clause + " and (PUB_TIME BETWEEN  to_date('" + startData + "','yyyy/mm/dd')  AND to_date('" + endData +
                    "','yyyy/mm/dd') )";
        } else if (startData == null && endData != null) {
            clause = clause + " and (PUB_TIME   <  to_date('" + endData + "','yyyy/mm/dd'))";
        } else if (startData != null && endData == null) {
            clause = clause + " and (PUB_TIME   >  to_date('" + startData + "','yyyy/mm/dd'))";
        }
        docVO.addWhereClause(clause);
        docVO.executeQuery();
//        System.out.println(docVO.getQuery());
        docVO.setWhereClause(null);
    }

    public void setRelation(Number docId, Number parentDocId, String libCode, String relLibCode) {
        CmsDocRelTVOImpl docRelVO = this.getCmsDocRelTVO();
        Row[] rows1 = docRelVO.getFilteredRows(new RowQualifier("DocId=" + docId + " and ParentDocId=" + parentDocId));
        if (rows1.length == 0) {
            CmsDocRelTVORowImpl row = (CmsDocRelTVORowImpl)docRelVO.createRow();
            row.setDocId(docId);
            row.setParentDocId(parentDocId);
            row.setRelType(libCode);
            docRelVO.insertRow(row);
        }
        Row[] rows2 = docRelVO.getFilteredRows(new RowQualifier("DocId=" + parentDocId + " and ParentDocId=" + docId));
        if (rows2.length == 0) {
            CmsDocRelTVORowImpl row = (CmsDocRelTVORowImpl)docRelVO.createRow();
            row.setDocId(parentDocId);
            row.setParentDocId(docId);
            row.setRelType(relLibCode);
            docRelVO.insertRow(row);
        }
    }


    /**
     * Container's getter for CmsDocRelVO.
     * @return CmsDocRelVO
     */
    public CmsDocRelVOImpl getCmsDocRelVO() {
        return (CmsDocRelVOImpl)findViewObject("CmsDocRelVO");
    }

    /**
     * Container's getter for CmsDocRelTVO.
     * @return CmsDocRelTVO
     */
    public CmsDocRelTVOImpl getCmsDocRelTVO() {
        return (CmsDocRelTVOImpl)findViewObject("CmsDocRelTVO");
    }

    /**
     * Container's getter for CmsDoc4RelationQueryVO.
     * @return CmsDoc4RelationQueryVO
     */
    public CmsDoc4RelationQueryVOImpl getCmsDoc4RelationQueryVO() {
        return (CmsDoc4RelationQueryVOImpl)findViewObject("CmsDoc4RelationQueryVO");
    }

    /**
     * Container's getter for CmsLibRetrivalVO.
     * @return CmsLibRetrivalVO
     */
    public CmsLibRetrivalVOImpl getCmsLibRetrivalVO() {
        return (CmsLibRetrivalVOImpl)findViewObject("CmsLibRetrivalVO");
    }

    /**
     * Container's getter for CmsDocRetrivalVO.
     * @return CmsDocRetrivalVO
     */
    public CmsDocRetrivalVOImpl getCmsDocRetrivalVO() {
        return (CmsDocRetrivalVOImpl)findViewObject("CmsDocRetrivalVO");
    }
}
