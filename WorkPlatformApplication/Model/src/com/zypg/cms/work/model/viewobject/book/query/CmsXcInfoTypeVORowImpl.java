package com.zypg.cms.work.model.viewobject.book.query;

import java.math.BigDecimal;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 06 17:47:52 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CmsXcInfoTypeVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        LookupValueId {
            public Object get(CmsXcInfoTypeVORowImpl obj) {
                return obj.getLookupValueId();
            }

            public void put(CmsXcInfoTypeVORowImpl obj, Object value) {
                obj.setLookupValueId((Number)value);
            }
        }
        ,
        LookupValueCode {
            public Object get(CmsXcInfoTypeVORowImpl obj) {
                return obj.getLookupValueCode();
            }

            public void put(CmsXcInfoTypeVORowImpl obj, Object value) {
                obj.setLookupValueCode((String)value);
            }
        }
        ,
        Meaning {
            public Object get(CmsXcInfoTypeVORowImpl obj) {
                return obj.getMeaning();
            }

            public void put(CmsXcInfoTypeVORowImpl obj, Object value) {
                obj.setMeaning((String)value);
            }
        }
        ,
        LookupTypeCode {
            public Object get(CmsXcInfoTypeVORowImpl obj) {
                return obj.getLookupTypeCode();
            }

            public void put(CmsXcInfoTypeVORowImpl obj, Object value) {
                obj.setLookupTypeCode((String)value);
            }
        }
        ,
        Seq {
            public Object get(CmsXcInfoTypeVORowImpl obj) {
                return obj.getSeq();
            }

            public void put(CmsXcInfoTypeVORowImpl obj, Object value) {
                obj.setSeq((BigDecimal)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CmsXcInfoTypeVORowImpl object);

        public abstract void put(CmsXcInfoTypeVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int LOOKUPVALUEID = AttributesEnum.LookupValueId.index();
    public static final int LOOKUPVALUECODE = AttributesEnum.LookupValueCode.index();
    public static final int MEANING = AttributesEnum.Meaning.index();
    public static final int LOOKUPTYPECODE = AttributesEnum.LookupTypeCode.index();
    public static final int SEQ = AttributesEnum.Seq.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CmsXcInfoTypeVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute LookupValueId.
     * @return the LookupValueId
     */
    public Number getLookupValueId() {
        return (Number) getAttributeInternal(LOOKUPVALUEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LookupValueId.
     * @param value value to set the  LookupValueId
     */
    public void setLookupValueId(Number value) {
        setAttributeInternal(LOOKUPVALUEID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LookupValueCode.
     * @return the LookupValueCode
     */
    public String getLookupValueCode() {
        return (String) getAttributeInternal(LOOKUPVALUECODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LookupValueCode.
     * @param value value to set the  LookupValueCode
     */
    public void setLookupValueCode(String value) {
        setAttributeInternal(LOOKUPVALUECODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Meaning.
     * @return the Meaning
     */
    public String getMeaning() {
        return (String) getAttributeInternal(MEANING);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Meaning.
     * @param value value to set the  Meaning
     */
    public void setMeaning(String value) {
        setAttributeInternal(MEANING, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LookupTypeCode.
     * @return the LookupTypeCode
     */
    public String getLookupTypeCode() {
        return (String) getAttributeInternal(LOOKUPTYPECODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LookupTypeCode.
     * @param value value to set the  LookupTypeCode
     */
    public void setLookupTypeCode(String value) {
        setAttributeInternal(LOOKUPTYPECODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Seq.
     * @return the Seq
     */
    public BigDecimal getSeq() {
        return (BigDecimal) getAttributeInternal(SEQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Seq.
     * @param value value to set the  Seq
     */
    public void setSeq(BigDecimal value) {
        setAttributeInternal(SEQ, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
